# .bashrc

############################################
# Options relevant for display terminal only
############################################


if [[ $TERM == "xterm" || $TERM == "xterm-256color" || $TERM == "dumb" || $TERM == "rxvt" || $EMACS == "t" ]]; then
    #Expand Env. Vars
    shopt -s direxpand # enable
    #shopt -u direxpand # disable

    shopt -s expand_aliases # enable
    #shopt -u expand_aliases # disable
    
    # Replace Prompt
    if [ -n "$SSH_CLIENT" ] || [ -n "$SSH_TTY" ]; then
        PS1="|\h|>"

        #This shows the path on the window tab or title.
        # see https://superuser.com/questions/79972/set-the-title-of-the-terminal-window-to-the-current-directory
        PROMPT_COMMAND='echo -ne "\033]0;${USER}@${HOSTNAME}:${PWD}\007"'
        
    elif [[ $EMACS == "t" ]]; then
        PS1="|\w|>"
        
    else
        PS1=">"

        #This shows the path on the window tab or title.
        # see https://superuser.com/questions/79972/set-the-title-of-the-terminal-window-to-the-current-directory
        PROMPT_COMMAND='echo -ne "\033]0;${USER}:${PWD}\007"'
    fi

    PS2="...>"

    if [[ $EMACS != "t" ]]; then
        #################  
        # Command History
        #################    
        bind '"\e[A": history-search-backward'
        bind '"\e[B": history-search-forward'
        bind '"\eOA": history-search-backward'
        bind '"\eOB": history-search-forward'
    fi

    ######################
    #Aliases and Functions
    ######################

    if hash bat 2> /dev/null; then
       alias cat='bat'
    fi

    alias ..="cd .."

    alias pg="ps aux | grep -v grep | grep -i -e VSZ -e"

    alias mkdirs="mkdir -pv"
    mcd () {
        mkdir -p $1
        cd $1
    }

    if hash pydf 2> /dev/null; then
        alias df="pydf"
    fi

    alias gitExtensions='mono /home/simonk/github/GitExtensions/GitExtensions.exe &'

    #####################
    #Multi-Type Extractor
    #####################
    
    function extract {
        if [ -z "$1" ]; then
            # display usage if no parameters given
            echo "Usage: extract <path/file_name>.<zip|rar|bz2|gz|tar|tbz2|tgz|Z|7z|xz|ex|tar.bz2|tar.gz|tar.xz>"
        else
            if [ -f $1 ] ; then
                # NAME=${1%.*}
                # mkdir $NAME && cd $NAME
                case $1 in
                    *.tar.bz2)   tar xvjf $1    ;;
                    *.tar.gz)    tar xvzf $1    ;;
                    *.tar.xz)    tar xvJf $1    ;;
                    *.lzma)      unlzma $1      ;;
                    *.bz2)       bunzip2 $1     ;;
                    *.rar)       unrar x -ad $1 ;;
                    *.gz)        gunzip $1      ;;
                    *.tar)       tar xvf $1     ;;
                    *.tbz2)      tar xvjf $1    ;;
                    *.tgz)       tar xvzf $1    ;;
                    *.zip)       unzip $1       ;;
                    *.Z)         uncompress $1  ;;
                    *.7z)        7z x $1        ;;
                    *.xz)        unxz $1        ;;
                    *.exe)       cabextract $1  ;;
                    *)           echo "extract: '$1' - unknown archive method" ;;
                esac
            else
                echo "$1 - file does not exist"
            fi
        fi
    }
    
    ##########################
    #Export X server with sudo
    ##########################

    export XAUTHORITY=~/.Xauthority

    #  #################################
    #  #Save and Load tabs configuration
    #  #################################
    #
    #  
    #  function SaveTabs {
    #
    #    if [ -z "$1" ]; then
    #      # display usage if no parameters given
    #      echo "Usage: SaveTabs <path/file_name>"
    #    
    #    gnome-terminal --save-config="$1"
    #
    #    LINES=($(grep -n '\[Terminal' "$1" | cut -d: -f1))
    #
    #      for ((i=0; i<$(grep '\[Terminal' "$1" | wc -l); i++))
    #      do
    #        TITLE=$(xprop -id $WINDOWID WM_NAME | sed -e 's/WM_NAME(STRING) = "//' -e 's/"$//';xdotool key ctrl+Page_Down;)
    #        sed -ri "$((${LINES[$i]}+$i))s/.*/&\nTitle=$TITLE/" "$1" 
    #      done
    #  }
    #      
    #
    #
    #    #ORIGINAL:
    ##!/usr/bin/env bash
    #
    #gnome-terminal --save-config=/tmp/test
    #
    #LINES=($(grep -n '\[Terminal' /tmp/test | cut -d: -f1))
    #for ((i=0; i<$(grep '\[Terminal' /tmp/test | wc -l); i++))
    #do
    #    TITLE=$(xprop -id $WINDOWID WM_NAME | sed -e 's/WM_NAME(STRING) = "//' -e 's/"$//';xdotool key ctrl+Page_Down;)
    #    sed -ri "$((${LINES[$i]}+$i))s/.*/&\nTitle=$TITLE/" /tmp/test 
    #done    

    
    ##########
    #Remote desktop etc
    ##########

    RemoteAccessSimon() { /usr/bin/rdesktop -g 1672x976 -u simon -d XJETDOM -p `cat /home/simon/.SimonPass` "$1"; }
    TunnelAccessSimon() { ssh -f -N -L 3389:"$1":3389 XJetDovg && RemoteAccessSimon localhost; killall ssh; }
    
    RemoteAccessMachine() { /usr/bin/rdesktop -g 1672x976 -u machine -d XJETDOM -p `cat /home/simon/.MachinePass` "$1"; }
    TunnelAccessMachine() { ssh -f -N -L 3389:"$1":3389 XJetDovg && RemoteAccessMachine localhost; killall ssh; }

    ##########
    #Accessing remote web pages
    ##########
    RedmineTunnelAccess() { ssh -f -N -L 8080:swteam:80 XJetDovg ; }


    ##########
    #Shortcuts
    ##########
    export NOTEBOOK=/home/simonk/Notebook
    alias MountNotebook='encfs $DRIVE/Notebook/ $NOTEBOOK; (cd $NOTEBOOK; git status)'
    alias UnmountNotebook='fusermount -u $NOTEBOOK'  

    export GALAXY=/home/simon/Galaxy
    alias MountGalaxy='simple-mtpfs $GALAXY'
    alias MountGalaxyEncrypted='encfs $GALAXY/Card/Personal/ $DECRYPTED'
    alias UnmountGalaxy='fusermount -u $GALAXY'  
    
    alias PhoneBook='openoffice.org $DECRYPTED/Telephones/Phonebook.xls'
    alias PhoneBookAK='openoffice.org $DECRYPTED/Telephones/AK\ telephon_book.doc'

    export DECRYPTED=/home/simonk/Decrypted
    alias MountDropBoxEncrypted='encfs $DRIVE/ASK/Personal/ $DECRYPTED; (cd $DECRYPTED; git status); caja $DECRYPTED&'
    alias UnmountDecrypted='fusermount -u $DECRYPTED'

    export INCOMING=/home/simonk/Incoming

fi

###########
# git completion in Bash
###########
if [ -f $SimonEnvBashPath"GitAutoComplete" ]; then
    source $SimonEnvBashPath"GitAutoComplete"
    #source /usr/share/bash-completion/completions/git
fi

##########
#virtualbox Autocomplete in bash
##########
if [ -f $SimonEnvBashPath"VirtualBoxAutoComplete" ]; then
    source $SimonEnvBashPath"VirtualBoxAutoComplete"
fi
