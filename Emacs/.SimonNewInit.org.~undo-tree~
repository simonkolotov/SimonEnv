"4c519017fc059358cbd436748d9bb33f8f7352c3"
#s(undo-tree [nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil (#10=[nil nil ((#("
" 0 1 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block))) . 42454) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (undo-tree-id159 . 1)) nil (23420 60584 470648 259000) 0 nil]) ((#("      ;;Disable elisp Flycheck in src-block
      (defun disable-fylcheck-in-org-src-block ()
        (setq-local flycheck-disabled-checkers '(emacs-lisp-checkdoc)))

      (add-hook 'org-src-mode-hook 'disable-fylcheck-in-org-src-block)
" 0 6 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #1=(org-block)) 6 8 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-delimiter-face . #1#)) 8 44 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-face . #1#)) 44 51 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #1#) 51 56 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-keyword-face . #1#)) 56 57 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #1#) 57 90 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-function-name-face . #1#)) 90 103 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #1#) 103 113 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-keyword-face . #1#)) 113 114 (fontified t font-lock-fontified t src-block t font-lock-multiline t face #1#) 114 237 (fontified t font-lock-fontified t src-block t font-lock-multiline t face #1#) 237 238 (fontified t font-lock-fontified t src-block t font-lock-multiline t face #1#)) . -42455) (undo-tree-id160 . -238) (undo-tree-id161 . 124) (undo-tree-id162 . 124) (undo-tree-id163 . -114) (undo-tree-id164 . 174) (undo-tree-id165 . 124) (undo-tree-id166 . -64) (undo-tree-id167 . 218) (undo-tree-id168 . 174) (undo-tree-id169 . -20) (undo-tree-id170 . 238) (undo-tree-id171 . 218) (undo-tree-id172 . 238) (undo-tree-id173 . 238) (undo-tree-id174 . -238) (undo-tree-id175 . 194) (undo-tree-id176 . 238) (undo-tree-id177 . -44) (undo-tree-id178 . 144) (undo-tree-id179 . 194) (undo-tree-id180 . -94) (undo-tree-id181 . 72) (undo-tree-id182 . 144) (undo-tree-id183 . -166) (undo-tree-id184 . 71) (undo-tree-id185 . 72) (undo-tree-id186 . -167) (undo-tree-id187 . 71) (undo-tree-id188 . -238) 42693) nil (23420 60584 470970 293000) 0 nil]) ((#("
" 0 1 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block))) . -9760) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (undo-tree-id198 . -1) 9761) nil (23420 60584 471124 783000) 0 nil]) ((#("
     (add-to-list 'load-path (concat emacs-git \"Plugins/flycheck\"))" 0 48 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #2=(org-block)) 48 66 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-string-face . #2#)) 66 68 (fontified t font-lock-fontified t src-block t font-lock-multiline t face #2#)) . 9761) (undo-tree-id199 . -68) (undo-tree-id200 . -68) (undo-tree-id201 . -68) (undo-tree-id202 . -57) (undo-tree-id203 . 11) (undo-tree-id204 . -68) (undo-tree-id205 . -68) (undo-tree-id206 . -68) (undo-tree-id207 . 67) (undo-tree-id208 . -1) (undo-tree-id209 . 68) (undo-tree-id210 . 67)) nil (23420 60584 471270 304000) 0 nil]) ((#("
" 0 1 (fontified t)) . 17528)) nil (23420 60584 471305 116000) 0 nil]) ((#("*** flycheck for lint
    #+BEGIN_SRC emacs-lisp
      ;;; Code:
      (require 'flycheck)
      (global-flycheck-mode)
    #+END_SRC" 0 2 (fontified t face (:foreground #5="#2c2c2c") keymap #3=(keymap (mouse-1 . org-cycle) (mouse-2 lambda (e) (interactive "e") (mouse-set-point e) (org-cycle)))) 2 3 (fontified t composition (1 1 #6=[8226]) keymap #3# face org-level-3) 3 4 (fontified t keymap #3# face org-level-3) 4 21 (fontified t face org-level-3) 21 22 (fontified t) 22 48 (fontified t font-lock-fontified t font-lock-multiline t face org-block-begin-line) 48 49 (fontified t font-lock-fontified t help-echo nil font-lock-multiline t face org-block-begin-line) 49 55 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #4=(org-block)) 55 59 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-delimiter-face . #4#)) 59 65 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-face . #4#)) 65 72 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #4#) 72 79 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-keyword-face . #4#)) 79 81 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #4#) 81 89 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-constant-face . #4#)) 89 119 (fontified t font-lock-fontified t src-block t font-lock-multiline t face #4#) 119 120 (fontified t font-lock-fontified t src-block t font-lock-multiline t face #4#) 120 133 (fontified t font-lock-fontified t font-lock-multiline t face org-block-end-line)) . 17528) (undo-tree-id211 . -133) (undo-tree-id212 . -133) (t 23420 60564 767319 123000)) nil (23420 60584 471343 27000) 0 nil]) ((#("
" 0 1 (fontified t)) . 31790) (undo-tree-id129 . 1) (undo-tree-id130 . 1) (undo-tree-id131 . 1) (undo-tree-id132 . 1) (undo-tree-id133 . 1) (undo-tree-id134 . 1) (undo-tree-id135 . 1) (undo-tree-id136 . 1)) nil (23420 60564 751404 602000) 0 nil]) ((#("** Aggressive Indent
   This reindents all code after every change
   #+BEGIN_SRC emacs-lisp
     (require 'aggressive-indent)
     (global-aggressive-indent-mode 1)
   #+END_SRC" 0 1 (fontified t font-lock-fontified t face (:foreground #5#) keymap #3#) 1 2 (fontified t font-lock-fontified t composition (1 1 #6#) keymap #3# face org-level-2) 2 3 (fontified t font-lock-fontified t keymap #3# face org-level-2) 3 20 (fontified t font-lock-fontified t face org-level-2) 20 21 (fontified t font-lock-fontified t) 21 67 (fontified t font-lock-fontified t) 67 70 (fontified t font-lock-fontified t font-lock-multiline t face org-block-begin-line) 70 71 (fontified t font-lock-fontified t font-lock-multiline t face org-block-begin-line) 71 92 (fontified t font-lock-fontified t font-lock-multiline t face org-block-begin-line) 92 93 (fontified t font-lock-fontified t help-echo nil font-lock-multiline t face org-block-begin-line) 93 99 (fontified t font-lock-fontified t font-lock-multiline t face #7=(org-block) help-echo nil src-block t) 99 106 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-keyword-face . #7#) help-echo nil src-block t) 106 108 (fontified t font-lock-fontified t font-lock-multiline t face #7# help-echo nil src-block t) 108 125 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-constant-face . #7#) help-echo nil src-block t) 125 165 (fontified t font-lock-fontified t font-lock-multiline t face #7# src-block t) 165 166 (fontified t font-lock-fontified t font-lock-multiline t face #7# src-block t) 166 169 (fontified t font-lock-fontified t font-lock-multiline t face org-block-end-line) 169 178 (fontified t font-lock-fontified t font-lock-multiline t face org-block-end-line)) . -31790) (undo-tree-id137 . 12) (undo-tree-id138 . 12) (undo-tree-id139 . 12) (undo-tree-id140 . 12) (undo-tree-id141 . 12) (undo-tree-id142 . 12) (undo-tree-id143 . -75) (undo-tree-id144 . -165) (undo-tree-id145 . -178) (undo-tree-id146 . -178) 31968 (t 23420 60501 105204 469000)) nil (23420 60564 751549 730000) 0 nil]) ((31883 . 31956) (#("     (require 'aggressive-indent)

" 0 6 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #8=(org-block)) 6 13 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-keyword-face . #8#)) 13 15 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #8#) 15 32 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-constant-face . #8#)) 32 34 (fontified t font-lock-fontified t src-block t font-lock-multiline t face #8#) 34 35 (fontified t font-lock-fontified t src-block t font-lock-multiline t face #8#)) . 31883) (undo-tree-id55 . 35) (undo-tree-id56 . 35) (undo-tree-id57 . -34) (undo-tree-id58 . -34) (undo-tree-id59 . 1) (undo-tree-id60 . 1) (undo-tree-id61 . 1) (undo-tree-id62 . 1) (undo-tree-id63 . 1) (undo-tree-id64 . 1) (undo-tree-id65 . 1) (undo-tree-id66 . 1) (undo-tree-id67 . 1) (undo-tree-id68 . 1) (undo-tree-id69 . 1) (undo-tree-id70 . 1) (undo-tree-id71 . 1) (undo-tree-id72 . 1) (undo-tree-id73 . 1) (undo-tree-id74 . 1) (undo-tree-id75 . 1) (undo-tree-id76 . 1) (undo-tree-id77 . 1) (undo-tree-id78 . 1) (undo-tree-id79 . 1) (undo-tree-id80 . 1) (undo-tree-id81 . 1) (undo-tree-id82 . 1) (undo-tree-id83 . 1) (undo-tree-id84 . 1) (undo-tree-id85 . 1) (undo-tree-id86 . 1) (undo-tree-id87 . 1) (undo-tree-id88 . 1) (undo-tree-id89 . 1) (undo-tree-id90 . 1) (undo-tree-id91 . 1) (undo-tree-id92 . 1) (undo-tree-id93 . 1) (undo-tree-id94 . 1) (undo-tree-id95 . 1) (undo-tree-id96 . 1) (undo-tree-id97 . 1) (undo-tree-id98 . 1) (undo-tree-id99 . 1) (undo-tree-id100 . 1) (undo-tree-id101 . 1) (undo-tree-id102 . 1) (undo-tree-id103 . 1) (undo-tree-id104 . 1) (undo-tree-id105 . 1) (undo-tree-id106 . 1) (undo-tree-id107 . 1) (undo-tree-id108 . 1) (undo-tree-id109 . 1) (undo-tree-id110 . 1) (undo-tree-id111 . 1) (undo-tree-id112 . 1) (undo-tree-id113 . 1) (undo-tree-id114 . 1) (undo-tree-id115 . 1) (undo-tree-id116 . 1) (undo-tree-id117 . 1) (undo-tree-id118 . 1) (undo-tree-id119 . 1) (undo-tree-id120 . 1) (undo-tree-id121 . 1) (undo-tree-id122 . 1) (undo-tree-id123 . 1) (undo-tree-id124 . 1) (undo-tree-id125 . 1) (undo-tree-id126 . 1) (undo-tree-id127 . 1) (undo-tree-id128 . 1) 31917) nil (23420 60501 92540 957000) 0 nil]) ((31916 . 31917) (t 23420 59810 30565 74000)) nil (23420 60501 92685 550000) 0 nil]) ((31883 . 31917) (#("
" 0 1 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) src-block t)) . 31883) (undo-tree-id3 . 1) (undo-tree-id4 . 1) (undo-tree-id5 . 1) (undo-tree-id6 . 1) (undo-tree-id7 . 1) (undo-tree-id8 . 1) (undo-tree-id9 . 1) (undo-tree-id10 . 1) (undo-tree-id11 . 1) (undo-tree-id12 . 1) (undo-tree-id13 . 1) (undo-tree-id14 . 1) (undo-tree-id15 . 1) (undo-tree-id16 . 1) (undo-tree-id17 . 1) (undo-tree-id18 . 1) (undo-tree-id19 . 1) (undo-tree-id20 . 1) (undo-tree-id21 . 1) (undo-tree-id22 . 1) (undo-tree-id23 . 1) (undo-tree-id24 . 1) (undo-tree-id25 . 1) (undo-tree-id26 . 1) (undo-tree-id27 . 1) (undo-tree-id28 . 1) (undo-tree-id29 . 1) (undo-tree-id30 . 1) (undo-tree-id31 . 1) (undo-tree-id32 . 1) (undo-tree-id33 . 1) (undo-tree-id34 . 1) (undo-tree-id35 . 1) (undo-tree-id36 . 1) (undo-tree-id37 . 1) (undo-tree-id38 . 1) (undo-tree-id39 . 1) (undo-tree-id40 . 1) (undo-tree-id41 . 1) (undo-tree-id42 . 1) (undo-tree-id43 . 1) (undo-tree-id44 . 1) (undo-tree-id45 . 1) (undo-tree-id46 . 1) (undo-tree-id47 . 1) (undo-tree-id48 . 1) (undo-tree-id49 . 1) (undo-tree-id50 . 1) (undo-tree-id51 . 1) (undo-tree-id52 . 1)) nil (23420 59810 15321 320000) 0 nil]) ((31883 . 31884) (#("   
" 0 3 (fontified t font-lock-fontified t font-lock-multiline t face #9=(org-block) src-block t) 3 4 (fontified t font-lock-fontified t font-lock-multiline t face #9# src-block t)) . 31883) (undo-tree-id53 . -3) 31886) nil (23420 59810 15445 699000) 0 nil]) ((#("+BEGIN_SRC " 0 11 (fontified t font-lock-fontified t font-lock-multiline t face org-block-begin-line)) . -31861) (31872 . 31893) 31872) nil (23420 59810 15482 307000) 0 nil]) ((#("?" 0 1 (fontified nil)) . 31872) (31860 . 31890) (#("<s" 0 2 (fontified t font-lock-fontified t)) . -31860) (undo-tree-id54 . -2) 31862) nil (23420 59810 15524 19000) 0 nil]) ((31860 . 31862)) nil (23420 59810 15549 109000) 0 nil]) ((31856 . 31860) (t 23420 59792 596075 612000)) nil (23420 59810 15569 663000) 0 nil]) ((31851 . 31856)) nil (23420 59792 581841 602000) 0 nil]) ((#("v" 0 1 (fontified t font-lock-fontified t)) . -31851) (undo-tree-id0 . -1) (#("h" 0 1 (fontified t font-lock-fontified t)) . -31852) (undo-tree-id1 . -1) 31853) nil (23420 59792 581923 990000) 0 nil]) ((31844 . 31853)) nil (23420 59792 581955 584000) 0 nil]) ((#("a" 0 1 (fontified t font-lock-fontified t)) . -31844) (undo-tree-id2 . -1) 31845) nil (23420 59792 581986 282000) 0 nil]) ((31837 . 31845)) nil (23420 59792 582006 79000) 0 nil]) ((31835 . 31837)) nil (23420 59792 582021 697000) 0 nil]) ((31814 . 31835)) nil (23420 59792 582037 606000) 0 nil]) ((31811 . 31814)) nil (23420 59792 582052 966000) 0 nil]) ((31810 . 31811)) nil (23420 59792 582068 395000) 0 nil]) ((31790 . 31810)) nil (23420 59792 582083 860000) 0 nil]) ((31789 . 31790) (t 23419 44081 171224 186000)) nil (23420 59792 582103 2000) 0 nil]) nil nil (23420 59792 582117 1000) 0 nil] #10# 2766 27 nil)