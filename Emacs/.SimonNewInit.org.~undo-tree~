"df80e3e2e5a5ea7fa35980cac5e26dff58781e74"
#s(undo-tree [nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil (#42=[nil nil ((#(" " 0 1 (fontified nil font-lock-fontified t src-block t font-lock-multiline t)) . -3429) (#(" " 0 1 (fontified t font-lock-fontified t src-block t font-lock-multiline t)) . -3384) (t 23423 16022 845842 678000)) nil (23423 16033 109665 859000) 0 nil]) ((31524 . 32972) (#("     (defalias 'list-buffers 'ibuffer-other-window) ; make ibuffer default

     (setq ibuffer-saved-filter-groups
           (quote ((\"default\"

                    (\"dired\" (mode . dired-mode))

                    (\"org\" (name . \"^.*org$\"))

                    (\"json\" (mode . js2-mode))
               
                    (\"shell\" (or (mode . eshell-mode) (mode . shell-mode)))
               
                    (\"mu4e\" (name . \"\\*mu4e\\*\"))
               
                    (\"programming\" (or
                                    (mode . python-mode)
                                    (mode . c-mode)
                                    (mode . c++-mode)
                                    (mode . lua-mode)
                                    (mode . c++-mode)
                                    ))
                    (\"emacs\" (or
                              (name . \"^\\\\*scratch\\\\*$\")
                              (name . \"^\\\\*Messages\\\\*$\")))
                    ))))

     (add-hook 'ibuffer-mode-hook
               (lambda ()
                 (ibuffer-auto-mode 1)
                 (ibuffer-switch-to-saved-filter-groups \"default\")))

     ;; don't show these
                                             ;(add-to-list 'ibuffer-never-show-predicates \"zowie\")
     ;; Don't show filter groups if there are no buffers in that group
     (setq ibuffer-show-empty-filter-groups nil)

     ;; Don't ask for confirmation to delete marked buffers
     (setq ibuffer-expert t)

" 0 6 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #1=(org-block)) 6 14 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-keyword-face . #1#)) 14 16 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #1#) 16 28 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-function-name-face . #1#)) 28 52 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #1#) 52 54 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-delimiter-face . #1#)) 54 75 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-face . #1#)) 75 82 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #1#) 82 86 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-keyword-face . #1#)) 86 127 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #1#) 127 132 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-keyword-face . #1#)) 132 135 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #1#) 135 144 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-string-face . #1#)) 144 167 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #1#) 167 174 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-string-face . #1#)) 174 218 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #1#) 218 223 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-string-face . #1#)) 223 232 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #1#) 232 241 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-string-face . #1#)) 241 266 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #1#) 266 272 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-string-face . #1#)) 272 329 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #1#) 329 336 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-string-face . #1#)) 336 338 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #1#) 338 340 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-keyword-face . #1#)) 340 421 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #1#) 421 427 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-string-face . #1#)) 427 436 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #1#) 436 437 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-string-face . #1#)) 437 438 (fontified t font-lock-fontified t help-echo #2="This \\ has no effect" src-block t font-lock-multiline t face (font-lock-warning-face font-lock-string-face . #1#)) 438 443 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-string-face . #1#)) 443 444 (fontified t font-lock-fontified t help-echo #2# src-block t font-lock-multiline t face (font-lock-warning-face font-lock-string-face . #1#)) 444 446 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-string-face . #1#)) 446 474 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #1#) 474 486 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #1#) 486 499 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-string-face . #1#)) 499 501 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #1#) 501 503 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-keyword-face . #1#)) 503 835 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #1#) 835 842 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-string-face . #1#)) 842 844 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #1#) 844 846 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-keyword-face . #1#)) 846 885 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #1#) 885 902 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-string-face . #1#)) 902 942 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #1#) 942 960 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-string-face . #1#)) 960 1040 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #1#) 1040 1046 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-keyword-face . #1#)) 1046 1145 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #1#) 1145 1154 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-string-face . #1#)) 1154 1164 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #1#) 1164 1167 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-delimiter-face . #1#)) 1167 1184 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-face . #1#)) 1184 1229 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #1#) 1229 1230 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-delimiter-face . #1#)) 1230 1283 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-face . #1#)) 1283 1288 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #1#) 1288 1291 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-delimiter-face . #1#)) 1291 1354 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-face . #1#)) 1354 1360 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #1#) 1360 1364 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-keyword-face . #1#)) 1364 1409 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #1#) 1409 1412 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-delimiter-face . #1#)) 1412 1464 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-face . #1#)) 1464 1470 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #1#) 1470 1474 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-keyword-face . #1#)) 1474 1493 (fontified t font-lock-fontified t src-block t font-lock-multiline t face #1#) 1493 1494 (fontified t font-lock-fontified t src-block t font-lock-multiline t face #1#)) . 31524) (undo-tree-id1460 . 1187) (undo-tree-id1461 . 1187) (undo-tree-id1462 . 1187) (undo-tree-id1463 . 1187) (undo-tree-id1464 . 1187) (undo-tree-id1465 . 1187) (undo-tree-id1466 . 1187) (undo-tree-id1467 . 1187) (undo-tree-id1468 . 1187) (undo-tree-id1469 . 1187) (undo-tree-id1470 . 1187) (undo-tree-id1471 . 1187) (undo-tree-id1472 . 1187) (undo-tree-id1473 . 1187) (undo-tree-id1474 . 1187) (undo-tree-id1475 . 1187) (undo-tree-id1476 . 1187) (undo-tree-id1477 . 1187) (undo-tree-id1478 . 1187) (undo-tree-id1479 . 1187) (undo-tree-id1480 . 1187) (undo-tree-id1481 . 1187) (undo-tree-id1482 . 1187) (undo-tree-id1483 . 1187) (undo-tree-id1484 . -307) (undo-tree-id1485 . -307) (undo-tree-id1486 . 1187) (undo-tree-id1487 . 1187) (undo-tree-id1488 . -903) (undo-tree-id1489 . -903) (undo-tree-id1490 . -963) (undo-tree-id1491 . -963) (undo-tree-id1492 . -988) (undo-tree-id1493 . -988) (undo-tree-id1494 . -989) (undo-tree-id1495 . -989) (undo-tree-id1496 . -1023) (undo-tree-id1497 . -1023) (undo-tree-id1498 . -1049) (undo-tree-id1499 . -1049) (undo-tree-id1500 . -1088) (undo-tree-id1501 . -1088) (undo-tree-id1502 . -1157) (undo-tree-id1503 . -1157) (undo-tree-id1504 . -1158) (undo-tree-id1505 . -1158) (undo-tree-id1506 . -1183) (undo-tree-id1507 . -1183) (undo-tree-id1508 . -1282) (undo-tree-id1509 . -1282) (undo-tree-id1510 . -1353) (undo-tree-id1511 . -1353) (undo-tree-id1512 . -1402) (undo-tree-id1513 . -1402) (undo-tree-id1514 . -1403) (undo-tree-id1515 . -1403) (undo-tree-id1516 . -1463) (undo-tree-id1517 . -1463) (undo-tree-id1518 . -1492) (undo-tree-id1519 . -1492) (undo-tree-id1520 . -1493) (undo-tree-id1521 . -1493) 31831 (t 23423 16006 114333 988000)) nil (23423 16022 753933 133000) 0 nil]) ((31524 . 33018) (#("     (defalias 'list-buffers 'ibuffer-other-window) ; make ibuffer default

     (setq ibuffer-saved-filter-groups
           (quote ((\"default\"

                    (\"dired\" (mode . dired-mode))

                    (\"org\" (name . \"^.*org$\"))

                    (\"json\" (mode . js2-mode))
               
                    (\"shell\" (or (mode . eshell-mode) (mode . shell-mode)))
               
                    (\"mu4e\" (name . \"\\*mu4e\\*\"))
               
                    (\"programming\" (or
                                    (mode . python-mode)
                                    (mode . c-mode)
                                    (mode . c++-mode)
                                    (mode . lua-mode)
                                    (mode . c++-mode)
                                    ))
                    (\"emacs\" (or
                              (name . \"^\\\\*scratch\\\\*$\")
                              (name . \"^\\\\*Messages\\\\*$\")))
                    ))))

     (add-hook 'ibuffer-mode-hook
                       (lambda ()
                         (ibuffer-auto-mode 1)
                         (ibuffer-switch-to-saved-filter-groups \"default\")))

     ;; don't show these
                                                                                     ;(add-to-list 'ibuffer-never-show-predicates \"zowie\")
     ;; Don't show filter groups if there are no buffers in that group
     (setq ibuffer-show-empty-filter-groups nil)

     ;; Don't ask for confirmation to delete marked buffers
     (setq ibuffer-expert t)

" 0 6 (fontified t font-lock-fontified t font-lock-multiline t face #3=(org-block) help-echo nil src-block t) 6 14 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-keyword-face . #3#) help-echo nil src-block t) 14 16 (fontified t font-lock-fontified t font-lock-multiline t face #3# help-echo nil src-block t) 16 28 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-function-name-face . #3#) help-echo nil src-block t) 28 52 (fontified t font-lock-fontified t font-lock-multiline t face #3# help-echo nil src-block t) 52 54 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-comment-delimiter-face . #3#) help-echo nil src-block t) 54 75 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-comment-face . #3#) help-echo nil src-block t) 75 82 (fontified t font-lock-fontified t font-lock-multiline t face #3# help-echo nil src-block t) 82 86 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-keyword-face . #3#) help-echo nil src-block t) 86 127 (fontified t font-lock-fontified t font-lock-multiline t face #3# help-echo nil src-block t) 127 132 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-keyword-face . #3#) help-echo nil src-block t) 132 135 (fontified t font-lock-fontified t font-lock-multiline t face #3# help-echo nil src-block t) 135 144 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-string-face . #3#) help-echo nil src-block t) 144 167 (fontified t font-lock-fontified t font-lock-multiline t face #3# help-echo nil src-block t) 167 174 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-string-face . #3#) help-echo nil src-block t) 174 218 (fontified t font-lock-fontified t font-lock-multiline t face #3# help-echo nil src-block t) 218 223 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-string-face . #3#) help-echo nil src-block t) 223 232 (fontified t font-lock-fontified t font-lock-multiline t face #3# help-echo nil src-block t) 232 241 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-string-face . #3#) help-echo nil src-block t) 241 266 (fontified t font-lock-fontified t font-lock-multiline t face #3# help-echo nil src-block t) 266 272 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-string-face . #3#) help-echo nil src-block t) 272 292 (fontified t font-lock-fontified t font-lock-multiline t face #3# help-echo nil src-block t) 292 329 (fontified t font-lock-fontified t font-lock-multiline t face #3# help-echo nil src-block t) 329 336 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-string-face . #3#) help-echo nil src-block t) 336 338 (fontified t font-lock-fontified t font-lock-multiline t face #3# help-echo nil src-block t) 338 340 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-keyword-face . #3#) help-echo nil src-block t) 340 421 (fontified t font-lock-fontified t font-lock-multiline t face #3# help-echo nil src-block t) 421 427 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-string-face . #3#) help-echo nil src-block t) 427 436 (fontified t font-lock-fontified t font-lock-multiline t face #3# help-echo nil src-block t) 436 437 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-string-face . #3#) help-echo nil src-block t) 437 438 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-warning-face font-lock-string-face . #3#) help-echo #2# src-block t) 438 443 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-string-face . #3#) help-echo nil src-block t) 443 444 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-warning-face font-lock-string-face . #3#) help-echo #2# src-block t) 444 446 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-string-face . #3#) help-echo nil src-block t) 446 486 (fontified t font-lock-fontified t font-lock-multiline t face #3# help-echo nil src-block t) 486 499 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-string-face . #3#) help-echo nil src-block t) 499 501 (fontified t font-lock-fontified t font-lock-multiline t face #3# help-echo nil src-block t) 501 503 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-keyword-face . #3#) help-echo nil src-block t) 503 792 (fontified t font-lock-fontified t font-lock-multiline t face #3# help-echo nil src-block t) 792 814 (fontified t font-lock-fontified t font-lock-multiline t face #3# help-echo nil src-block t) 814 835 (fontified t font-lock-fontified t font-lock-multiline t face #3# help-echo nil src-block t) 835 842 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-string-face . #3#) help-echo nil src-block t) 842 844 (fontified t font-lock-fontified t font-lock-multiline t face #3# help-echo nil src-block t) 844 846 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-keyword-face . #3#) help-echo nil src-block t) 846 885 (fontified t font-lock-fontified t font-lock-multiline t face #3# help-echo nil src-block t) 885 902 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-string-face . #3#) help-echo nil src-block t) 902 942 (fontified t font-lock-fontified t font-lock-multiline t face #3# help-echo nil src-block t) 942 960 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-string-face . #3#) help-echo nil src-block t) 960 1048 (fontified t font-lock-fontified t font-lock-multiline t face #3# help-echo nil src-block t) 1048 1054 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-keyword-face . #3#) help-echo nil src-block t) 1054 1169 (fontified t font-lock-fontified t font-lock-multiline t face #3# help-echo nil src-block t) 1169 1178 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-string-face . #3#) help-echo nil src-block t) 1178 1188 (fontified t font-lock-fontified t font-lock-multiline t face #3# help-echo nil src-block t) 1188 1191 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-comment-delimiter-face . #3#) help-echo nil src-block t) 1191 1208 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-comment-face . #3#) help-echo nil src-block t) 1208 1293 (fontified t font-lock-fontified t font-lock-multiline t face #3# help-echo nil src-block t) 1293 1294 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-comment-delimiter-face . #3#) help-echo nil src-block t) 1294 1347 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-comment-face . #3#) help-echo nil src-block t) 1347 1352 (fontified t font-lock-fontified t font-lock-multiline t face #3# help-echo nil src-block t) 1352 1355 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-comment-delimiter-face . #3#) help-echo nil src-block t) 1355 1418 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-comment-face . #3#) help-echo nil src-block t) 1418 1424 (fontified t font-lock-fontified t font-lock-multiline t face #3# help-echo nil src-block t) 1424 1428 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-keyword-face . #3#) help-echo nil src-block t) 1428 1473 (fontified t font-lock-fontified t font-lock-multiline t face #3# help-echo nil src-block t) 1473 1476 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-comment-delimiter-face . #3#) help-echo nil src-block t) 1476 1528 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-comment-face . #3#) help-echo nil src-block t) 1528 1534 (fontified t font-lock-fontified t font-lock-multiline t face #3# help-echo nil src-block t) 1534 1538 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-keyword-face . #3#) help-echo nil src-block t) 1538 1557 (fontified t font-lock-fontified t font-lock-multiline t face #3# src-block t) 1557 1558 (fontified t font-lock-fontified t font-lock-multiline t face #3# src-block t)) . 31524) (undo-tree-id1389 . -292) (undo-tree-id1390 . -307) (undo-tree-id1391 . -307) (undo-tree-id1392 . 1266) (undo-tree-id1393 . -292) (undo-tree-id1394 . -292) (undo-tree-id1395 . -292) (undo-tree-id1396 . 1251) (undo-tree-id1397 . 1266) (undo-tree-id1398 . -307) (undo-tree-id1399 . -292) (undo-tree-id1400 . -292) (undo-tree-id1401 . -307) (undo-tree-id1402 . 1251) (undo-tree-id1403 . 1251) (undo-tree-id1404 . -307) (undo-tree-id1405 . 1251) (undo-tree-id1406 . 1251) (undo-tree-id1407 . -307) (undo-tree-id1408 . 1251) (undo-tree-id1409 . 1251) (undo-tree-id1410 . 1251) (undo-tree-id1411 . 1251) (undo-tree-id1412 . 1251) (undo-tree-id1413 . 1251) (undo-tree-id1414 . 1251) (undo-tree-id1415 . 1251) (undo-tree-id1416 . 1251) (undo-tree-id1417 . 1251) (undo-tree-id1418 . 1251) (undo-tree-id1419 . 1251) (undo-tree-id1420 . 1251) (undo-tree-id1421 . 1251) (undo-tree-id1422 . 1251) (undo-tree-id1423 . 1251) (undo-tree-id1424 . -846) (undo-tree-id1425 . -846) (undo-tree-id1426 . -903) (undo-tree-id1427 . -903) (undo-tree-id1428 . -963) (undo-tree-id1429 . -963) (undo-tree-id1430 . -988) (undo-tree-id1431 . -988) (undo-tree-id1432 . -989) (undo-tree-id1433 . -989) (undo-tree-id1434 . -1023) (undo-tree-id1435 . -1023) (undo-tree-id1436 . -1057) (undo-tree-id1437 . -1057) (undo-tree-id1438 . -1104) (undo-tree-id1439 . -1104) (undo-tree-id1440 . -1181) (undo-tree-id1441 . -1181) (undo-tree-id1442 . -1182) (undo-tree-id1443 . -1182) (undo-tree-id1444 . -1207) (undo-tree-id1445 . -1207) (undo-tree-id1446 . -1346) (undo-tree-id1447 . -1346) (undo-tree-id1448 . -1417) (undo-tree-id1449 . -1417) (undo-tree-id1450 . -1466) (undo-tree-id1451 . -1466) (undo-tree-id1452 . -1467) (undo-tree-id1453 . -1467) (undo-tree-id1454 . -1527) (undo-tree-id1455 . -1527) (undo-tree-id1456 . -1556) (undo-tree-id1457 . -1556) (undo-tree-id1458 . -1557) (undo-tree-id1459 . -1557) 31831 (t 23423 15843 582104 550000)) nil (23423 16006 26443 777000) 0 nil]) ((31524 . 33082) (#("     (defalias 'list-buffers 'ibuffer-other-window) ; make ibuffer default

     (setq ibuffer-saved-filter-groups
           (quote ((\"default\"

                    (\"dired\" (mode . dired-mode))

                    (\"org\" (name . \"^.*org$\"))

                    (\"json\" (mode . js2-mode))
               
                    (\"shell\" (or (mode . eshell-mode) (mode . shell-mode)))
               
                    (\"mu4e\" (name . \"\\*mu4e\\*\"))
               
                    (\"programming\" (or
                                    (mode . python-mode)
                                    (mode . c-mode)
                                    (mode . c++-mode)
                                    (mode . lua-mode)
                                    (mode . c++-mode)
                                    ))
                    (\"emacs\" (or
                              (name . \"^\\\\*scratch\\\\*$\")
                              (name . \"^\\\\*Messages\\\\*$\")))
                    ))))

     (add-hook 'ibuffer-mode-hook
                       (lambda ()
                         (ibuffer-auto-mode 1)
                         (ibuffer-switch-to-saved-filter-groups \"default\")))

     ;; don't show these
                                                                                     ;(add-to-list 'ibuffer-never-show-predicates \"zowie\")
     ;; Don't show filter groups if there are no buffers in that group
     (setq ibuffer-show-empty-filter-groups nil)

     ;; Don't ask for confirmation to delete marked buffers
     (setq ibuffer-expert t)

" 0 1558 (fontified nil)) . 31524) 33082 (t 23423 15811 891034 733000)) nil (23423 15843 563771 251000) 0 nil]) ((31524 . 33082) (#("     (defalias 'list-buffers 'ibuffer-other-window) ; make ibuffer default

     setq ibuffer-saved-filter-groups
     (quote ((\"default\"

              (\"dired\" (mode . dired-mode))

              (\"org\" (name . \"^.*org$\"))

              (\"json\" (mode . js2-mode))
         
              (\"shell\" (or (mode . eshell-mode) (mode . shell-mode)))
         
              (\"mu4e\" (name . \"\\*mu4e\\*\"))
         
              (\"programming\" (or
                              (mode . python-mode)
                              (mode . c-mode)
                              (mode . c++-mode)
                              (mode . lua-mode)
                              (mode . c++-mode)
                              ))
              (\"emacs\" (or
                        (name . \"^\\\\*scratch\\\\*$\")
                        (name . \"^\\\\*Messages\\\\*$\")))
              )))

     (add-hook 'ibuffer-mode-hook
                       (lambda ()
                         (ibuffer-auto-mode 1)
                         (ibuffer-switch-to-saved-filter-groups \"default\")))

     ;; don't show these
                                                                                     ;(add-to-list 'ibuffer-never-show-predicates \"zowie\")
     ;; Don't show filter groups if there are no buffers in that group
     (setq ibuffer-show-empty-filter-groups nil)

     ;; Don't ask for confirmation to delete marked buffers
     (setq ibuffer-expert t)

" 0 1436 (fontified nil)) . 31524) 61021 (t 23423 15780 103967 734000)) nil (23423 15811 856372 835000) 0 nil]) ((31524 . 32960) (#("     (defalias 'list-buffers 'ibuffer-other-window) ; make ibuffer default

     setq ibuffer-saved-filter-groups
     (quote ((\"default\"

              (\"dired\" (mode . dired-mode))

              (\"org\" (name . \"^.*org$\"))

              (\"json\" (mode . js2-mode))
         
              (\"shell\" (or (mode . eshell-mode) (mode . shell-mode)))
         
              (\"mu4e\" (name . \"\\*mu4e\\*\"))
         
              (\"programming\" (or
                              (mode . python-mode)
                              (mode . c-mode)
                              (mode . c++-mode)
                              (mode . lua-mode)
                              (mode . c++-mode)
                              ))
              (\"emacs\" (or
                        (name . \"^\\\\*scratch\\\\*$\")
                        (name . \"^\\\\*Messages\\\\*$\")))
              ))))
     (add-hook 'ibuffer-mode-hook
                       (lambda ()
                         (ibuffer-auto-mode 1)
                         (ibuffer-switch-to-saved-filter-groups \"default\")))

     ;; don't show these
                                                                                     ;(add-to-list 'ibuffer-never-show-predicates \"zowie\")
     ;; Don't show filter groups if there are no buffers in that group
     (setq ibuffer-show-empty-filter-groups nil)

     ;; Don't ask for confirmation to delete marked buffers
     (setq ibuffer-expert t)

" 0 1436 (fontified nil)) . 31524) 32960 (t 23423 15759 587 156000)) nil (23423 15780 34004 144000) 0 nil]) ((31524 . 32960) (#("   (defalias 'list-buffers 'ibuffer-other-window) ; make ibuffer default

   

" 0 4 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #4=(org-block)) 4 12 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-keyword-face . #4#)) 12 14 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #4#) 14 26 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-function-name-face . #4#)) 26 50 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #4#) 50 52 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-delimiter-face . #4#)) 52 73 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-face . #4#)) 73 77 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #4#) 77 78 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #4#) 78 79 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #4#)) . 31524) (undo-tree-id1365 . 1) (undo-tree-id1366 . 1) (undo-tree-id1367 . 1) (undo-tree-id1368 . 1) (undo-tree-id1369 . -78) (undo-tree-id1370 . 1) (undo-tree-id1371 . 1) (undo-tree-id1372 . 1) (undo-tree-id1373 . 1) (undo-tree-id1374 . 1) (undo-tree-id1375 . 1) (undo-tree-id1376 . 1) (undo-tree-id1377 . 1) (undo-tree-id1378 . 1) (undo-tree-id1379 . 1) (undo-tree-id1380 . -73) (undo-tree-id1381 . 2) (undo-tree-id1382 . 6) (undo-tree-id1383 . 2) (undo-tree-id1384 . 2) (undo-tree-id1385 . 2) (undo-tree-id1386 . 2) (undo-tree-id1387 . -77) (undo-tree-id1388 . -77) 59664) nil (23423 15758 927472 741000) 0 nil]) ((31597 . 31601)) nil (23423 15758 927495 728000) 0 nil] [nil nil ((31524 . 31601) (#("   (defalias 'list-buffers 'ibuffer-other-window) ; make ibuffer default


" 0 4 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #5=(org-block)) 4 12 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-keyword-face . #5#)) 12 14 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #5#) 14 26 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-function-name-face . #5#)) 26 50 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #5#) 50 52 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-delimiter-face . #5#)) 52 73 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-face . #5#)) 73 74 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #5#) 74 75 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #5#)) . 31524) (undo-tree-id1347 . -74) (undo-tree-id1348 . 75) (undo-tree-id1349 . 1) (undo-tree-id1350 . 75) (undo-tree-id1351 . -72) (undo-tree-id1352 . 1) (undo-tree-id1353 . 3) (undo-tree-id1354 . -73) (undo-tree-id1355 . 1) (undo-tree-id1356 . 2) (undo-tree-id1357 . -74) (undo-tree-id1358 . 1) (undo-tree-id1359 . 1) (undo-tree-id1360 . -74) 31598) ((31524 . 31599) (#("     (defalias 'list-buffers 'ibuffer-other-window) ; make ibuffer default


" 0 6 (fontified t font-lock-fontified t font-lock-multiline t face #6=(org-block) help-echo nil src-block t) 6 14 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-keyword-face . #6#) help-echo nil src-block t) 14 16 (fontified t font-lock-fontified t font-lock-multiline t face #6# help-echo nil src-block t) 16 28 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-function-name-face . #6#) help-echo nil src-block t) 28 52 (fontified t font-lock-fontified t font-lock-multiline t face #6# help-echo nil src-block t) 52 54 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-comment-delimiter-face . #6#) help-echo nil src-block t) 54 75 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-comment-face . #6#) help-echo nil src-block t) 75 76 (fontified t font-lock-fontified t font-lock-multiline t face #6# src-block t) 76 77 (fontified t font-lock-fontified t font-lock-multiline t face #6# src-block t)) . 31524) (undo-tree-id1361 . -76) (undo-tree-id1362 . -76) (undo-tree-id1363 . 1) (undo-tree-id1364 . -76)) (23423 15470 965940 576000) 0 nil]) ((31596 . 31598) (t 23423 15344 744746 209000)) nil (23423 15470 968614 249000) 0 nil]) ((13960 . 13961) (t 23423 15330 307169 972000)) nil (23423 15344 680960 860000) 0 nil]) ((13956 . 13957)) nil (23423 15330 241354 814000) 0 nil]) ((#("u" 0 1 (font-lock-fontified t src-block t fontified t help-echo nil font-lock-multiline t face (font-lock-string-face org-block))) . 13956) (undo-tree-id1323 . 1) (undo-tree-id1324 . 1) (undo-tree-id1325 . 1)) nil (23423 15330 241378 159000) 0 nil]) ((13954 . 13955)) nil (23423 15330 241385 680000) 0 nil]) ((#("c" 0 1 (font-lock-fontified t src-block t fontified t help-echo nil font-lock-multiline t face (font-lock-string-face org-block))) . 13954) (undo-tree-id1326 . 1) (undo-tree-id1327 . -1) (undo-tree-id1328 . 1)) nil (23423 15330 241395 652000) 0 nil]) ((13954 . 13955)) nil (23423 15330 241400 864000) 0 nil]) ((#("c" 0 1 (font-lock-fontified t src-block t fontified t help-echo nil font-lock-multiline t face (font-lock-string-face org-block))) . 13954) (undo-tree-id1329 . -1) (undo-tree-id1330 . 1)) nil (23423 15330 241408 410000) 0 nil]) ((13971 . 13977)) nil (23423 15330 241412 788000) 0 nil]) ((#("char" 0 4 (font-lock-fontified t src-block t fontified t help-echo nil font-lock-multiline t face (org-block))) . -13971) (undo-tree-id1331 . -4) (undo-tree-id1332 . 4) (undo-tree-id1333 . 4) (undo-tree-id1334 . 4) (undo-tree-id1335 . -4) (undo-tree-id1336 . 4) (undo-tree-id1337 . -4)) nil (23423 15330 241446 147000) 0 nil]) ((13968 . 13970)) nil (23423 15330 241452 176000) 0 nil]) ((13964 . 13968)) nil (23423 15330 241455 784000) 0 nil]) ((#("unicode" 0 7 (font-lock-fontified t src-block t fontified t help-echo nil font-lock-multiline t face (org-block))) . -13964) (undo-tree-id1338 . -7) (undo-tree-id1339 . 7) (undo-tree-id1340 . 7) (undo-tree-id1341 . 7) (undo-tree-id1342 . -7) (undo-tree-id1343 . 7) (undo-tree-id1344 . -7)) nil (23423 15330 241474 352000) 0 nil]) ((13960 . 13963)) nil (23423 15330 241480 762000) 0 nil]) ((#("'counsel" 0 8 (font-lock-fontified t src-block t fontified t font-lock-multiline t face (org-block) help-echo nil)) . -13960) (undo-tree-id1345 . -8) (undo-tree-id1346 . -8)) nil (23423 15330 241501 443000) 0 nil]) ((nil rear-nonsticky nil 13981 . 13982) (nil help-echo nil 13958 . 13982) (nil fontified nil 13958 . 13982) (nil help-echo nil 13951 . 13958) (nil fontified nil 13951 . 13958) (nil help-echo nil 13924 . 13951) (nil fontified nil 13924 . 13951) (13924 . 13982)) nil (23423 15330 241526 452000) 0 nil]) ((13922 . 13924) (t 23423 14892 87002 582000)) nil (23423 15330 241533 378000) 0 nil]) ((19644 . 24003) (#("     ;;Emacs window size
     ;The following was taken from Scott McPeak's \"scott.emacs.el\". Thank you Scott
     ; ---------------- frame move/resize (i.e. X window) -----------------------
     (defun frame-move-resize
         (width-fraction height-fraction      ; fractions of screen width, height
                         horiz-pos vert-pos)                 ; pels from left, top (neg: right, bot)
       \"Move and resize the frame so its width and height are the given
       fractional amounts of the screen width and height, and it is positioned
       from the left (negative: right) and top (negative: bottom) edges by
       the specified number of pixels.\"
       (if window-system
           (let* ((char-width (frame-char-width))          ; character width in pels
                  (char-height (frame-char-height))        ; char height
                  (disp-width (x-display-pixel-width))     ; screen width in pels
                  (disp-height (x-display-pixel-height))   ; screen height
                  (frame (selected-frame))                 ; frame to act upon
                  (new-columns
                   (round (/ (* disp-width width-fraction) char-width)))
                  (new-lines
                   (round (/ (* disp-height height-fraction) char-height)))
                  )
             (set-frame-size frame new-columns new-lines)  ; do actual resize
             (sleep-for 0.5)                               ; see below
             (set-frame-position frame horiz-pos vert-pos) ; and move (after resize)

                                             ; There is a bug where sometimes, inexplicably, the window appears
                                             ; shifted about halfway off the right edge of the screen.  I have no
                                             ; idea which software the bug is in (emacs, X server, KDE, ...).
                                             ; It can be reliably reproduced by running, in sequence:
                                             ;   `frame-occupy-normal-position'
                                             ;   `frame-occupy-normal-position'
                                             ;   `frame-occupy-right-half-screen'
                                             ;   `frame-occupy-normal-position'        ; here it will be bad
                                             ;   `frame-occupy-normal-position'        ; one more gets it back ok
                                             ;
                                             ; Update:  On a hunch it was (at least partially) a race condition
                                             ; I've inserted a 0.1 second delay between resize and move, and this
                                             ; has cured the problem (at least when running on my system with emacs
                                             ; running on the same machine as the X server).
                                             ;
                                             ; Faster machine, longer delay (?): 0.2 secs works now..
                                             ; Then again, no delay at all also works!  cool.
                                             ; no it doesn't.. but the delay doesn't help..
                                             ; nothing works except doing it twice...
             )
         ))

     (setq my-height-fraction 1) ;use the entire screen height

     ;;For one monitor
     (setq left-two-thirds-screen-pos (list 0.6 my-height-fraction 0 0))    ;last two: 0 from left, 0 from top
     (defun frame-occupy-left-two-thirds-screen ()
       \"Move and resize the frame so it occupies the left ⅔ of the screen.\"
       (interactive)
       (apply 'frame-move-resize left-two-thirds-screen-pos))

     ;;For 2 monitors
     (setq left-third-screen-pos (list 0.278 my-height-fraction 0 0))    ;last two: 0 from left, 0 from top
     (defun frame-occupy-left-third-screen ()
       \"Move and resize the frame so it occupies the left third of the screen.\"
       (interactive)
       (apply 'frame-move-resize left-third-screen-pos))

     ;;For 3 monitors
     (setq left-sixth-screen-pos (list 0.21 my-height-fraction 0 0))    ; 0 from left, 0 from top
     (defun frame-occupy-left-sixth-screen ()
       \"Move and resize the frame so it occupies the left half of the screen.\"
       (interactive)
       (apply 'frame-move-resize left-sixth-screen-pos))

                                             ; Set Window size by number of monitors
     (if (window-system)
         (cond
          ((= my-emacs-monitors-num 1)
           (frame-occupy-left-two-thirds-screen))
          ((= my-emacs-monitors-num 2)
           (frame-occupy-left-third-screen))
          ((= my-emacs-monitors-num 3)
           (frame-occupy-left-sixth-screen))
          (t ;;default behaviour: 2 monitors
           (frame-occupy-left-third-screen))
          )
       )
" 0 5 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #7=(org-block)) 5 7 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-delimiter-face . #7#)) 7 25 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-face . #7#)) 25 30 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #7#) 30 31 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-delimiter-face . #7#)) 31 109 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-face . #7#)) 109 114 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #7#) 114 116 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-delimiter-face . #7#)) 116 191 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-face . #7#)) 191 197 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #7#) 197 202 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-keyword-face . #7#)) 202 203 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #7#) 203 220 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-function-name-face . #7#)) 220 267 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #7#) 267 269 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-delimiter-face . #7#)) 269 303 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-face . #7#)) 303 364 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #7#) 364 366 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-delimiter-face . #7#)) 366 404 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-face . #7#)) 404 411 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #7#) 411 669 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-doc-face . #7#)) 669 678 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #7#) 678 680 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-keyword-face . #7#)) 680 707 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #7#) 707 711 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-keyword-face . #7#)) 711 754 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #7#) 754 756 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-delimiter-face . #7#)) 756 780 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-face . #7#)) 780 839 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #7#) 839 841 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-delimiter-face . #7#)) 841 853 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-face . #7#)) 853 912 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #7#) 912 914 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-delimiter-face . #7#)) 914 935 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-face . #7#)) 935 994 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #7#) 994 996 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-delimiter-face . #7#)) 996 1010 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-face . #7#)) 1010 1069 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #7#) 1069 1071 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-delimiter-face . #7#)) 1071 1089 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-face . #7#)) 1089 1377 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #7#) 1377 1379 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-delimiter-face . #7#)) 1379 1396 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-face . #7#)) 1396 1455 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #7#) 1455 1457 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-delimiter-face . #7#)) 1457 1467 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-face . #7#)) 1467 1526 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #7#) 1526 1528 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-delimiter-face . #7#)) 1528 1552 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-face . #7#)) 1552 1598 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #7#) 1598 1600 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-delimiter-face . #7#)) 1600 1665 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-face . #7#)) 1665 1710 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #7#) 1710 1712 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-delimiter-face . #7#)) 1712 1779 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-face . #7#)) 1779 1824 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #7#) 1824 1826 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-delimiter-face . #7#)) 1826 1889 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-face . #7#)) 1889 1934 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #7#) 1934 1936 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-delimiter-face . #7#)) 1936 1991 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-face . #7#)) 1991 2036 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #7#) 2036 2040 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-delimiter-face . #7#)) 2040 2041 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-face . #7#)) 2041 2069 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-constant-face font-lock-comment-face . #7#)) 2069 2071 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-face . #7#)) 2071 2116 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #7#) 2116 2120 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-delimiter-face . #7#)) 2120 2121 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-face . #7#)) 2121 2149 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-constant-face font-lock-comment-face . #7#)) 2149 2151 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-face . #7#)) 2151 2196 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #7#) 2196 2200 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-delimiter-face . #7#)) 2200 2201 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-face . #7#)) 2201 2231 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-constant-face font-lock-comment-face . #7#)) 2231 2233 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-face . #7#)) 2233 2278 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #7#) 2278 2282 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-delimiter-face . #7#)) 2282 2283 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-face . #7#)) 2283 2311 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-constant-face font-lock-comment-face . #7#)) 2311 2342 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-face . #7#)) 2342 2387 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #7#) 2387 2391 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-delimiter-face . #7#)) 2391 2392 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-face . #7#)) 2392 2420 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-constant-face font-lock-comment-face . #7#)) 2420 2456 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-face . #7#)) 2456 2501 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #7#) 2501 2502 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-delimiter-face . #7#)) 2502 2503 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-face . #7#)) 2503 2548 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #7#) 2548 2550 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-delimiter-face . #7#)) 2550 2615 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-face . #7#)) 2615 2660 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #7#) 2660 2662 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-delimiter-face . #7#)) 2662 2729 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-face . #7#)) 2729 2774 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #7#) 2774 2776 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-delimiter-face . #7#)) 2776 2845 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-face . #7#)) 2845 2890 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #7#) 2890 2892 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-delimiter-face . #7#)) 2892 2938 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-face . #7#)) 2938 2983 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #7#) 2983 2984 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-delimiter-face . #7#)) 2984 2985 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-face . #7#)) 2985 3030 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #7#) 3030 3032 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-delimiter-face . #7#)) 3032 3087 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-face . #7#)) 3087 3132 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #7#) 3132 3134 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-delimiter-face . #7#)) 3134 3181 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-face . #7#)) 3181 3226 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #7#) 3226 3228 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-delimiter-face . #7#)) 3228 3273 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-face . #7#)) 3273 3318 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #7#) 3318 3320 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-delimiter-face . #7#)) 3320 3359 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-face . #7#)) 3359 3393 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #7#) 3393 3397 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-keyword-face . #7#)) 3397 3420 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #7#) 3420 3421 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-delimiter-face . #7#)) 3421 3450 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-face . #7#)) 3450 3456 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #7#) 3456 3458 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-delimiter-face . #7#)) 3458 3474 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-face . #7#)) 3474 3480 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #7#) 3480 3484 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-keyword-face . #7#)) 3484 3550 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #7#) 3550 3551 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-delimiter-face . #7#)) 3551 3585 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-face . #7#)) 3585 3591 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #7#) 3591 3596 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-keyword-face . #7#)) 3596 3597 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #7#) 3597 3632 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-function-name-face . #7#)) 3632 3643 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #7#) 3643 3711 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-doc-face . #7#)) 3711 3720 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #7#) 3720 3731 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-keyword-face . #7#)) 3731 3801 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #7#) 3801 3803 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-delimiter-face . #7#)) 3803 3818 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-face . #7#)) 3818 3824 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #7#) 3824 3828 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-keyword-face . #7#)) 3828 3891 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #7#) 3891 3892 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-delimiter-face . #7#)) 3892 3926 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-face . #7#)) 3926 3932 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #7#) 3932 3937 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-keyword-face . #7#)) 3937 3938 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #7#) 3938 3968 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-function-name-face . #7#)) 3968 3979 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #7#) 3979 4051 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-doc-face . #7#)) 4051 4060 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #7#) 4060 4071 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-keyword-face . #7#)) 4071 4136 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #7#) 4136 4138 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-delimiter-face . #7#)) 4138 4153 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-face . #7#)) 4153 4159 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #7#) 4159 4163 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-keyword-face . #7#)) 4163 4225 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #7#) 4225 4227 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-delimiter-face . #7#)) 4227 4251 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-face . #7#)) 4251 4257 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #7#) 4257 4262 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-keyword-face . #7#)) 4262 4263 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #7#) 4263 4293 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-function-name-face . #7#)) 4293 4304 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #7#) 4304 4375 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-doc-face . #7#)) 4375 4384 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #7#) 4384 4395 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-keyword-face . #7#)) 4395 4500 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #7#) 4500 4502 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-delimiter-face . #7#)) 4502 4540 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-face . #7#)) 4540 4546 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #7#) 4546 4548 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-keyword-face . #7#)) 4548 4575 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #7#) 4575 4579 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-keyword-face . #7#)) 4579 4850 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #7#) 4850 4852 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-delimiter-face . #7#)) 4852 4882 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-face . #7#)) 4882 4947 (fontified t font-lock-fontified t src-block t font-lock-multiline t face #7#) 4947 4948 (fontified t font-lock-fontified t src-block t font-lock-multiline t face #7#)) . 19644) (undo-tree-id1285 . 2986) (undo-tree-id1286 . 2985) (undo-tree-id1287 . -221) (undo-tree-id1288 . 2986) (undo-tree-id1289 . 2986) (undo-tree-id1290 . -221) (undo-tree-id1291 . 2986) (undo-tree-id1292 . 2986) (undo-tree-id1293 . -1089) (undo-tree-id1294 . 3322) (undo-tree-id1295 . 3210) (undo-tree-id1296 . 3322) (undo-tree-id1297 . 3322) (undo-tree-id1298 . 3322) (undo-tree-id1299 . 3322) (undo-tree-id1300 . -853) (undo-tree-id1301 . -853) (undo-tree-id1302 . -1626) (undo-tree-id1303 . -1626) (undo-tree-id1304 . 3322) (undo-tree-id1305 . 3322) (undo-tree-id1306 . -853) (undo-tree-id1307 . 3322) (undo-tree-id1308 . 3322) (undo-tree-id1309 . -853) (undo-tree-id1310 . 3322) (undo-tree-id1311 . 3322) (undo-tree-id1312 . -853) (undo-tree-id1313 . 3322) (undo-tree-id1314 . 3322) (undo-tree-id1315 . -853) (undo-tree-id1316 . 3322) (undo-tree-id1317 . 3322) (undo-tree-id1318 . -853) (undo-tree-id1319 . 3322) (undo-tree-id1320 . 3322) (undo-tree-id1321 . -853) (undo-tree-id1322 . -1626) 21270 (t 23422 14675 600494 356000)) nil (23423 14892 23299 156000) 0 nil] [nil ([nil ([nil ([nil ([nil ([nil nil ((#("
" 0 1 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 18483) (undo-tree-id1162 . 1) (undo-tree-id1164 . 1) (undo-tree-id1166 . 1) (undo-tree-id1168 . 1) (undo-tree-id1170 . 1)) ((18483 . 18484) (t 23422 14618 556218 859000)) (23422 14618 546646 245000) 0 nil]) ((#("    " 0 4 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . -18483) (undo-tree-id1172 . -4) (undo-tree-id1174 . -4) (undo-tree-id1176 . -4) (undo-tree-id1178 . 4) (undo-tree-id1180 . -4) (undo-tree-id1182 . -4) 18487 (t 23422 14600 839754 448000)) ((18483 . 18487)) (23422 14669 909122 948000) 0 nil]) ((18454 . 18455)) ((#("b" 0 1 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-constant-face org-block))) . 18454)) (23422 14670 124759 315000) 0 nil]) ((#("p" 0 1 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-constant-face org-block) help-echo nil src-block t)) . 18454) (undo-tree-id1159 . 1) (t 23422 14585 448219 750000)) ((18454 . 18455)) (23422 14670 624294 405000) 0 nil]) ((18410 . 18502) 18344 (t 23422 14538 941625 696000)) ((#("    #+BEGIN_SRC emacs-lisp
    (require 'dump-jump)
    (dump-jump-mode)
    
    #+END_SRC
" 0 26 (fontified t font-lock-fontified t font-lock-multiline t face org-block-begin-line) 26 27 (fontified t font-lock-fontified t help-echo nil font-lock-multiline t face org-block-begin-line) 27 32 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #8=(org-block)) 32 39 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-keyword-face . #8#)) 39 41 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #8#) 41 44 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #9=(font-lock-constant-face . #8#)) 44 45 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #9#) 45 50 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #9#) 50 72 (fontified t font-lock-fontified t src-block t font-lock-multiline t face #8#) 72 73 (fontified t font-lock-fontified t src-block t font-lock-multiline t face #8#) 73 77 (fontified t font-lock-fontified t src-block t font-lock-multiline t face #8#) 77 78 (fontified t font-lock-fontified t src-block t font-lock-multiline t face #8#) 78 91 (fontified t font-lock-fontified t font-lock-multiline t face org-block-end-line) 91 92 (fontified t face org-block-end-line)) . 18410) (undo-tree-id1183 . -73) (undo-tree-id1184 . -44) (undo-tree-id1185 . -73) (undo-tree-id1186 . 14) (undo-tree-id1187 . 14) (undo-tree-id1188 . -73) (undo-tree-id1189 . 41) (undo-tree-id1190 . 14) (undo-tree-id1191 . -51) (undo-tree-id1192 . -51) (undo-tree-id1193 . 41) (undo-tree-id1194 . 14) (undo-tree-id1195 . -51) (undo-tree-id1196 . 15) (undo-tree-id1197 . 41) (undo-tree-id1198 . -73) (undo-tree-id1199 . 15) (undo-tree-id1200 . 15) (undo-tree-id1201 . -77) (undo-tree-id1202 . 47) (undo-tree-id1203 . 15) (undo-tree-id1204 . -44) (undo-tree-id1205 . 48) (undo-tree-id1206 . 48) (undo-tree-id1207 . -44)) (23422 14670 657373 156000) 0 nil]) ((18359 . 18411)) ((#("** dumb-jump
    Testing this YA tags-like jumping
*" 0 1 (fontified t face (:foreground #28="#2c2c2c") keymap #10=(keymap (mouse-1 . org-cycle) (mouse-2 lambda (e) (interactive "e") (mouse-set-point e) (org-cycle)))) 1 2 (fontified t composition (1 1 #29=[8226]) keymap #10# face org-level-3) 2 3 (fontified t keymap #10# face org-level-3) 3 12 (fontified t face org-level-3) 12 51 (fontified t) 51 52 (fontified t composition (0 1 [9656]) keymap #10# face org-level-1)) . 18359) (undo-tree-id1259 . -51) (undo-tree-id1260 . -51) (undo-tree-id1261 . 1) (undo-tree-id1262 . 1) (undo-tree-id1263 . -51) (undo-tree-id1264 . 1) (undo-tree-id1265 . 1) (undo-tree-id1266 . -51) (undo-tree-id1267 . -51) (undo-tree-id1268 . 1) (undo-tree-id1269 . 1) (undo-tree-id1270 . -51) (undo-tree-id1271 . 1) (undo-tree-id1272 . 1) (undo-tree-id1273 . -51) (undo-tree-id1274 . 1) (undo-tree-id1275 . 1) (undo-tree-id1276 . -51) (undo-tree-id1277 . 1) (undo-tree-id1278 . 1) (undo-tree-id1279 . -51) (undo-tree-id1280 . 1) (undo-tree-id1281 . 1) (undo-tree-id1282 . -51) (undo-tree-id1283 . 1) (undo-tree-id1284 . 52)) (23422 14674 285032 454000) 0 nil]) ((#("
" 0 1 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 18344) (undo-tree-id1249 . 1) (undo-tree-id1250 . 1) (undo-tree-id1251 . 1) (undo-tree-id1252 . 1) (undo-tree-id1253 . -1) (undo-tree-id1254 . 1) (undo-tree-id1255 . 1) (undo-tree-id1256 . 1) (undo-tree-id1257 . 1) (undo-tree-id1258 . 1)) ((18344 . 18345)) (23422 14674 909004 299000) 0 nil]) ((#("
" 0 1 (fontified t font-lock-fontified t src-block t help-echo nil font-lock-multiline t face (org-block))) . 18266) (undo-tree-id1240 . -1) (undo-tree-id1241 . 1) (undo-tree-id1242 . 1) (undo-tree-id1243 . -1) (undo-tree-id1244 . -1) (undo-tree-id1245 . -1) (undo-tree-id1246 . -1) (undo-tree-id1247 . -1) (undo-tree-id1248 . -1)) ((18266 . 18267)) (23422 14673 444792 646000) 0 nil] [nil ([nil ([nil nil ((#("
" 0 1 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 18313) (undo-tree-id1109 . 1) (undo-tree-id1110 . 1) (undo-tree-id1111 . 1) (undo-tree-id1112 . 1) (undo-tree-id1113 . -1) (undo-tree-id1114 . 1)) ((18313 . 18314) (t 23422 14216 194317 335000)) (23422 14216 170404 531000) 0 nil]) ((#("
" 0 1 (fontified t font-lock-fontified t src-block t help-echo nil font-lock-multiline t face (org-block))) . 18236) (undo-tree-id1115 . 1) (undo-tree-id1116 . 1) (undo-tree-id1117 . 1) (undo-tree-id1118 . 1) (undo-tree-id1119 . 1) (undo-tree-id1120 . 1) (undo-tree-id1121 . 1) (undo-tree-id1122 . 1) (#("
" 0 1 (fontified t font-lock-fontified t src-block t help-echo nil font-lock-multiline t face (org-block))) . 18236) (undo-tree-id1123 . -1) (undo-tree-id1124 . -1) (undo-tree-id1125 . -1) (undo-tree-id1126 . 1) (undo-tree-id1127 . 1) (undo-tree-id1128 . 1) (undo-tree-id1129 . 1) (undo-tree-id1130 . 1) (undo-tree-id1131 . 1)) ((18236 . 18237) (18236 . 18237)) (23422 14238 985645 335000) 0 nil]) ((#("      (projectile-global-mode)" 0 29 (font-lock-fontified t src-block t fontified t help-echo nil font-lock-multiline t face #11=(org-block)) 29 30 (font-lock-fontified t src-block t fontified t rear-nonsticky t help-echo nil font-lock-multiline t face #11#)) . -18236) (undo-tree-id1132 . -7) (undo-tree-id1133 . -30) (undo-tree-id1134 . -30) (undo-tree-id1135 . -30) (undo-tree-id1136 . 30) (undo-tree-id1137 . 30) (undo-tree-id1138 . -30) (undo-tree-id1139 . 30) (undo-tree-id1140 . 1) (undo-tree-id1141 . -30) (undo-tree-id1142 . 24) (undo-tree-id1143 . -7) (undo-tree-id1144 . -30) 18266 (t 23422 14209 372520 622000)) ((18236 . 18266)) (23422 14239 330138 567000) 0 nil]) ((18268 . 18274)) ((#("      " 0 6 (fontified t font-lock-fontified t src-block t help-echo nil font-lock-multiline t face (org-block))) . 18268)) (23422 14673 116554 68000) 0 nil] [nil nil ((18200 . 18358) (#("      (require 'counsel-projectile)
      (projectile-global-mode)

(define-key projectile-mode-map (kbd \"C-c p\") 'projectile-command-map)

" 0 7 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #12=(org-block)) 7 14 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-keyword-face . #12#)) 14 16 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #12#) 16 34 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-constant-face . #12#)) 34 36 (fontified t font-lock-fontified t src-block t help-echo nil font-lock-multiline t face #12#) 36 65 (font-lock-fontified t src-block t fontified t help-echo nil font-lock-multiline t face #12#) 65 66 (font-lock-fontified t src-block t fontified t rear-nonsticky t help-echo nil font-lock-multiline t face #12#) 66 68 (fontified t font-lock-fontified t src-block t help-echo nil font-lock-multiline t face #12#) 68 105 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #12#) 105 112 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-string-face . #12#)) 112 137 (fontified t font-lock-fontified t src-block t font-lock-multiline t face #12#) 137 138 (fontified t rear-nonsticky t font-lock-fontified t src-block t font-lock-multiline t face #12#) 138 139 (fontified t font-lock-fontified t src-block t font-lock-multiline t face #12#) 139 140 (fontified t font-lock-fontified t src-block t font-lock-multiline t face #12#)) . 18200) (undo-tree-id1042 . -67) (undo-tree-id1043 . 140) (undo-tree-id1044 . 140) (undo-tree-id1045 . 1) (undo-tree-id1046 . 1) (undo-tree-id1047 . 1) (undo-tree-id1048 . 1) (undo-tree-id1049 . -35) (undo-tree-id1050 . -35) (undo-tree-id1051 . -36) (undo-tree-id1052 . -140) (undo-tree-id1053 . -140) (undo-tree-id1054 . -140) (undo-tree-id1055 . -140) (undo-tree-id1056 . 104) (undo-tree-id1057 . -36) (undo-tree-id1058 . 1) (undo-tree-id1059 . 104) (undo-tree-id1060 . -66) (undo-tree-id1061 . 1) (undo-tree-id1062 . 74) (undo-tree-id1063 . -67) (undo-tree-id1064 . 1) (undo-tree-id1065 . 2) (undo-tree-id1066 . -139) (undo-tree-id1067 . -43) (undo-tree-id1068 . 1) (undo-tree-id1069 . 1) (undo-tree-id1070 . -139) (undo-tree-id1071 . 1) (undo-tree-id1072 . 1) (undo-tree-id1073 . -139) (undo-tree-id1074 . 1) (undo-tree-id1075 . 1) (undo-tree-id1076 . -35) (undo-tree-id1077 . -68) (undo-tree-id1078 . 1) (undo-tree-id1079 . 1) (undo-tree-id1080 . -139) (undo-tree-id1081 . 1) (undo-tree-id1082 . 1) (undo-tree-id1083 . -139) (undo-tree-id1084 . -139) (undo-tree-id1085 . 2) (undo-tree-id1086 . 1) (undo-tree-id1087 . 72) (undo-tree-id1088 . -69) (undo-tree-id1089 . 3) (undo-tree-id1090 . -138) (undo-tree-id1091 . -138) (undo-tree-id1092 . 72) (undo-tree-id1093 . 2) (undo-tree-id1094 . -67) (undo-tree-id1095 . 72) (undo-tree-id1096 . 73) (undo-tree-id1097 . -68) (undo-tree-id1098 . 72) (undo-tree-id1099 . 72) (undo-tree-id1100 . -68) 18268) ((18200 . 18340) (#("            (require 'counsel-projectile)
            (projectile-global-mode)

      (define-key projectile-mode-map (kbd \"C-c p\") 'projectile-command-map)

" 0 13 (fontified t font-lock-fontified t font-lock-multiline t face #13=(org-block) help-echo nil src-block t) 13 20 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-keyword-face . #13#) help-echo nil src-block t) 20 22 (fontified t font-lock-fontified t font-lock-multiline t face #13# help-echo nil src-block t) 22 40 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-constant-face . #13#) help-echo nil src-block t) 40 123 (fontified t font-lock-fontified t font-lock-multiline t face #13# help-echo nil src-block t) 123 130 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-string-face . #13#) help-echo nil src-block t) 130 157 (fontified t font-lock-fontified t font-lock-multiline t face #13# src-block t) 157 158 (fontified t font-lock-fontified t font-lock-multiline t face #13# src-block t)) . 18200) (undo-tree-id1101 . 72) (undo-tree-id1102 . -87) (undo-tree-id1103 . 3) (undo-tree-id1104 . -156) (undo-tree-id1105 . -86) (undo-tree-id1106 . -86) (undo-tree-id1107 . 72) (undo-tree-id1108 . -86)) (23422 14205 818674 682000) 0 nil]) ((18267 . 18268)) ((#("
" 0 1 (fontified t font-lock-fontified t src-block t help-echo nil font-lock-multiline t face (org-block))) . 18267) (undo-tree-id1233 . -1) (undo-tree-id1234 . -1)) (23422 14672 860667 831000) 0 nil]) ((nil rear-nonsticky nil 18336 . 18337) (18267 . 18337)) ((#("(define-key projectile-mode-map (kbd \"C-c p\") 'projectile-command-map)" 0 37 (fontified nil font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #14=(org-block)) 37 44 (fontified nil font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-string-face . #14#)) 44 69 (fontified nil font-lock-fontified t src-block t font-lock-multiline t face #14#) 69 70 (fontified nil rear-nonsticky nil font-lock-fontified t src-block t font-lock-multiline t face #14#)) . 18267) (undo-tree-id1235 . 70) (undo-tree-id1236 . 70) (undo-tree-id1237 . 70) (undo-tree-id1238 . -70) (undo-tree-id1239 . -70) (nil rear-nonsticky t 18336 . 18337)) (23422 14671 780859 540000) 0 nil] [nil ([nil nil ((18200 . 18304) (#("      (require 'counsel-projectile)
      (projectile-global-mode)

ounsel-projectile
" 0 7 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #15=(org-block)) 7 14 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-keyword-face . #15#)) 14 16 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #15#) 16 34 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-constant-face . #15#)) 34 36 (fontified t font-lock-fontified t src-block t font-lock-multiline t face #15#) 36 65 (font-lock-fontified t src-block t fontified t font-lock-multiline t face #15#) 65 66 (font-lock-fontified t src-block t fontified t rear-nonsticky t font-lock-multiline t face #15#) 66 68 (fontified t font-lock-fontified t src-block t font-lock-multiline t face #15#) 68 84 (fontified t font-lock-fontified t font-lock-multiline t face #15# src-block t) 84 85 (fontified t rear-nonsticky t font-lock-fontified t font-lock-multiline t face #15# src-block t) 85 86 (fontified t font-lock-fontified t src-block t font-lock-multiline t face #15#)) . 18200) (undo-tree-id992 . -68) (undo-tree-id993 . 86) (undo-tree-id994 . 86) (undo-tree-id995 . 1) (undo-tree-id996 . 1) (undo-tree-id997 . 1) (undo-tree-id998 . 1) (undo-tree-id999 . -35) (undo-tree-id1000 . -35) (undo-tree-id1001 . -35) (undo-tree-id1002 . -68) (undo-tree-id1003 . -36) (undo-tree-id1004 . -86) (undo-tree-id1005 . -86) (undo-tree-id1006 . -86) (undo-tree-id1007 . -86) (undo-tree-id1008 . 50) (undo-tree-id1009 . -36) (undo-tree-id1010 . 1) (undo-tree-id1011 . 50) (undo-tree-id1012 . -66) (undo-tree-id1013 . 1) (undo-tree-id1014 . 20) (undo-tree-id1015 . -67) (undo-tree-id1016 . 1) (undo-tree-id1017 . 19) (undo-tree-id1018 . -68) (undo-tree-id1019 . -43) (undo-tree-id1020 . 1) (undo-tree-id1021 . 18) (undo-tree-id1022 . -85) (undo-tree-id1023 . 18) (undo-tree-id1024 . 1) (undo-tree-id1025 . -68) (undo-tree-id1026 . 18) (undo-tree-id1027 . 18) (undo-tree-id1028 . -68) 18268) ((18200 . 18286) (#("            (require 'counsel-projectile)
            (projectile-global-mode)

      ounsel-projectile
" 0 13 (fontified t font-lock-fontified t font-lock-multiline t face #16=(org-block) help-echo nil src-block t) 13 20 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-keyword-face . #16#) help-echo nil src-block t) 20 22 (fontified t font-lock-fontified t font-lock-multiline t face #16# help-echo nil src-block t) 22 40 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-constant-face . #16#) help-echo nil src-block t) 40 103 (fontified t font-lock-fontified t font-lock-multiline t face #16# src-block t) 103 104 (fontified t font-lock-fontified t font-lock-multiline t face #16# src-block t)) . 18200) (undo-tree-id1029 . -86) (undo-tree-id1030 . -86) (undo-tree-id1031 . 18) (undo-tree-id1032 . -86)) (23422 14202 130665 176000) 0 nil]) ((nil rear-nonsticky nil 18284 . 18285) (nil fontified nil 18268 . 18285) (18268 . 18285)) ((#("ounsel-projectile" 0 16 (fontified nil font-lock-fontified t src-block t font-lock-multiline t face #17=(org-block)) 16 17 (fontified nil rear-nonsticky nil font-lock-fontified t src-block t font-lock-multiline t face #17#)) . 18268) (undo-tree-id1033 . 17) (undo-tree-id1034 . -17) (undo-tree-id1035 . 17) (undo-tree-id1036 . 17) (undo-tree-id1037 . 17) (undo-tree-id1038 . 17) (undo-tree-id1039 . 17) (undo-tree-id1040 . -17) (undo-tree-id1041 . -17) (nil rear-nonsticky t 18284 . 18285)) (23422 14202 132755 953000) 0 nil]) ((18266 . 18268) (t 23422 13873 25543 621000)) nil (23422 14670 888716 242000) 0 nil]) ((#("
" 0 1 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . 18267) (undo-tree-id991 . 1)) ((18267 . 18268) (t 23422 13873 25543 621000)) (23422 14199 954182 94000) 0 nil]) ((#("      (counsel-projectile-on)" 0 29 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . -18267) (undo-tree-id861 . -29) (undo-tree-id862 . -29) (undo-tree-id863 . -29) (undo-tree-id864 . 29) (undo-tree-id865 . 29) (undo-tree-id866 . 29) (undo-tree-id867 . 29) (undo-tree-id868 . 29) (undo-tree-id869 . 29) (undo-tree-id870 . 29) (undo-tree-id871 . -29) (undo-tree-id872 . 29) (undo-tree-id873 . -29) 18296) nil (23422 14199 291083 900000) 0 nil]) ((nil rear-nonsticky nil 18265 . 18266) (nil help-echo nil 18236 . 18266) (nil fontified nil 18236 . 18266) (18236 . 18266)) nil (23422 13872 997184 935000) 0 nil]) ((18235 . 18236)) nil (23422 13872 997207 32000) 0 nil]) ((#("
" 0 1 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block))) . 18200) (undo-tree-id874 . 1) (undo-tree-id875 . 1) (undo-tree-id876 . 1) (undo-tree-id877 . 1) (undo-tree-id878 . 1) (undo-tree-id879 . 1) (undo-tree-id880 . 1) (undo-tree-id881 . 1) (undo-tree-id882 . 1) (undo-tree-id883 . 1) (undo-tree-id884 . 1) (undo-tree-id885 . 1) (undo-tree-id886 . 1) (undo-tree-id887 . 1) (undo-tree-id888 . 1) (undo-tree-id889 . 1) (undo-tree-id890 . 1) (undo-tree-id891 . 1) (undo-tree-id892 . 1) (undo-tree-id893 . 1) (undo-tree-id894 . 1) (undo-tree-id895 . 1) (undo-tree-id896 . 1) (undo-tree-id897 . 1) (undo-tree-id898 . 1) (undo-tree-id899 . 1) (undo-tree-id900 . 1) (undo-tree-id901 . 1) (undo-tree-id902 . 1) (#("
" 0 1 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block))) . 18200) (undo-tree-id903 . 1) (undo-tree-id904 . 1) (undo-tree-id905 . -1) (undo-tree-id906 . -1) (undo-tree-id907 . -1) (undo-tree-id908 . 1) (undo-tree-id909 . 1) (undo-tree-id910 . 1) (undo-tree-id911 . 1) (undo-tree-id912 . 1) (undo-tree-id913 . 1) (undo-tree-id914 . 1) (undo-tree-id915 . 1) (undo-tree-id916 . 1) (undo-tree-id917 . 1) (undo-tree-id918 . 1) (undo-tree-id919 . 1) (undo-tree-id920 . 1) (undo-tree-id921 . 1) (undo-tree-id922 . 1) (undo-tree-id923 . 1) (undo-tree-id924 . 1) (undo-tree-id925 . 1) (undo-tree-id926 . 1) (undo-tree-id927 . 1) (undo-tree-id928 . 1) (undo-tree-id929 . 1) (undo-tree-id930 . 1) (undo-tree-id931 . 1) (undo-tree-id932 . 1)) nil (23422 13872 997741 556000) 0 nil]) ((#("      (projectile-global-mode)" 0 30 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block))) . 18200) (undo-tree-id933 . 30) (undo-tree-id934 . 30) (undo-tree-id935 . -30) (undo-tree-id936 . -30) (undo-tree-id937 . 30) (undo-tree-id938 . 30) (undo-tree-id939 . 30) (undo-tree-id940 . 30) (undo-tree-id941 . 30) (undo-tree-id942 . 30) (undo-tree-id943 . 30) (undo-tree-id944 . 30) (undo-tree-id945 . -30) (undo-tree-id946 . 30) (undo-tree-id947 . 30) (undo-tree-id948 . 30) (undo-tree-id949 . -30) (undo-tree-id950 . -30) (undo-tree-id951 . 30) (undo-tree-id952 . 30) (undo-tree-id953 . 30) (undo-tree-id954 . 30) (undo-tree-id955 . -30) (undo-tree-id956 . 30) (undo-tree-id957 . 1) (undo-tree-id958 . -30) (undo-tree-id959 . 24) (undo-tree-id960 . -7) (undo-tree-id961 . -30) (undo-tree-id962 . -30) 18230) nil (23422 13872 998191 202000) 0 nil]) ((#("
" 0 1 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block))) . 18200) (undo-tree-id963 . 1) (undo-tree-id964 . 1) (undo-tree-id965 . 1) (undo-tree-id966 . 1) (undo-tree-id967 . 1) (undo-tree-id968 . 1) (undo-tree-id969 . 1) (undo-tree-id970 . 1) (undo-tree-id971 . -1) (undo-tree-id972 . 1) (undo-tree-id973 . 1) (undo-tree-id974 . 1)) nil (23422 13872 998362 120000) 0 nil]) ((#("      (require 'projectile)" 0 7 (fontified t font-lock-fontified t font-lock-multiline t face #18=(org-block) help-echo nil src-block t) 7 14 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-keyword-face . #18#) help-echo nil src-block t) 14 16 (fontified t font-lock-fontified t font-lock-multiline t face #18# help-echo nil src-block t) 16 26 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-constant-face . #18#) help-echo nil src-block t) 26 27 (fontified t font-lock-fontified t font-lock-multiline t face #18# help-echo nil src-block t)) . -18200) (undo-tree-id975 . 27) (undo-tree-id976 . 27) (undo-tree-id977 . -27) (undo-tree-id978 . -27) (undo-tree-id979 . -27) (undo-tree-id980 . -27) (undo-tree-id981 . 27) (undo-tree-id982 . 27) (undo-tree-id983 . 27) (undo-tree-id984 . -27) (undo-tree-id985 . 27) (undo-tree-id986 . 1) (undo-tree-id987 . -27) (undo-tree-id988 . 21) (undo-tree-id989 . -7) (undo-tree-id990 . -27) 18227 (t 23422 13733 663696 551000)) nil (23422 13872 998542 900000) 0 nil]) ((18200 . 18326) (#("
      (projectile-global-mode)
      (counsel-projectile-on)
" 0 1 (fontified t font-lock-fontified t font-lock-multiline t face #19=(org-block) src-block t) 1 61 (fontified t font-lock-fontified t src-block t font-lock-multiline t face #19#) 61 62 (fontified t font-lock-fontified t src-block t font-lock-multiline t face #19#)) . 18200) (undo-tree-id735 . 62) (undo-tree-id736 . 62) (undo-tree-id737 . 62) (undo-tree-id738 . 62) (undo-tree-id739 . 62) (undo-tree-id740 . 62) (undo-tree-id741 . 62) (undo-tree-id742 . 62) (undo-tree-id743 . 62) (undo-tree-id744 . 62) (undo-tree-id745 . 62) (undo-tree-id746 . 62) (undo-tree-id747 . 62) (undo-tree-id748 . 62) (undo-tree-id749 . 62) (undo-tree-id750 . 62) (undo-tree-id751 . 62) (undo-tree-id752 . 62) (undo-tree-id753 . 62) (undo-tree-id754 . 62) (undo-tree-id755 . 62) (undo-tree-id756 . 62) (undo-tree-id757 . 62) (undo-tree-id758 . 62) (undo-tree-id759 . 62) (undo-tree-id760 . 62) (undo-tree-id761 . 62) (undo-tree-id762 . 62) (undo-tree-id763 . 62) (undo-tree-id764 . 62) (undo-tree-id765 . 62) (undo-tree-id766 . 62) (undo-tree-id767 . 62) (undo-tree-id768 . 62) (undo-tree-id769 . 62) (undo-tree-id770 . 62) (undo-tree-id771 . 62) (undo-tree-id772 . 62) (undo-tree-id773 . 62) (undo-tree-id774 . 62) (undo-tree-id775 . 62) (undo-tree-id776 . 62) (undo-tree-id777 . 62) (undo-tree-id778 . 62) (undo-tree-id779 . 62) (undo-tree-id780 . 62) (undo-tree-id781 . 62) (undo-tree-id782 . 62) (undo-tree-id783 . 62) (undo-tree-id784 . 62) (undo-tree-id785 . 62) (undo-tree-id786 . 62) (undo-tree-id787 . 62) (undo-tree-id788 . 62) (undo-tree-id789 . 62) (undo-tree-id790 . 62) (undo-tree-id791 . 62) (undo-tree-id792 . 62) (undo-tree-id793 . 62) (undo-tree-id794 . 62) (undo-tree-id795 . 62) (undo-tree-id796 . 62) (undo-tree-id797 . 62) (undo-tree-id798 . 62) (undo-tree-id799 . 62) (undo-tree-id800 . 62) (undo-tree-id801 . 62) (undo-tree-id802 . 62) (undo-tree-id803 . 62) (undo-tree-id804 . 62) (undo-tree-id805 . 62) (undo-tree-id806 . 62) (undo-tree-id807 . 62) (undo-tree-id808 . 62) (undo-tree-id809 . 62) (undo-tree-id810 . 62) (undo-tree-id811 . 62) (undo-tree-id812 . 62) (undo-tree-id813 . 62) (undo-tree-id814 . 62) (undo-tree-id815 . 62) (undo-tree-id816 . 62) (undo-tree-id817 . 62) (undo-tree-id818 . 62) (undo-tree-id819 . 62) (undo-tree-id820 . 62) (undo-tree-id821 . 62) (undo-tree-id822 . 62) (undo-tree-id823 . 62) (undo-tree-id824 . 62) (undo-tree-id825 . 62) (undo-tree-id826 . 62) (undo-tree-id827 . 62) (undo-tree-id828 . 62) (undo-tree-id829 . 62) (undo-tree-id830 . 62) (undo-tree-id831 . 62) (undo-tree-id832 . 62) (undo-tree-id833 . 62) (undo-tree-id834 . 62) (undo-tree-id835 . 62) (undo-tree-id836 . 62) (undo-tree-id837 . 62) (undo-tree-id838 . 62) (undo-tree-id839 . 62) (undo-tree-id840 . 62) (undo-tree-id841 . 62) (undo-tree-id842 . 62) (undo-tree-id843 . 62) (undo-tree-id844 . 62) (undo-tree-id845 . 62) (undo-tree-id846 . 62) (undo-tree-id847 . 62)) nil (23422 13733 636674 866000) 0 nil]) ((18199 . 18200)) nil (23422 13733 636893 21000) 0 nil]) ((18200 . 18261) (#("      (projectile-global-mode)
      (counsel-projectile-on)
" 0 60 (fontified t font-lock-fontified t font-lock-multiline t face #20=(org-block) src-block t) 60 61 (fontified t font-lock-fontified t font-lock-multiline t face #20# src-block t)) . 18200) (undo-tree-id848 . 61) (undo-tree-id849 . 61) (t 23422 13700 789676 186000)) nil (23422 13733 636970 605000) 0 nil]) ((18200 . 18261) (#("        
" 0 4 (fontified t font-lock-fontified t src-block t font-lock-multiline t face #21=(org-block)) 4 8 (fontified t font-lock-fontified t src-block t font-lock-multiline t face #21#) 8 9 (fontified t font-lock-fontified t src-block t font-lock-multiline t face #21#)) . 18200) (undo-tree-id722 . -4) (undo-tree-id723 . -4) (undo-tree-id724 . 5) (undo-tree-id725 . 5) (undo-tree-id726 . 5) (undo-tree-id727 . 5) (undo-tree-id728 . 5) (undo-tree-id729 . 5) (undo-tree-id730 . 5) (undo-tree-id731 . 5) 18204) nil (23422 13700 765315 205000) 0 nil]) ((#("
" 0 1 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) src-block t)) . 18204)) nil (23422 13700 765365 875000) 0 nil]) ((#("+BEGIN_SRC " 0 11 (fontified t font-lock-fontified t font-lock-multiline t face org-block-begin-line)) . -18178) (18189 . 18210) 18189) nil (23422 13700 765397 87000) 0 nil]) ((18188 . 18189)) nil (23422 13700 765418 516000) 0 nil]) ((18188 . 18193)) nil (23422 13700 765434 321000) 0 nil]) ((#(" " 0 1 (fontified t font-lock-fontified t font-lock-multiline t face org-block-begin-line)) . -18188) (undo-tree-id732 . -1) 18189) nil (23422 13700 765464 0) 0 nil]) ((#("?" 0 1 (fontified nil)) . 18189) (18177 . 18209) (#("<s" 0 2 (fontified t font-lock-fontified t)) . -18177) (undo-tree-id733 . -2) 18179) nil (23422 13700 765502 646000) 0 nil]) ((18177 . 18179)) nil (23422 13700 765524 957000) 0 nil]) ((18172 . 18177)) nil (23422 13700 765540 512000) 0 nil]) ((18170 . 18172)) nil (23422 13700 765556 810000) 0 nil]) ((18163 . 18170)) nil (23422 13700 765572 837000) 0 nil]) ((18142 . 18163)) nil (23422 13700 765588 486000) 0 nil]) ((18138 . 18142)) nil (23422 13700 765607 54000) 0 nil]) ((18137 . 18138)) nil (23422 13700 765623 370000) 0 nil]) ((18132 . 18137)) nil (23422 13700 765639 170000) 0 nil]) ((18111 . 18132)) nil (23422 13700 765655 108000) 0 nil]) ((18093 . 18111)) nil (23422 13700 765670 427000) 0 nil]) ((#("m" 0 1 (fontified t font-lock-fontified t face org-level-3)) . -18093) (undo-tree-id734 . -1) 18094) nil (23422 13700 765697 990000) 0 nil]) ((18089 . 18094)) nil (23422 13700 765717 556000) 0 nil]) ((18078 . 18079)) nil (23422 13700 765733 664000) 0 nil]) ((#("p" 0 1 (fontified t font-lock-fontified t face org-level-3)) . 18078)) nil (23422 13700 765749 422000) 0 nil]) ((18074 . 18089)) nil (23422 13700 765766 297000) 0 nil]) ((18073 . 18074) (t 23422 13634 885640 95000)) nil (23422 13700 765784 999000) 0 nil]) ((8830 . 10113) (#("          (add-to-list 'load-path (concat emacs-git \"Plugins/\"))

          (add-to-list 'load-path (concat emacs-git \"Plugins/git-modes\")) ;various modes required for magit
          (add-to-list 'load-path (concat emacs-git \"Plugins/magit\"))

          (add-to-list 'load-path (concat emacs-git \"Plugins/yasnippet\"))

                                                  ;(add-to-list 'load-path (concat emacs-git \"Plugins/ein\")) ;for python notebook. I didn't manage to make it work

          (add-to-list 'load-path (concat emacs-git \"Plugins/plantuml-mode\"))

          (add-to-list 'load-path (concat emacs-git \"Plugins/org-mode\"))
          (add-to-list 'load-path (concat emacs-git \"Plugins/org-mode/lisp\"))
          (add-to-list 'load-path (concat emacs-git \"Plugins/org-mode/contrib/lisp\"))

          (add-to-list 'load-path (concat emacs-git \"Plugins/autocomplete\"))

          (add-to-list 'load-path (concat emacs-git \"Plugins/fill-column-indicator-1.83\"))

          (add-to-list 'load-path (concat emacs-git \"Plugins/swiper\"))

          (add-to-list 'load-path (concat emacs-git \"Plugins/expand-region\"))

          (add-to-list 'load-path (concat emacs-git \"Plugins/multiple-cursors\"))

     (add-to-list 'load-path (concat emacs-git \"Plugins/multiple-cursors\"))

(add-to-list 'load-path (concat emacs-git \"Plugins/multiple-cursors\"))
" 0 52 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #22=(org-block)) 52 62 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-string-face . #22#)) 62 118 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #22#) 118 137 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-string-face . #22#)) 137 140 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #22#) 140 141 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-delimiter-face . #22#)) 141 174 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-face . #22#)) 174 226 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #22#) 226 241 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-string-face . #22#)) 241 297 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #22#) 297 316 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-string-face . #22#)) 316 370 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #22#) 370 371 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-delimiter-face . #22#)) 371 474 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #23=(font-lock-comment-face . #22#)) 474 483 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #23#) 483 500 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #22#) 500 536 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #22#) 536 559 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-string-face . #22#)) 559 615 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #22#) 615 633 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-string-face . #22#)) 633 688 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #22#) 688 711 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-string-face . #22#)) 711 766 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #22#) 766 797 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-string-face . #22#)) 797 853 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #22#) 853 875 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-string-face . #22#)) 875 931 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #22#) 931 967 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-string-face . #22#)) 967 1023 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #22#) 1023 1039 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-string-face . #22#)) 1039 1095 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #22#) 1095 1118 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-string-face . #22#)) 1118 1174 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #22#) 1174 1200 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-string-face . #22#)) 1200 1251 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #22#) 1251 1277 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-string-face . #22#)) 1277 1281 (fontified t font-lock-fontified t src-block t font-lock-multiline t face #22# help-echo nil) 1281 1323 (font-lock-fontified t src-block t fontified t font-lock-multiline t face #22# help-echo nil) 1323 1349 (font-lock-fontified t src-block t fontified t font-lock-multiline t face (font-lock-string-face . #22#) help-echo nil) 1349 1350 (font-lock-fontified t src-block t fontified t font-lock-multiline t face #22#) 1350 1351 (font-lock-fontified t src-block t fontified t rear-nonsticky t font-lock-multiline t face #22#) 1351 1352 (fontified t font-lock-fontified t src-block t font-lock-multiline t face #22#)) . 8830) (undo-tree-id536 . -1281) (undo-tree-id537 . -801) (undo-tree-id538 . -1351) (undo-tree-id539 . -1351) (undo-tree-id540 . 1) (undo-tree-id541 . 71) (undo-tree-id542 . -1351) (undo-tree-id543 . 1) (undo-tree-id544 . 1) (undo-tree-id545 . -1351) (undo-tree-id546 . 1) (undo-tree-id547 . 1) (undo-tree-id548 . -1351) (undo-tree-id549 . 1) (undo-tree-id550 . 1) (undo-tree-id551 . -801) (undo-tree-id552 . 1) (undo-tree-id553 . 1) (undo-tree-id554 . -801) (undo-tree-id555 . 1) (undo-tree-id556 . 1) (undo-tree-id557 . -801) (undo-tree-id558 . 1) (undo-tree-id559 . 1) (undo-tree-id560 . -801) (undo-tree-id561 . 1) (undo-tree-id562 . 1) (undo-tree-id563 . -801) (undo-tree-id564 . 1) (undo-tree-id565 . 1) (undo-tree-id566 . -801) (undo-tree-id567 . 1) (undo-tree-id568 . 1) (undo-tree-id569 . -801) (undo-tree-id570 . 1) (undo-tree-id571 . 1) (undo-tree-id572 . -801) (undo-tree-id573 . 1) (undo-tree-id574 . 1) (undo-tree-id575 . -801) (undo-tree-id576 . 1) (undo-tree-id577 . 1) (undo-tree-id578 . -801) (undo-tree-id579 . 1) (undo-tree-id580 . 1) (undo-tree-id581 . -801) (undo-tree-id582 . 1) (undo-tree-id583 . 1) (undo-tree-id584 . -801) (undo-tree-id585 . 1) (undo-tree-id586 . 1) (undo-tree-id587 . -801) (undo-tree-id588 . 1) (undo-tree-id589 . 1) (undo-tree-id590 . -801) (undo-tree-id591 . 1) (undo-tree-id592 . 1) (undo-tree-id593 . -801) (undo-tree-id594 . 1) (undo-tree-id595 . 1) (undo-tree-id596 . -801) (undo-tree-id597 . 1) (undo-tree-id598 . 1) (undo-tree-id599 . -801) (undo-tree-id600 . 1) (undo-tree-id601 . 1) (undo-tree-id602 . -801) (undo-tree-id603 . 1) (undo-tree-id604 . 1) (undo-tree-id605 . -801) (undo-tree-id606 . 1) (undo-tree-id607 . 1) (undo-tree-id608 . -801) (undo-tree-id609 . 1) (undo-tree-id610 . 1) (undo-tree-id611 . -801) (undo-tree-id612 . 1) (undo-tree-id613 . 1) (undo-tree-id614 . -801) (undo-tree-id615 . 1) (undo-tree-id616 . 1) (undo-tree-id617 . -801) (undo-tree-id618 . 1) (undo-tree-id619 . 1) (undo-tree-id620 . -801) (undo-tree-id621 . 1) (undo-tree-id622 . 1) (undo-tree-id623 . -801) (undo-tree-id624 . 1) (undo-tree-id625 . 1) (undo-tree-id626 . -801) (undo-tree-id627 . 1) (undo-tree-id628 . 1) (undo-tree-id629 . -801) (undo-tree-id630 . 1) (undo-tree-id631 . 1) (undo-tree-id632 . -801) (undo-tree-id633 . 1) (undo-tree-id634 . 1) (undo-tree-id635 . -801) (undo-tree-id636 . 1) (undo-tree-id637 . 1) (undo-tree-id638 . -801) (undo-tree-id639 . 1) (undo-tree-id640 . 1) (undo-tree-id641 . -801) (undo-tree-id642 . 1) (undo-tree-id643 . 1) (undo-tree-id644 . -801) (undo-tree-id645 . 1) (undo-tree-id646 . 1) (undo-tree-id647 . -801) (undo-tree-id648 . 1) (undo-tree-id649 . 1) (undo-tree-id650 . -801) (undo-tree-id651 . 1) (undo-tree-id652 . 1) (undo-tree-id653 . -801) (undo-tree-id654 . 1) (undo-tree-id655 . 1) (undo-tree-id656 . -801) (undo-tree-id657 . 1) (undo-tree-id658 . 1) (undo-tree-id659 . -801) (undo-tree-id660 . 1) (undo-tree-id661 . 1) (undo-tree-id662 . -801) (undo-tree-id663 . 1) (undo-tree-id664 . 1) (undo-tree-id665 . -801) (undo-tree-id666 . 1) (undo-tree-id667 . 1) (undo-tree-id668 . -801) (undo-tree-id669 . 1) (undo-tree-id670 . 1) (undo-tree-id671 . -801) (undo-tree-id672 . 1) (undo-tree-id673 . 1) (undo-tree-id674 . -801) (undo-tree-id675 . 1) (undo-tree-id676 . 1) (undo-tree-id677 . -801) (undo-tree-id678 . 1) (undo-tree-id679 . 1) (undo-tree-id680 . -801) (undo-tree-id681 . 1) (undo-tree-id682 . 1) (undo-tree-id683 . -801) (undo-tree-id684 . 1) (undo-tree-id685 . 1) (undo-tree-id686 . -801) (undo-tree-id687 . 1) (undo-tree-id688 . 1) (undo-tree-id689 . -801) (undo-tree-id690 . 1) (undo-tree-id691 . 1) (undo-tree-id692 . -801) (undo-tree-id693 . 1) (undo-tree-id694 . 1) (undo-tree-id695 . -801) (undo-tree-id696 . 1) (undo-tree-id697 . 1) (undo-tree-id698 . -801) (undo-tree-id699 . 1) (undo-tree-id700 . 1) (undo-tree-id701 . -801) (undo-tree-id702 . 1) (undo-tree-id703 . 1) (undo-tree-id704 . -801) (undo-tree-id705 . 1) (undo-tree-id706 . 1) (undo-tree-id707 . -801) (undo-tree-id708 . 1) (undo-tree-id709 . 1) (undo-tree-id710 . -801) (undo-tree-id711 . 1) (undo-tree-id712 . 1) (undo-tree-id713 . -801) 10181) nil (23422 13634 865591 140000) 0 nil]) ((nil rear-nonsticky nil 10180 . 10181) (nil fontified nil 10179 . 10181) (nil help-echo nil 10153 . 10179) (nil fontified nil 10153 . 10179) (nil help-echo nil 10111 . 10153) (nil fontified nil 10111 . 10153) (10111 . 10181)) nil (23422 13634 865933 755000) 0 nil]) ((10109 . 10111)) nil (23422 13634 865968 50000) 0 nil]) ((8830 . 10110) (#("     (add-to-list 'load-path (concat emacs-git \"Plugins/\"))

     (add-to-list 'load-path (concat emacs-git \"Plugins/git-modes\")) ;various modes required for magit
     (add-to-list 'load-path (concat emacs-git \"Plugins/magit\"))

     (add-to-list 'load-path (concat emacs-git \"Plugins/yasnippet\"))

                                             ;(add-to-list 'load-path (concat emacs-git \"Plugins/ein\")) ;for python notebook. I didn't manage to make it work

     (add-to-list 'load-path (concat emacs-git \"Plugins/plantuml-mode\"))

     (add-to-list 'load-path (concat emacs-git \"Plugins/org-mode\"))
     (add-to-list 'load-path (concat emacs-git \"Plugins/org-mode/lisp\"))
     (add-to-list 'load-path (concat emacs-git \"Plugins/org-mode/contrib/lisp\"))

     (add-to-list 'load-path (concat emacs-git \"Plugins/autocomplete\"))

     (add-to-list 'load-path (concat emacs-git \"Plugins/fill-column-indicator-1.83\"))

     (add-to-list 'load-path (concat emacs-git \"Plugins/swiper\"))

     (add-to-list 'load-path (concat emacs-git \"Plugins/expand-region\"))

     (add-to-list 'load-path (concat emacs-git \"Plugins/multiple-cursors\"))

(add-to-list 'load-path (concat emacs-git \"Plugins/multiple-cursors\"))
" 0 47 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #24=(org-block)) 47 57 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-string-face . #24#)) 57 108 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #24#) 108 127 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-string-face . #24#)) 127 130 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #24#) 130 131 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-delimiter-face . #24#)) 131 164 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-face . #24#)) 164 211 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #24#) 211 226 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-string-face . #24#)) 226 277 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #24#) 277 296 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-string-face . #24#)) 296 307 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #24#) 307 345 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #24#) 345 346 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-delimiter-face . #24#)) 346 458 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-face . #24#)) 458 474 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #24#) 474 506 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #24#) 506 529 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-string-face . #24#)) 529 580 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #24#) 580 598 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-string-face . #24#)) 598 648 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #24#) 648 671 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-string-face . #24#)) 671 721 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #24#) 721 752 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-string-face . #24#)) 752 803 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #24#) 803 825 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-string-face . #24#)) 825 876 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #24#) 876 912 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-string-face . #24#)) 912 963 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #24#) 963 979 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-string-face . #24#)) 979 1030 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #24#) 1030 1053 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-string-face . #24#)) 1053 1104 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #24#) 1104 1130 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-string-face . #24#)) 1130 1134 (fontified t font-lock-fontified t src-block t font-lock-multiline t face #24# help-echo nil) 1134 1176 (font-lock-fontified t src-block t fontified t font-lock-multiline t face #24# help-echo nil) 1176 1202 (font-lock-fontified t src-block t fontified t font-lock-multiline t face (font-lock-string-face . #24#) help-echo nil) 1202 1203 (font-lock-fontified t src-block t fontified t font-lock-multiline t face #24#) 1203 1204 (font-lock-fontified t src-block t fontified t rear-nonsticky t font-lock-multiline t face #24#) 1204 1205 (fontified t font-lock-fontified t src-block t font-lock-multiline t face #24#)) . 8830) (undo-tree-id714 . -1134) (undo-tree-id715 . -1134) (undo-tree-id716 . -1062) (undo-tree-id717 . -1062) (undo-tree-id718 . 2) (undo-tree-id719 . -1204) (undo-tree-id720 . 71) (undo-tree-id721 . -1135) 9964) nil (23422 13634 866076 218000) 0 nil]) ((nil rear-nonsticky nil 10033 . 10034) (nil fontified nil 10032 . 10034) (nil help-echo nil 10006 . 10032) (nil fontified nil 10006 . 10032) (nil help-echo nil 9964 . 10006) (nil fontified nil 9964 . 10006) (9964 . 10034)) nil (23422 13634 866132 962000) 0 nil]) ((9962 . 9964) (t 23422 12485 51642 946000)) nil (23422 13634 866165 434000) 0 nil] [nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil nil ((18015 . 18031) (t 23422 12048 106522 696000)) ((#("(require 'gtags)" 0 1 (fontified t font-lock-fontified t src-block t help-echo nil font-lock-multiline t face #25=(org-block)) 1 8 (fontified t font-lock-fontified t src-block t help-echo nil font-lock-multiline t face (font-lock-keyword-face . #25#)) 8 10 (fontified t font-lock-fontified t src-block t help-echo nil font-lock-multiline t face #25#) 10 15 (fontified t font-lock-fontified t src-block t help-echo nil font-lock-multiline t face (font-lock-constant-face . #25#)) 15 16 (fontified t font-lock-fontified t src-block t help-echo nil font-lock-multiline t face #25#)) . 18015) (undo-tree-id246 . -16) (undo-tree-id247 . -16) (undo-tree-id248 . -16) (undo-tree-id249 . -16) (undo-tree-id250 . -16) (undo-tree-id251 . 1) (undo-tree-id252 . -16) (undo-tree-id253 . 16) (undo-tree-id254 . -1) (undo-tree-id255 . -16) (t 23422 12430 45265 113000)) (23422 12430 23326 964000) 0 nil]) ((18001 . 18010)) ((#(" 'ggtags)" 0 2 (fontified t font-lock-fontified t src-block t help-echo nil font-lock-multiline t face #26=(org-block)) 2 8 (fontified t font-lock-fontified t src-block t help-echo nil font-lock-multiline t face (font-lock-constant-face . #26#)) 8 9 (fontified t font-lock-fontified t src-block t help-echo nil font-lock-multiline t face #26#)) . 18001) (undo-tree-id256 . -9) (undo-tree-id257 . -9) (undo-tree-id258 . -9) (undo-tree-id259 . -9)) (23422 12478 168916 53000) 0 nil]) ((17993 . 17994)) ((#("(" 0 1 (fontified t font-lock-fontified t src-block t help-echo nil font-lock-multiline t face (org-block))) . 17993)) (23422 12478 454113 876000) 0 nil]) ((17993 . 18000)) ((#("require" 0 7 (fontified t font-lock-fontified t src-block t help-echo nil font-lock-multiline t face (org-block))) . 17993) (undo-tree-id260 . -7) (undo-tree-id261 . -7) (undo-tree-id262 . -7) (undo-tree-id263 . -7) (undo-tree-id264 . -7) (undo-tree-id265 . 7)) (23422 12478 725700 87000) 0 nil]) ((17988 . 17993)) ((#("
    " 0 1 (fontified t font-lock-fontified t help-echo nil font-lock-multiline t face org-block-begin-line) 1 5 (fontified t font-lock-fontified t src-block t help-echo nil font-lock-multiline t face (org-block))) . 17988) (undo-tree-id266 . -5) (undo-tree-id267 . -5) (undo-tree-id268 . -5) (undo-tree-id269 . -5) (undo-tree-id270 . -5) (undo-tree-id271 . -5) (undo-tree-id272 . -5) (undo-tree-id273 . -5)) (23422 12478 981766 867000) 0 nil]) ((#("+BEGIN_SRC " 0 11 (fontified t font-lock-fontified t font-lock-multiline t face org-block-begin-line)) . -17967) (17978 . 17999) 17978) ((#("+BEGIN_SRC emacs-lisp" 0 21 (fontified nil font-lock-fontified t font-lock-multiline t face org-block-begin-line)) . 17978) (undo-tree-id274 . -21) (undo-tree-id275 . -21) (undo-tree-id276 . -21) (undo-tree-id277 . -21) (undo-tree-id278 . -21) (undo-tree-id279 . -21) (undo-tree-id280 . -21) (undo-tree-id281 . -21) (undo-tree-id282 . -21) (undo-tree-id283 . -21) (17967 . 17978)) (23422 12479 230495 901000) 0 nil]) ((#("?" 0 1 (fontified nil)) . 17978) (undo-tree-id238 . -1) (17966 . 17998) (#("<s" 0 2 (fontified t font-lock-fontified t)) . -17966) (undo-tree-id239 . -2) (undo-tree-id241 . -1) (undo-tree-id243 . -2) (undo-tree-id245 . -2) 17968) ((17966 . 17968) (#("#+BEGIN_SRC ?
    
    #+END_SRC" 0 1 (fontified nil font-lock-fontified t font-lock-multiline t face org-block-begin-line) 1 12 (fontified nil font-lock-fontified t font-lock-multiline t face org-block-begin-line) 12 13 (fontified nil) 13 14 (fontified nil font-lock-fontified t src-block t help-echo nil font-lock-multiline t face org-block-begin-line) 14 18 (fontified nil font-lock-fontified t src-block t help-echo nil font-lock-multiline t face #27=(:inherit #40=(org-block))) 18 19 (fontified nil font-lock-fontified t src-block t font-lock-multiline t face #27#) 19 23 (fontified nil font-lock-fontified t font-lock-multiline t face org-block-end-line) 23 32 (fontified nil font-lock-fontified t font-lock-multiline t face org-block-end-line)) . 17966) (undo-tree-id284 . -12) (undo-tree-id285 . -12) (undo-tree-id286 . 19) (undo-tree-id287 . 19) (undo-tree-id288 . 19) (undo-tree-id289 . 19) (undo-tree-id290 . -12) (undo-tree-id291 . 14) (undo-tree-id292 . 14) (undo-tree-id293 . 14) (undo-tree-id294 . 14) (undo-tree-id295 . 14) (undo-tree-id296 . 14) (undo-tree-id297 . -32) (undo-tree-id298 . -32) (undo-tree-id299 . -18) (undo-tree-id300 . -12) (undo-tree-id301 . 14) (undo-tree-id302 . 14) (undo-tree-id303 . 14) (undo-tree-id304 . 14) (undo-tree-id305 . 14) (undo-tree-id306 . 14) (undo-tree-id307 . 14) (undo-tree-id308 . 14) (undo-tree-id309 . 14) (undo-tree-id310 . 14) (undo-tree-id311 . -18) (undo-tree-id312 . 14) (undo-tree-id313 . 14) (undo-tree-id314 . -18) (undo-tree-id315 . 14) (undo-tree-id316 . 14) (undo-tree-id317 . -18) (undo-tree-id318 . 19) (undo-tree-id319 . 14) (undo-tree-id320 . -12) (undo-tree-id321 . 19) (undo-tree-id322 . 19) (undo-tree-id323 . -12) (undo-tree-id324 . 19) (undo-tree-id325 . 19) (undo-tree-id326 . -12) (undo-tree-id327 . 19) (undo-tree-id328 . 19) (undo-tree-id329 . -12) (undo-tree-id330 . 19) (undo-tree-id331 . 19) (undo-tree-id332 . -12) (17978 . 17979)) (23422 12479 454037 62000) 0 nil]) ((17966 . 17968)) ((#("<s" 0 2 (fontified t font-lock-fontified t)) . 17966) (undo-tree-id333 . -2) (undo-tree-id334 . -2) (undo-tree-id335 . -2) (undo-tree-id336 . -2)) (23422 12479 671615 481000) 0 nil]) ((17962 . 17966)) ((#("    " 0 4 (fontified t font-lock-fontified t)) . 17962) (undo-tree-id337 . -4) (undo-tree-id338 . -4) (undo-tree-id339 . -4) (undo-tree-id340 . -4) (undo-tree-id341 . -4) (undo-tree-id342 . -4) (undo-tree-id343 . -4) (undo-tree-id344 . -4) (undo-tree-id345 . -4) (undo-tree-id346 . -4) (undo-tree-id347 . -4) (undo-tree-id348 . -4) (undo-tree-id349 . -4) (undo-tree-id350 . -4) (undo-tree-id351 . -4) (undo-tree-id352 . -4) (undo-tree-id353 . -4)) (23422 12479 885699 37000) 0 nil]) ((17961 . 17962) (t 23422 12032 69995 230000)) ((#("
" 0 1 (fontified t font-lock-fontified t)) . 17961) (undo-tree-id354 . -1) (undo-tree-id355 . -1) (undo-tree-id356 . -1) (undo-tree-id357 . -1) (undo-tree-id358 . -1) (undo-tree-id359 . -1) (undo-tree-id360 . -1) (undo-tree-id361 . -1) (undo-tree-id362 . -1) (undo-tree-id363 . -1) (undo-tree-id364 . -1) (undo-tree-id365 . -1) (undo-tree-id366 . -1) (undo-tree-id367 . -1) (undo-tree-id368 . -1) (undo-tree-id369 . -1) (undo-tree-id370 . -1) (undo-tree-id371 . -1)) (23422 12480 109789 739000) 0 nil]) ((17960 . 17961)) ((#("s" 0 1 (fontified t font-lock-fontified t face org-level-3)) . 17960) (undo-tree-id372 . -1) (undo-tree-id373 . -1) (undo-tree-id374 . -1) (undo-tree-id375 . -1) (undo-tree-id376 . -1) (undo-tree-id377 . -1) (undo-tree-id378 . -1) (undo-tree-id379 . -1) (undo-tree-id380 . -1) (undo-tree-id381 . -1) (undo-tree-id382 . -1) (undo-tree-id383 . -1) (undo-tree-id384 . -1) (undo-tree-id385 . -1) (undo-tree-id386 . -1) (undo-tree-id387 . -1) (undo-tree-id388 . -1) (undo-tree-id389 . -1) (undo-tree-id390 . -1)) (23422 12480 350642 37000) 0 nil]) ((17953 . 17960)) ((#("a?) tag" 0 7 (fontified t font-lock-fontified t face org-level-3)) . 17953) (undo-tree-id391 . -7) (undo-tree-id392 . -7) (undo-tree-id393 . -7) (undo-tree-id394 . -7) (undo-tree-id395 . -7) (undo-tree-id396 . -7) (undo-tree-id397 . -7) (undo-tree-id398 . -7) (undo-tree-id399 . -7) (undo-tree-id400 . -7) (undo-tree-id401 . -7) (undo-tree-id402 . -7) (undo-tree-id403 . -7) (undo-tree-id404 . -7) (undo-tree-id405 . -7) (undo-tree-id406 . -7) (undo-tree-id407 . -7) (undo-tree-id408 . -7) (undo-tree-id409 . -7) (undo-tree-id410 . -7)) (23422 12480 605866 271000) 0 nil]) ((17932 . 17953)) ((#("gs for c/c++ (and jav" 0 21 (fontified t font-lock-fontified t face org-level-3)) . 17932) (undo-tree-id411 . -21) (undo-tree-id412 . -21) (undo-tree-id413 . -21) (undo-tree-id414 . -21) (undo-tree-id415 . -21) (undo-tree-id416 . -21) (undo-tree-id417 . -21) (undo-tree-id418 . -21) (undo-tree-id419 . -21) (undo-tree-id420 . -21) (undo-tree-id421 . -21) (undo-tree-id422 . -21) (undo-tree-id423 . -21) (undo-tree-id424 . -21) (undo-tree-id425 . -21) (undo-tree-id426 . -21) (undo-tree-id427 . -21) (undo-tree-id428 . -21) (undo-tree-id429 . -21) (undo-tree-id430 . -21) (undo-tree-id431 . -21)) (23422 12480 877916 737000) 0 nil]) ((#("h" 0 1 (fontified t font-lock-fontified t face org-level-3)) . -17932) (undo-tree-id235 . -1) (#("s" 0 1 (fontified t font-lock-fontified t face org-level-3)) . -17933) (undo-tree-id236 . -1) 17934) ((17932 . 17934)) (23422 12481 109874 797000) 0 nil]) ((17924 . 17934)) ((#("*** ggtahs" 0 2 (fontified t font-lock-fontified t face (:foreground #28#) keymap #10#) 2 3 (fontified t font-lock-fontified t composition (1 1 #29#) keymap #10# face org-level-3) 3 4 (fontified t font-lock-fontified t keymap #10# face org-level-3) 4 8 (fontified t font-lock-fontified t face org-level-3) 8 9 (fontified t font-lock-fontified t face org-level-3) 9 10 (fontified t font-lock-fontified t face org-level-3)) . 17924) (undo-tree-id432 . -8) (undo-tree-id433 . -8) (undo-tree-id434 . -8) (undo-tree-id435 . -8) (undo-tree-id436 . -10) (undo-tree-id437 . -8) (undo-tree-id438 . -8) (undo-tree-id439 . -8) (undo-tree-id440 . -8) (undo-tree-id441 . -8) (undo-tree-id442 . -8) (undo-tree-id443 . -8) (undo-tree-id444 . -8) (undo-tree-id445 . -8) (undo-tree-id446 . -8) (undo-tree-id447 . -8) (undo-tree-id448 . -8) (undo-tree-id449 . -8) (undo-tree-id450 . -8) (undo-tree-id451 . -8) (undo-tree-id452 . -10) (undo-tree-id453 . -10) (undo-tree-id454 . -10)) (23422 12481 317816 92000) 0 nil]) ((17923 . 17924) (t 23422 11897 275967 51000)) ((#("
" 0 1 (fontified t font-lock-fontified t face org-block-end-line)) . 17923) (undo-tree-id455 . -1) (undo-tree-id456 . -1) (undo-tree-id457 . -1) (undo-tree-id458 . -1) (undo-tree-id459 . -1) (undo-tree-id460 . -1) (undo-tree-id461 . -1) (undo-tree-id462 . -1) (undo-tree-id463 . -1) (undo-tree-id464 . -1) (undo-tree-id465 . -1) (undo-tree-id466 . -1) (undo-tree-id467 . -1) (undo-tree-id468 . -1) (undo-tree-id469 . -1) (undo-tree-id470 . -1) (undo-tree-id471 . -1) (undo-tree-id472 . -1) (undo-tree-id473 . -1) (undo-tree-id474 . -1) (undo-tree-id475 . -1) (undo-tree-id476 . -1) (undo-tree-id477 . -1) (undo-tree-id478 . -1)) (23422 12481 549821 644000) 0 nil]) ((36794 . 37370) (#("     (global-set-key (kbd \"C-M-C\") 'c++-mode)

     (global-set-key (kbd \"C-M-{\") 'c-beginning-of-defun) ; something like matching function
     (global-set-key (kbd \"C-M-}\") 'c-end-of-defun)

     ;;switch between header and src files
     (add-hook 'c-mode-common-hook
     (lambda()
     (local-set-key  (kbd \"C-c h\") 'ff-find-other-file)))


     (add-hook 'c-mode-common-hook
                    (lambda ()
                      (when (derived-mode-p 'c-mode 'c++-mode 'java-mode)
                                (ggtags-mode 1))))

" 0 26 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #30=(org-block)) 26 33 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-string-face . #30#)) 33 73 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #30#) 73 80 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-string-face . #30#)) 80 105 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #30#) 105 107 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-delimiter-face . #30#)) 107 140 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-face . #30#)) 140 166 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #30#) 166 173 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-string-face . #30#)) 173 198 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #30#) 198 200 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-delimiter-face . #30#)) 200 236 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-face . #30#)) 236 277 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #30#) 277 283 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-keyword-face . #30#)) 283 312 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #30#) 312 319 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-string-face . #30#)) 319 402 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #30#) 402 408 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-keyword-face . #30#)) 408 435 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #30#) 435 439 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-keyword-face . #30#)) 439 500 (fontified t font-lock-fontified t src-block t font-lock-multiline t face #30#) 500 537 (fontified t font-lock-fontified t src-block t font-lock-multiline t face #30#) 537 538 (fontified t font-lock-fontified t src-block t font-lock-multiline t face #30#)) . 36794) (undo-tree-id210 . -345) (undo-tree-id211 . -345) (undo-tree-id212 . 193) (undo-tree-id214 . 193) (undo-tree-id216 . 193) (undo-tree-id218 . 193) (undo-tree-id220 . 193) (undo-tree-id222 . 193) (undo-tree-id224 . 193) (undo-tree-id226 . 193) 37139) ((36794 . 37332) (#("     (global-set-key (kbd \"C-M-C\") 'c++-mode)

     (global-set-key (kbd \"C-M-{\") 'c-beginning-of-defun) ; something like matching function
     (global-set-key (kbd \"C-M-}\") 'c-end-of-defun)

     ;;switch between header and src files
     (add-hook 'c-mode-common-hook
     (lambda()
     (local-set-key  (kbd \"C-c h\") 'ff-find-other-file)))

     ;; enable gg-tags for tags in c++
     (add-hook 'c-mode-common-hook
                    (lambda ()
                      (when (derived-mode-p 'c-mode 'c++-mode 'java-mode)
                                (ggtags-mode 1))))

" 0 26 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #31=(org-block)) 26 33 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-string-face . #31#)) 33 73 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #31#) 73 80 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-string-face . #31#)) 80 105 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #31#) 105 107 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-delimiter-face . #31#)) 107 140 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-face . #31#)) 140 166 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #31#) 166 173 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-string-face . #31#)) 173 198 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #31#) 198 200 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-delimiter-face . #31#)) 200 236 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-face . #31#)) 236 277 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #31#) 277 283 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-keyword-face . #31#)) 283 312 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #31#) 312 319 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-string-face . #31#)) 319 350 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #31#) 350 353 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-delimiter-face . #31#)) 353 384 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-face . #31#)) 384 440 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #31#) 440 446 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-keyword-face . #31#)) 446 473 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #31#) 473 474 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #32=(font-lock-keyword-face . #31#)) 474 477 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #32#) 477 575 (fontified t font-lock-fontified t src-block t font-lock-multiline t face #31#) 575 576 (fontified t font-lock-fontified t src-block t font-lock-multiline t face #31#)) . 36794) (undo-tree-id479 . 576) (undo-tree-id480 . 576) (undo-tree-id481 . 193) (undo-tree-id482 . 193) (undo-tree-id483 . 193) (undo-tree-id484 . -344) (undo-tree-id485 . -344) (undo-tree-id486 . -383) (undo-tree-id487 . -383) (undo-tree-id488 . -418) (undo-tree-id489 . -418) (undo-tree-id490 . -449) (undo-tree-id491 . -449) (undo-tree-id492 . -523) (undo-tree-id493 . -523) (undo-tree-id494 . -574) (undo-tree-id495 . -574) (undo-tree-id496 . -575) (undo-tree-id497 . -575)) (23422 12481 782613 558000) 0 nil]) ((36794 . 37332) (#("     (global-set-key (kbd \"C-M-C\") 'c++-mode)

     (global-set-key (kbd \"C-M-{\") 'c-beginning-of-defun) ; something like matching function
     (global-set-key (kbd \"C-M-}\") 'c-end-of-defun)

     ;;switch between header and src files
     (add-hook 'c-mode-common-hook
     (lambda()
     (local-set-key  (kbd \"C-c h\") 'ff-find-other-file)))


     (add-hook 'c-mode-common-hook
	    (lambda ()
	      (when (derived-mode-p 'c-mode 'c++-mode 'java-mode)
		(ggtags-mode 1))))
  
" 0 26 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #33=(org-block)) 26 33 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-string-face . #33#)) 33 73 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #33#) 73 80 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-string-face . #33#)) 80 105 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #33#) 105 106 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #34=(font-lock-comment-delimiter-face . #33#)) 106 107 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #34#) 107 140 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-face . #33#)) 140 166 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #33#) 166 173 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-string-face . #33#)) 173 198 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #33#) 198 200 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-delimiter-face . #33#)) 200 236 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-face . #33#)) 236 241 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #33#) 241 277 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #33#) 277 283 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-keyword-face . #33#)) 283 312 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #33#) 312 319 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-string-face . #33#)) 319 351 (fontified t font-lock-fontified t src-block t help-echo nil font-lock-multiline t face #33#) 351 387 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #33#) 387 393 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-keyword-face . #33#)) 393 405 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #33#) 405 409 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-keyword-face . #33#)) 409 474 (fontified t font-lock-fontified t src-block t font-lock-multiline t face #33#) 474 475 (fontified t font-lock-fontified t src-block t font-lock-multiline t face #33#) 475 479 (fontified t font-lock-fontified t src-block t font-lock-multiline t face #33#) 479 480 (fontified t font-lock-fontified t src-block t font-lock-multiline t face #33#)) . 36794) (undo-tree-id227 . -351) (undo-tree-id228 . -346) (undo-tree-id229 . -345) (undo-tree-id230 . -351) (undo-tree-id231 . -351) 37139) ((36794 . 37274) (#("     (global-set-key (kbd \"C-M-C\") 'c++-mode)

     (global-set-key (kbd \"C-M-{\") 'c-beginning-of-defun) ; something like matching function
     (global-set-key (kbd \"C-M-}\") 'c-end-of-defun)

     ;;switch between header and src files
     (add-hook 'c-mode-common-hook
     (lambda()
     (local-set-key  (kbd \"C-c h\") 'ff-find-other-file)))


     (add-hook 'c-mode-common-hook
                    (lambda ()
                      (when (derived-mode-p 'c-mode 'c++-mode 'java-mode)
                                (ggtags-mode 1))))

" 0 26 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #35=(org-block)) 26 33 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-string-face . #35#)) 33 73 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #35#) 73 80 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-string-face . #35#)) 80 105 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #35#) 105 107 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-delimiter-face . #35#)) 107 140 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-face . #35#)) 140 166 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #35#) 166 173 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-string-face . #35#)) 173 198 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #35#) 198 200 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-delimiter-face . #35#)) 200 236 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-face . #35#)) 236 277 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #35#) 277 283 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-keyword-face . #35#)) 283 312 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #35#) 312 319 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-string-face . #35#)) 319 402 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #35#) 402 408 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-keyword-face . #35#)) 408 435 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #35#) 435 439 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-keyword-face . #35#)) 439 474 (fontified t font-lock-fontified t src-block t font-lock-multiline t face #35#) 474 500 (fontified t font-lock-fontified t src-block t font-lock-multiline t face #35#) 500 537 (fontified t font-lock-fontified t src-block t font-lock-multiline t face #35#) 537 538 (fontified t font-lock-fontified t src-block t font-lock-multiline t face #35#)) . 36794) (undo-tree-id498 . 193) (undo-tree-id499 . -345) (undo-tree-id500 . 193) (undo-tree-id501 . -345) (undo-tree-id502 . -345)) (23422 12482 96388 788000) 0 nil]) ((37138 . 37139)) ((#("
" 0 1 (fontified t font-lock-fontified t src-block t help-echo nil font-lock-multiline t face (org-block))) . 37138) (undo-tree-id503 . -1) (undo-tree-id504 . -1) (undo-tree-id505 . -1) (undo-tree-id506 . -1)) (23422 12482 545762 911000) 0 nil]) ((#(")" 0 1 (fontified t rear-nonsticky t font-lock-fontified t font-lock-multiline t face (org-block) src-block t)) . -37272) (undo-tree-id232 . -1) (undo-tree-id233 . 1) (undo-tree-id234 . -1) 37273) ((37272 . 37273)) (23422 12482 873741 58000) 0 nil]) ((nil rear-nonsticky nil 37272 . 37273) (nil fontified nil 37144 . 37273) (37144 . 37273)) ((#("(add-hook 'c-mode-common-hook
	    (lambda ()
	      (when (derived-mode-p 'c-mode 'c++-mode 'java-mode)
		(ggtags-mode 1))))
  )" 0 36 (fontified nil font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #36=(org-block)) 36 42 (fontified nil font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-keyword-face . #36#)) 42 54 (fontified nil font-lock-fontified t help-echo nil src-block t font-lock-multiline t face #36#) 54 58 (fontified nil font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-keyword-face . #36#)) 58 123 (fontified nil font-lock-fontified t src-block t font-lock-multiline t face #36#) 123 124 (fontified nil font-lock-fontified t src-block t font-lock-multiline t face #36#) 124 128 (fontified nil font-lock-fontified t src-block t font-lock-multiline t face #36#) 128 129 (fontified nil rear-nonsticky nil font-lock-fontified t src-block t font-lock-multiline t face #36#)) . 37144) (undo-tree-id507 . -129) (undo-tree-id508 . 1) (undo-tree-id509 . -129) (undo-tree-id510 . -129) (undo-tree-id511 . -129) (undo-tree-id512 . -129) (nil rear-nonsticky t 37272 . 37273)) (23422 12483 237934 628000) 0 nil] [nil nil ((nil rear-nonsticky nil 37272 . 37273) (nil fontified nil 37144 . 37273) (37144 . 37273)) ((#("(add-hook 'c-mode-common-hook
	    (lambda ()
	      (when (derived-mode-p 'c-mode 'c++-mode 'java-mode)
		(ggtags-mode 1))))
  )" 0 36 (fontified nil font-lock-fontified t font-lock-multiline t face #37=(org-block) help-echo nil src-block t) 36 42 (fontified nil font-lock-fontified t font-lock-multiline t face (font-lock-keyword-face . #37#) help-echo nil src-block t) 42 54 (fontified nil font-lock-fontified t font-lock-multiline t face #37# help-echo nil src-block t) 54 58 (fontified nil font-lock-fontified t font-lock-multiline t face (font-lock-keyword-face . #37#) help-echo nil src-block t) 58 128 (fontified nil font-lock-fontified t font-lock-multiline t face #37# src-block t) 128 129 (fontified nil rear-nonsticky nil font-lock-fontified t font-lock-multiline t face #37# src-block t)) . 37144) (undo-tree-id174 . 129) (undo-tree-id175 . -129) (undo-tree-id176 . 23) (undo-tree-id177 . -106) (undo-tree-id178 . 82) (undo-tree-id179 . 23) (undo-tree-id180 . -47) (undo-tree-id181 . 98) (undo-tree-id182 . 82) (undo-tree-id183 . -31) (undo-tree-id184 . 98) (undo-tree-id185 . 129) (undo-tree-id186 . 98) (undo-tree-id187 . 129) (undo-tree-id188 . -31) (undo-tree-id189 . 82) (undo-tree-id190 . 98) (undo-tree-id191 . -47) (undo-tree-id192 . 23) (undo-tree-id193 . 82) (undo-tree-id194 . -106) (undo-tree-id195 . 23) (undo-tree-id196 . -129) (undo-tree-id197 . 23) (undo-tree-id198 . -106) (undo-tree-id199 . 82) (undo-tree-id200 . 23) (undo-tree-id201 . -47) (undo-tree-id202 . 98) (undo-tree-id203 . 82) (undo-tree-id204 . -31) (undo-tree-id205 . 129) (undo-tree-id206 . 98) (undo-tree-id207 . 129) (undo-tree-id208 . -129) (undo-tree-id209 . -129) (nil rear-nonsticky t 37272 . 37273)) (23422 11871 887239 121000) 0 nil] [nil nil ((nil rear-nonsticky nil 37285 . 37286) (nil fontified nil 37157 . 37286) (37157 . 37286) 37144) ((#("(add-hook 'c-mode-common-hook
	    (lambda ()
	      (when (derived-mode-p 'c-mode 'c++-mode 'java-mode)
		(ggtags-mode 1))))
  )" 0 29 (fontified nil font-lock-fontified t font-lock-multiline t face org-block-end-line) 29 30 (fontified nil face org-block-end-line) 30 126 (fontified nil) 126 128 (fontified nil) 128 129 (fontified nil rear-nonsticky nil)) . 37157) (undo-tree-id168 . -129) (undo-tree-id169 . 1) (undo-tree-id170 . -129) (undo-tree-id171 . -129) (undo-tree-id172 . -129) (undo-tree-id173 . -129) (nil fontified t 37187 . 37283) (nil fontified t 37186 . 37187) (nil fontified t 37157 . 37186) (nil rear-nonsticky t 37285 . 37286)) (23422 11858 423611 998000) 0 nil] [nil nil ((nil rear-nonsticky nil 37147 . 37148) (nil fontified nil 37144 . 37148) (37144 . 37148)) ((#("SRC " 0 3 (font-lock-fontified t fontified nil font-lock-multiline t face #38=(org-block) src-block t) 3 4 (font-lock-fontified t fontified nil rear-nonsticky nil font-lock-multiline t face #38# src-block t)) . 37144) (undo-tree-id163 . -4) (undo-tree-id164 . 4) (undo-tree-id165 . -4) (undo-tree-id166 . -4) (undo-tree-id167 . -4) (nil rear-nonsticky t 37147 . 37148)) (23422 11855 63700 525000) 0 nil]) ((37139 . 37144)) ((#("     " 0 5 (fontified t font-lock-fontified t src-block t help-echo nil font-lock-multiline t face (org-block))) . 37139) (undo-tree-id513 . -5) (undo-tree-id514 . -5) (undo-tree-id515 . -5) (undo-tree-id516 . -5) (undo-tree-id517 . -5) (undo-tree-id518 . -5) (undo-tree-id519 . -5)) (23422 12483 535417 285000) 0 nil]) ((37137 . 37139)) ((#("

" 0 1 (fontified t font-lock-fontified t src-block t help-echo nil font-lock-multiline t face #39=(org-block)) 1 2 (fontified t font-lock-fontified t src-block t help-echo nil font-lock-multiline t face #39#)) . 37137) (undo-tree-id520 . -2) (undo-tree-id521 . -2) (undo-tree-id522 . -2) (undo-tree-id523 . 1) (undo-tree-id524 . 1) (undo-tree-id525 . -1) (undo-tree-id526 . 1) (undo-tree-id527 . 1) (undo-tree-id528 . -1) (undo-tree-id529 . -1) (undo-tree-id530 . 1) (undo-tree-id531 . -2) (undo-tree-id532 . -2) (undo-tree-id533 . -2) (undo-tree-id534 . -2) (undo-tree-id535 . -2)) (23422 12483 838030 358000) 0 nil]) ((1984 . 1985)) nil (23422 12484 214744 75000) 0 nil]) ((#(" " 0 1 (fontified t face org-level-2)) . -1984) (undo-tree-id157 . -1) 1985) nil (23422 11855 63822 665000) 0 nil]) ((1973 . 1989)) nil (23422 11855 63843 494000) 0 nil]) ((#("v" 0 1 (fontified t face org-level-2)) . -1973) (undo-tree-id158 . -1) (#("o" 0 1 (fontified t face org-level-2)) . -1974) (undo-tree-id159 . -1) 1975) nil (23422 11855 63887 69000) 0 nil]) ((1973 . 1975)) nil (23422 11855 63934 866000) 0 nil]) ((#("o" 0 1 (fontified t face org-level-2)) . -1973) (undo-tree-id160 . -1) (#("n" 0 1 (fontified t face org-level-2)) . -1974) (undo-tree-id161 . -1) (#("-" 0 1 (fontified t face org-level-2)) . -1975) (undo-tree-id162 . -1) 1976) nil (23422 11855 63995 856000) 0 nil]) ((1973 . 1976)) nil (23422 11855 64022 257000) 0 nil]) ((1970 . 1973)) nil (23422 11855 64038 48000) 0 nil]) ((1969 . 1970) (t 23421 58224 129948 800000)) nil (23422 11855 64056 626000) 0 nil] [nil nil ((60581 . 60582) (t 23421 58224 129948 800000)) ((#("z" 0 1 (fontified t face org-level-2)) . 60581) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (undo-tree-id155 . 1) (undo-tree-id156 . -1)) (23422 11824 432081 560000) 0 nil] [nil nil ((60581 . 60600) (t 23421 58224 129948 800000)) ((#(" (Also before close" 0 19 (fontified t face org-level-2)) . 60581) (undo-tree-id111 . -19) (undo-tree-id112 . 19) (undo-tree-id113 . -1) (undo-tree-id114 . 18) (undo-tree-id115 . -2) (undo-tree-id116 . 17) (undo-tree-id117 . -3) (undo-tree-id118 . 16) (undo-tree-id119 . -4) (undo-tree-id120 . 15) (undo-tree-id121 . -5) (undo-tree-id122 . 14) (undo-tree-id123 . -6) (undo-tree-id124 . 13) (undo-tree-id125 . -7) (undo-tree-id126 . 12) (undo-tree-id127 . -8) (undo-tree-id128 . 11) (undo-tree-id129 . -9) (undo-tree-id130 . 10) (undo-tree-id131 . -10) (undo-tree-id132 . 9) (undo-tree-id133 . -11) (undo-tree-id134 . 8) (undo-tree-id135 . -12) (undo-tree-id136 . 7) (undo-tree-id137 . -13) (undo-tree-id138 . 6) (undo-tree-id139 . -14) (undo-tree-id140 . 5) (undo-tree-id141 . -15) (undo-tree-id142 . 4) (undo-tree-id143 . -16) (undo-tree-id144 . 3) (undo-tree-id145 . -17) (undo-tree-id146 . 2) (undo-tree-id147 . -18) (undo-tree-id148 . -19) (undo-tree-id149 . -19) (undo-tree-id150 . 1) (undo-tree-id151 . -19)) (23422 11823 528561 243000) 0 nil]) ((1796 . 1799)) nil (23422 11824 432312 730000) 0 nil]) ((#("1" 0 1 (fontified t face (bold) font-lock-multiline t org-emphasis t)) . -1796) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . 1) (undo-tree-id102 . -1) 1797) nil (23421 58224 114038 529000) 0 nil]) ((1781 . 1797)) nil (23421 58224 114072 244000) 0 nil]) ((1778 . 1781)) nil (23421 58224 114089 796000) 0 nil]) ((#("M" 0 1 (fontified t)) . -1778) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) 1779) nil (23421 58224 114145 276000) 0 nil]) ((1758 . 1779)) nil (23421 58224 114169 915000) 0 nil]) ((#("
" 0 1 (fontified t)) . -1758) (undo-tree-id107 . -1) (#(" " 0 1 (fontified t font-lock-fontified t)) . -1759) (undo-tree-id108 . -1) (#(" " 0 1 (fontified t font-lock-fontified t)) . -1760) (undo-tree-id109 . -1) (#(" " 0 1 (fontified t font-lock-fontified t)) . -1761) (undo-tree-id110 . -1) 1762) nil (23421 58224 114235 290000) 0 nil] [nil ([nil ([nil nil ((#("SRC " 0 4 (fontified t font-lock-fontified t font-lock-multiline t face org-block-begin-line)) . -1770) (undo-tree-id65 . -4) (undo-tree-id66 . -4) (undo-tree-id67 . -4) (undo-tree-id68 . -4) 1774) ((1770 . 1774)) (23421 58202 322089 750000) 0 nil]) ((#("?" 0 1 (fontified nil)) . 1774) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (1762 . 1792) (#("<s" 0 2 (fontified t)) . -1762) (undo-tree-id71 . -2) (undo-tree-id72 . 2) (undo-tree-id73 . -1) (undo-tree-id74 . -2) (undo-tree-id75 . -2) (undo-tree-id76 . 1) (undo-tree-id77 . -2) 1764) ((1762 . 1764) (#("#+BEGIN_SRC ?
   
   #+END_SRC" 0 8 (fontified nil font-lock-fontified t font-lock-multiline t face org-block-begin-line) 8 12 (fontified nil font-lock-fontified t font-lock-multiline t face org-block-begin-line) 12 13 (fontified nil) 13 14 (fontified nil font-lock-fontified t font-lock-multiline t face org-block-begin-line) 14 17 (fontified nil font-lock-fontified t font-lock-multiline t face #41=(:inherit #40#)) 17 18 (fontified nil font-lock-fontified t font-lock-multiline t face #41#) 18 21 (fontified nil font-lock-fontified t face org-block-end-line font-lock-multiline t) 21 30 (fontified nil font-lock-fontified t face org-block-end-line font-lock-multiline t)) . 1762) (undo-tree-id78 . -12) (undo-tree-id79 . -30) (undo-tree-id80 . -30) (undo-tree-id81 . 17) (undo-tree-id82 . 30) (undo-tree-id83 . -12) (undo-tree-id84 . 17) (undo-tree-id85 . 17) (undo-tree-id86 . -8) (undo-tree-id87 . 17) (undo-tree-id88 . 17) (undo-tree-id89 . -12) (1774 . 1775)) (23421 58202 322821 925000) 0 nil]) ((1762 . 1764)) ((#("<s" 0 2 (fontified t)) . 1762) (undo-tree-id90 . -2) (undo-tree-id91 . 2) (undo-tree-id92 . -1) (undo-tree-id93 . 1) (undo-tree-id94 . -2) (undo-tree-id95 . -2) (undo-tree-id96 . -2) (undo-tree-id97 . -2)) (23421 58202 555474 916000) 0 nil]) ((1758 . 1762)) nil (23421 58202 754453 25000) 0 nil]) ((1740 . 1758)) nil (23421 58202 322293 673000) 0 nil]) ((1719 . 1740)) nil (23421 58202 322308 984000) 0 nil]) ((1698 . 1719)) nil (23421 58202 322324 52000) 0 nil]) ((1695 . 1698)) nil (23421 58202 322338 834000) 0 nil]) ((1694 . 1695) (t 23421 58139 334381 892000)) nil (23421 58202 322357 303000) 0 nil] [nil ([nil ([nil ([nil ([nil nil ((#("root@localhost:" 0 15 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-string-face org-block))) . 12570) (undo-tree-id25 . -15) (undo-tree-id26 . -15) (undo-tree-id27 . -15) (undo-tree-id28 . -15) (undo-tree-id29 . 15) (undo-tree-id30 . 15) (undo-tree-id31 . 11) (undo-tree-id32 . -4) (undo-tree-id33 . 1) (undo-tree-id34 . 11) (undo-tree-id35 . -14) (undo-tree-id36 . 1) (undo-tree-id37 . -15) (undo-tree-id38 . -15) (undo-tree-id39 . -15) (undo-tree-id40 . -15) (undo-tree-id41 . 15) (undo-tree-id42 . 15) (undo-tree-id43 . 11) (undo-tree-id44 . -4) (undo-tree-id45 . 15) (undo-tree-id46 . 11)) ((12570 . 12585) (t 23421 58120 675917 669000)) (23421 58120 661010 176000) 0 nil]) ((#("x" 0 1 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-string-face org-block))) . 12585) (undo-tree-id47 . 1) (undo-tree-id48 . 1) (undo-tree-id49 . 1) (undo-tree-id50 . 1) (undo-tree-id51 . 1) (undo-tree-id52 . 1) (t 23421 58114 706089 90000)) ((12585 . 12586)) (23421 58134 509036 645000) 0 nil]) ((#("/" 0 1 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-string-face org-block))) . 12564) (undo-tree-id21 . -1) (undo-tree-id22 . 1) (undo-tree-id23 . 1) (undo-tree-id24 . 1)) ((12564 . 12565)) (23421 58134 860492 376000) 0 nil]) ((12586 . 12587)) ((#("x" 0 1 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-string-face org-block))) . 12586) (undo-tree-id53 . 1) (undo-tree-id54 . 1) (undo-tree-id55 . 1) (undo-tree-id56 . 1) (undo-tree-id57 . 1) (undo-tree-id58 . 1) (undo-tree-id59 . 1) (undo-tree-id60 . 1)) (23421 58135 388458 398000) 0 nil] [nil nil ((#("root@localhost:" 0 15 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-string-face org-block))) . -12571) (undo-tree-id0 . -15) (undo-tree-id1 . 15) (undo-tree-id2 . 15) (undo-tree-id3 . 15) (undo-tree-id4 . -15) (undo-tree-id5 . 11) (undo-tree-id6 . 15) (undo-tree-id7 . -4) (undo-tree-id8 . 1) (undo-tree-id9 . 11) (undo-tree-id10 . -14) (undo-tree-id11 . 1) (undo-tree-id12 . -15) 12586) ((12571 . 12586) (t 23421 58094 993655 132000)) (23421 58094 981733 375000) 0 nil]) ((12569 . 12570) (t 23421 58110 802201 189000)) ((#(":" 0 1 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-string-face org-block))) . 12569) (undo-tree-id61 . 1) (undo-tree-id62 . 1) (undo-tree-id63 . 1) (undo-tree-id64 . 1)) (23421 58136 140485 495000) 0 nil]) nil nil (23421 58137 467721 985000) 0 nil] #42# 33459 144 nil)