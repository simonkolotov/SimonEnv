"1d7edfddf6cfcba955f91c6a92e8ff15c546666e"
[cl-struct-undo-tree [nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil nil ((1 . 4)) ((#("ZZZ" 0 3 (fontified t)) . 1) (undo-tree-id249 . 3) (undo-tree-id250 . 2) (undo-tree-id251 . 1) (undo-tree-id252 . 3)) (23120 21342 188266 493000) 0 (:visualizer [0 1 0 #<marker in no buffer>])] [nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil (#1=[nil nil ((#("(add-hook 'python-mode-hook
  (lambda ()
    (my-indent-mode))
  )" 0 22 (fontified t) 22 31 (fontified t) 31 37 (fontified t face font-lock-keyword-face) 37 66 (fontified t)) . 6549) (undo-tree-id1894 . -66) (undo-tree-id1895 . -22) (undo-tree-id1896 . -66) (undo-tree-id1897 . 1) (undo-tree-id1898 . -66) (undo-tree-id1899 . 66) (undo-tree-id1900 . -1) 6615) nil (23125 44130 928986 952000) 0 nil]) ((#("(global-set-key (kbd \"C-M-p\") 'python-mode)" 0 21 (fontified t) 21 28 (fontified t face font-lock-string-face) 28 43 (fontified t)) . 25) (undo-tree-id1901 . -31) (undo-tree-id1902 . -43) (undo-tree-id1903 . -31) (undo-tree-id1904 . 1) (undo-tree-id1905 . -43) (undo-tree-id1906 . 43) (undo-tree-id1907 . -1) (undo-tree-id1908 . -43) 68) nil (23125 44130 929025 286000) 0 nil]) ((#(";;;;;;;;;;;;; python-mode - I'll try using the built-in mode that comes with emacs
;;;;;;;(setq py-install-directory (concat emacs-git \"Plugins/python-mode.el-6.1.2\"))
;;;;;;;(add-to-list 'load-path py-install-directory)
;;;;;;;(setq py-outline-minor-mode-p nil)
;;;;;;;(require 'python-mode)" 0 14 (face font-lock-comment-delimiter-face fontified t) 14 25 (face font-lock-comment-face fontified t) 25 83 (fontified t face font-lock-comment-face) 83 90 (fontified t face font-lock-comment-delimiter-face) 90 108 (fontified t face font-lock-comment-face) 108 168 (fontified t face font-lock-comment-face) 168 175 (fontified t face font-lock-comment-delimiter-face) 175 201 (fontified t face font-lock-comment-face) 201 221 (fontified t face font-lock-comment-face) 221 228 (fontified t face font-lock-comment-delimiter-face) 228 263 (fontified t face font-lock-comment-face) 263 270 (fontified t face font-lock-comment-delimiter-face) 270 292 (fontified t face font-lock-comment-face)) . 4307) (undo-tree-id1909 . 292) (undo-tree-id1910 . 267) (undo-tree-id1911 . -292) (undo-tree-id1912 . -292) (undo-tree-id1913 . 1) (undo-tree-id1914 . -292) (undo-tree-id1915 . 22) (undo-tree-id1916 . -271) 4599) nil (23125 44130 929057 203000) 0 nil]) ((#("




" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t)) . -1) (undo-tree-id1917 . 5) (undo-tree-id1918 . 5) (undo-tree-id1919 . 5) (undo-tree-id1920 . 5) (undo-tree-id1921 . 5) (undo-tree-id1922 . 5) (undo-tree-id1923 . 5) (undo-tree-id1924 . 5) (undo-tree-id1925 . 5) (undo-tree-id1926 . 5) (undo-tree-id1927 . 5) (undo-tree-id1928 . 5) (undo-tree-id1929 . 5) (undo-tree-id1930 . 5) (undo-tree-id1931 . 5) (undo-tree-id1932 . 5) (undo-tree-id1933 . 5) (undo-tree-id1934 . 5) (undo-tree-id1935 . -3) (undo-tree-id1936 . -2) (undo-tree-id1937 . 5) (undo-tree-id1938 . 5) (undo-tree-id1939 . 5) (undo-tree-id1940 . 5) (undo-tree-id1941 . -3) (undo-tree-id1942 . 5) (undo-tree-id1943 . 5) (undo-tree-id1944 . 5) (undo-tree-id1945 . 5) (undo-tree-id1946 . 5) (undo-tree-id1947 . 5) (undo-tree-id1948 . 5) (undo-tree-id1949 . 5) (undo-tree-id1950 . 5) (undo-tree-id1951 . 5) (undo-tree-id1952 . 5) (undo-tree-id1953 . 5) (undo-tree-id1954 . 5) (undo-tree-id1955 . 5) (undo-tree-id1956 . -3) (undo-tree-id1957 . 5) (undo-tree-id1958 . 5) (undo-tree-id1959 . -5) (undo-tree-id1960 . -5) 6) nil (23125 44130 929186 840000) 0 nil]) ((#("; Change C-arrows to be the same as M-f/b
(global-set-key (kbd \"C-<right>\")   'forward-word)
(global-set-key (kbd \"C-<kp-right>\")   'forward-word)

(global-set-key (kbd \"C-<left>\")   'backward-word)
(global-set-key (kbd \"C-<kp-left>\")   'backward-word)

(global-set-key (kbd \"<C-kp-home>\")   'beginning-of-buffer)
(global-set-key (kbd \"<C-kp-end>\")   'end-of-buffer)

(global-set-key (kbd \"<C-kp-delete>\")   'kill-word)


; Set M-arrows to be the same as C-arrows, but by full words
(global-set-key (kbd \"M-<kp-right>\")   'right-word)
(global-set-key (kbd \"M-<kp-left>\")   'left-word)" 0 2 (fontified t face font-lock-comment-delimiter-face) 2 42 (fontified t face font-lock-comment-face) 42 63 (fontified t) 63 74 (fontified t face font-lock-string-face) 74 114 (fontified t) 114 128 (fontified t face font-lock-string-face) 128 164 (fontified t) 164 169 (fontified t) 169 179 (fontified t face font-lock-string-face) 179 199 (fontified t) 199 220 (fontified t) 220 233 (fontified t face font-lock-string-face) 233 262 (fontified t) 262 275 (fontified t) 275 288 (fontified t face font-lock-string-face) 288 314 (fontified t) 314 330 (fontified t) 330 335 (fontified t) 335 347 (fontified t face font-lock-string-face) 347 367 (fontified t) 367 389 (fontified t) 389 404 (fontified t face font-lock-string-face) 404 417 (fontified t) 417 420 (fontified t) 420 422 (fontified t) 422 424 (fontified t face font-lock-comment-delimiter-face) 424 483 (fontified t face font-lock-comment-face) 483 496 (fontified t) 496 500 (fontified t) 500 504 (fontified t) 504 518 (fontified t face font-lock-string-face) 518 535 (fontified t) 535 542 (fontified t) 542 556 (fontified t) 556 569 (face font-lock-string-face fontified t) 569 584 (fontified t)) . 1) (undo-tree-id1961 . 584) (undo-tree-id1962 . 584) (undo-tree-id1963 . 584) (undo-tree-id1964 . 584) (undo-tree-id1965 . 584) (undo-tree-id1966 . 584) (undo-tree-id1967 . 584) (undo-tree-id1968 . 584) (undo-tree-id1969 . 584) (undo-tree-id1970 . 584) (undo-tree-id1971 . 584) (undo-tree-id1972 . 584) (undo-tree-id1973 . 584) (undo-tree-id1974 . 584) (undo-tree-id1975 . 584) (undo-tree-id1976 . 584) (undo-tree-id1977 . 584) (undo-tree-id1978 . 584) (undo-tree-id1979 . 584) (undo-tree-id1980 . 584) (undo-tree-id1981 . 584) (undo-tree-id1982 . 584) (undo-tree-id1983 . 584) (undo-tree-id1984 . 584) (undo-tree-id1985 . 584) (undo-tree-id1986 . 584) (undo-tree-id1987 . 584) (undo-tree-id1988 . 584) (undo-tree-id1989 . 584) (undo-tree-id1990 . 584) (undo-tree-id1991 . 584) (undo-tree-id1992 . 584) (undo-tree-id1993 . 584) (undo-tree-id1994 . 584) (undo-tree-id1995 . 584) (undo-tree-id1996 . 584) (undo-tree-id1997 . -584) (undo-tree-id1998 . -584) (undo-tree-id1999 . 1) (undo-tree-id2000 . -584) (undo-tree-id2001 . 49) (undo-tree-id2002 . -536) 585) nil (23125 44130 929316 436000) 0 nil]) ((#("; Command History Completion
(define-key minibuffer-local-map (kbd \"M-p\") 'previous-complete-history-element)
(define-key minibuffer-local-map (kbd \"M-n\") 'next-complete-history-element)
(define-key minibuffer-local-map (kbd \"<up>\") 'previous-complete-history-element)
(define-key minibuffer-local-map (kbd \"<down>\") 'next-complete-history-element)" 0 2 (fontified t face font-lock-comment-delimiter-face) 2 29 (fontified t face font-lock-comment-face) 29 67 (fontified t) 67 72 (fontified t face font-lock-string-face) 72 110 (fontified t) 110 112 (fontified t) 112 148 (fontified t) 148 153 (fontified t face font-lock-string-face) 153 187 (fontified t) 187 225 (fontified t) 225 227 (fontified t face font-lock-string-face) 227 231 (fontified t face font-lock-string-face) 231 269 (fontified t) 269 280 (fontified t) 280 307 (fontified t) 307 315 (fontified t face font-lock-string-face) 315 333 (fontified t) 333 348 (fontified t)) . 588) (undo-tree-id2003 . -110) (undo-tree-id2004 . -348) (undo-tree-id2005 . -348) (undo-tree-id2006 . 1) (undo-tree-id2007 . -348) (undo-tree-id2008 . 79) (undo-tree-id2009 . -270) 936 (t 23120 24050 134838 820000)) nil (23125 44130 929353 961000) 0 nil]) ((#("
" 0 1 (fontified t)) . 1) (undo-tree-id1684 . 1) (undo-tree-id1685 . 1) (undo-tree-id1686 . 1) (undo-tree-id1687 . 1) (undo-tree-id1688 . 1) (undo-tree-id1689 . 1) (undo-tree-id1690 . 1) (undo-tree-id1691 . 1) (undo-tree-id1692 . 1) (undo-tree-id1693 . 1) (undo-tree-id1694 . 1) (undo-tree-id1695 . 1) (undo-tree-id1696 . 1) (undo-tree-id1697 . 1) (undo-tree-id1698 . 1) (undo-tree-id1699 . 1) (undo-tree-id1700 . 1) (undo-tree-id1701 . 1) (undo-tree-id1702 . 1) (undo-tree-id1703 . 1) (undo-tree-id1704 . 1) (undo-tree-id1705 . 1) (undo-tree-id1706 . 1) (undo-tree-id1707 . 1) (undo-tree-id1708 . 1) (undo-tree-id1709 . 1) (undo-tree-id1710 . 1) (undo-tree-id1711 . 1) (undo-tree-id1712 . 1) (undo-tree-id1713 . 1) (undo-tree-id1714 . 1) (undo-tree-id1715 . 1) (undo-tree-id1716 . 1) (undo-tree-id1717 . 1) (undo-tree-id1718 . 1) (undo-tree-id1719 . 1) (#("
" 0 1 (fontified t)) . 1) (undo-tree-id1720 . 1) (undo-tree-id1721 . 1) (undo-tree-id1722 . 1) (undo-tree-id1723 . 1) (undo-tree-id1724 . 1) (undo-tree-id1725 . 1) (undo-tree-id1726 . 1) (undo-tree-id1727 . 1) (undo-tree-id1728 . 1) (undo-tree-id1729 . 1) (undo-tree-id1730 . 1) (undo-tree-id1731 . 1) (undo-tree-id1732 . 1) (undo-tree-id1733 . 1) (undo-tree-id1734 . 1) (undo-tree-id1735 . 1) (undo-tree-id1736 . 1) (undo-tree-id1737 . 1) (undo-tree-id1738 . 1) (undo-tree-id1739 . 1) (undo-tree-id1740 . 1) (undo-tree-id1741 . 1) (undo-tree-id1742 . 1) (undo-tree-id1743 . 1) (undo-tree-id1744 . 1) (undo-tree-id1745 . 1) (undo-tree-id1746 . 1) (undo-tree-id1747 . 1) (undo-tree-id1748 . 1) (undo-tree-id1749 . 1) (undo-tree-id1750 . 1) (undo-tree-id1751 . 1) (undo-tree-id1752 . 1) (undo-tree-id1753 . 1) (#("
" 0 1 (fontified t)) . 1) (undo-tree-id1754 . 1) (undo-tree-id1755 . 1) (undo-tree-id1756 . 1) (undo-tree-id1757 . 1) (undo-tree-id1758 . 1) (undo-tree-id1759 . 1) (undo-tree-id1760 . 1) (undo-tree-id1761 . 1) (undo-tree-id1762 . 1) (undo-tree-id1763 . 1) (undo-tree-id1764 . 1) (undo-tree-id1765 . 1) (undo-tree-id1766 . 1) (undo-tree-id1767 . 1) (undo-tree-id1768 . 1) (undo-tree-id1769 . 1) (undo-tree-id1770 . 1) (undo-tree-id1771 . 1) (undo-tree-id1772 . 1) (undo-tree-id1773 . 1) (undo-tree-id1774 . 1) (undo-tree-id1775 . 1) (undo-tree-id1776 . 1) (undo-tree-id1777 . 1) (undo-tree-id1778 . 1) (undo-tree-id1779 . 1) (undo-tree-id1780 . 1) (undo-tree-id1781 . 1) (undo-tree-id1782 . 1) (undo-tree-id1783 . 1) (undo-tree-id1784 . 1) (undo-tree-id1785 . 1) (undo-tree-id1786 . 1) (undo-tree-id1787 . 1) (#("
" 0 1 (fontified t)) . 1) (undo-tree-id1788 . 1) (undo-tree-id1789 . 1) (undo-tree-id1790 . 1) (undo-tree-id1791 . 1) (undo-tree-id1792 . 1) (undo-tree-id1793 . 1) (undo-tree-id1794 . 1) (undo-tree-id1795 . 1) (undo-tree-id1796 . 1) (undo-tree-id1797 . 1) (undo-tree-id1798 . 1) (undo-tree-id1799 . 1) (undo-tree-id1800 . 1) (undo-tree-id1801 . 1) (undo-tree-id1802 . 1) (undo-tree-id1803 . 1) (undo-tree-id1804 . 1) (undo-tree-id1805 . 1) (undo-tree-id1806 . 1) (undo-tree-id1807 . 1) (undo-tree-id1808 . 1) (undo-tree-id1809 . 1) (undo-tree-id1810 . 1) (undo-tree-id1811 . 1) (undo-tree-id1812 . 1) (undo-tree-id1813 . 1) (undo-tree-id1814 . 1) (undo-tree-id1815 . 1) (undo-tree-id1816 . 1) (undo-tree-id1817 . 1) (undo-tree-id1818 . 1) (undo-tree-id1819 . 1) (undo-tree-id1820 . 1) (undo-tree-id1821 . 1) (#("
" 0 1 (fontified t)) . 1) (undo-tree-id1822 . 1) (undo-tree-id1823 . 1) (undo-tree-id1824 . 1) (undo-tree-id1825 . 1) (undo-tree-id1826 . 1) (undo-tree-id1827 . 1) (undo-tree-id1828 . 1) (undo-tree-id1829 . 1) (undo-tree-id1830 . 1) (undo-tree-id1831 . 1) (undo-tree-id1832 . 1) (undo-tree-id1833 . 1) (undo-tree-id1834 . 1) (undo-tree-id1835 . 1) (undo-tree-id1836 . 1) (undo-tree-id1837 . 1) (undo-tree-id1838 . 1) (undo-tree-id1839 . 1) (undo-tree-id1840 . 1) (undo-tree-id1841 . 1) (undo-tree-id1842 . 1) (undo-tree-id1843 . 1) (undo-tree-id1844 . 1) (undo-tree-id1845 . 1) (undo-tree-id1846 . 1) (undo-tree-id1847 . 1) (undo-tree-id1848 . 1) (undo-tree-id1849 . 1) (undo-tree-id1850 . 1) (undo-tree-id1851 . 1) (undo-tree-id1852 . 1) (undo-tree-id1853 . 1) (undo-tree-id1854 . 1) (undo-tree-id1855 . 1)) nil (23120 24050 122109 296000) 0 nil]) ((#(";;;;;;;;;;KEYBOARD SHORTCUTS
; Undo-Redo
(defalias 'redo 'undo-tree-redo)
(global-set-key (kbd \"C-z\") 'undo) ; 【Ctrl+z】
(global-set-key (kbd \"C-S-z\") 'redo) ; 【Ctrl+Shift+z】;  Mac style

;Disable default exit command (I trip over it accidentally while undoing and redoing too much)
(global-set-key \"\\C-x\\C-c\" nil)

;(global-set-key \"\\C-o\" 'find-file)  ; Open file (Microsoft style)
(global-set-key \"\\C-o\" 'counsel-find-file)  ; Open file (Microsoft style)
(global-set-key (kbd \"C-<f4>\") 'kill-this-buffer) ; Close Buffer (Microsoft style)

(define-key global-map (kbd \"RET\") 'newline-and-indent) ; For programming language modes

(global-set-key (kbd \"M-g\") 'goto-line) ; Goto-line

(global-set-key (kbd \"C-<f9>\") 'compile) ; Compile

(global-set-key \"\\M-`\" 'next-error) ; Next Error (and also next file in dov-git-grep)
(global-set-key \"\\M-~\" 'previous-error) ; Previous Error (and also previous file in dov-git-grep)

(global-set-key (kbd \"C-<tab>\") 'next-buffer) ; C-Tab: Next Buffer
(global-set-key (kbd \"C-S-<iso-lefttab>\") 'previous-buffer) ; C-S-Tab: Previous Buffer
(global-set-key (kbd \"C-S-<tab>\") 'previous-buffer) ; C-S-Tab: Previous Buffer" 0 10 (fontified t face font-lock-comment-delimiter-face) 10 29 (fontified t face font-lock-comment-face) 29 31 (fontified t face font-lock-comment-delimiter-face) 31 41 (fontified t face font-lock-comment-face) 41 95 (fontified t) 95 100 (fontified t face font-lock-string-face) 100 109 (fontified t) 109 112 (fontified t face font-lock-comment-face) 112 120 (fontified t face font-lock-comment-face) 120 141 (fontified t) 141 148 (fontified t face font-lock-string-face) 148 157 (fontified t) 157 186 (fontified t face font-lock-comment-face) 186 187 (fontified t) 187 188 (fontified t face font-lock-comment-delimiter-face) 188 241 (fontified t face font-lock-comment-face) 241 282 (fontified t face font-lock-comment-face) 282 298 (fontified t) 298 308 (fontified t face font-lock-string-face) 308 315 (fontified t) 315 316 (fontified t face font-lock-comment-delimiter-face) 316 375 (fontified t face font-lock-comment-face) 375 382 (fontified t face font-lock-comment-face) 382 393 (fontified t) 393 398 (fontified t) 398 404 (fontified t face font-lock-string-face) 404 426 (fontified t) 426 456 (fontified t face font-lock-comment-face) 456 477 (fontified t) 477 485 (fontified t face font-lock-string-face) 485 499 (fontified t) 499 500 (fontified t) 500 506 (fontified t) 506 529 (fontified t face font-lock-comment-face) 529 539 (face font-lock-comment-face fontified t) 539 540 (fontified t) 540 568 (fontified t) 568 573 (fontified t face font-lock-string-face) 573 596 (fontified t) 596 599 (fontified t face font-lock-comment-face) 599 620 (fontified t face font-lock-comment-face) 620 629 (fontified t face font-lock-comment-face) 629 651 (fontified t) 651 656 (fontified t face font-lock-string-face) 656 670 (fontified t) 670 682 (fontified t face font-lock-comment-face) 682 704 (fontified t) 704 712 (fontified t face font-lock-string-face) 712 724 (fontified t) 724 734 (fontified t face font-lock-comment-face) 734 751 (fontified t) 751 757 (fontified t face font-lock-string-face) 757 771 (fontified t) 771 782 (fontified t face font-lock-comment-face) 782 821 (fontified t face font-lock-comment-face) 821 837 (fontified t) 837 843 (fontified t face font-lock-string-face) 843 861 (fontified t) 861 882 (fontified t face font-lock-comment-face) 882 919 (fontified t face font-lock-comment-face) 919 941 (fontified t) 941 950 (fontified t face font-lock-string-face) 950 956 (fontified t) 956 966 (fontified t) 966 987 (fontified t face font-lock-comment-face) 987 1008 (fontified t) 1008 1027 (fontified t face font-lock-string-face) 1027 1039 (fontified t) 1039 1047 (fontified t) 1047 1074 (face font-lock-comment-face fontified t) 1074 1095 (fontified t) 1095 1099 (fontified t face font-lock-string-face) 1099 1106 (fontified t face font-lock-string-face) 1106 1126 (fontified t) 1126 1129 (fontified t face font-lock-comment-face) 1129 1152 (fontified t face font-lock-comment-face)) . 1) (undo-tree-id1856 . -1152) (undo-tree-id1857 . 1152) (undo-tree-id1858 . 1152) (undo-tree-id1859 . 1152) (undo-tree-id1860 . 1152) (undo-tree-id1861 . 1152) (undo-tree-id1862 . 1152) (undo-tree-id1863 . 1152) (undo-tree-id1864 . 1152) (undo-tree-id1865 . 1152) (undo-tree-id1866 . 1152) (undo-tree-id1867 . 1152) (undo-tree-id1868 . 1152) (undo-tree-id1869 . 1152) (undo-tree-id1870 . 1152) (undo-tree-id1871 . 1152) (undo-tree-id1872 . 1152) (undo-tree-id1873 . 1152) (undo-tree-id1874 . 1152) (undo-tree-id1875 . 1152) (undo-tree-id1876 . 1152) (undo-tree-id1877 . 1152) (undo-tree-id1878 . 1152) (undo-tree-id1879 . 1152) (undo-tree-id1880 . 1152) (undo-tree-id1881 . 1152) (undo-tree-id1882 . 1152) (undo-tree-id1883 . -29) (undo-tree-id1884 . 418) (undo-tree-id1885 . 418) (undo-tree-id1886 . 418) (undo-tree-id1887 . 418) (undo-tree-id1888 . -734) (undo-tree-id1889 . 418) (undo-tree-id1890 . 418) (undo-tree-id1891 . -29) (undo-tree-id1892 . -1152) (undo-tree-id1893 . -1152) (t 23120 23587 361038 287000)) nil (23120 24050 122291 932000) 0 nil]) ((#("
" 0 1 (fontified t)) . 1) (undo-tree-id1328 . 1) (undo-tree-id1329 . 1) (undo-tree-id1330 . 1) (undo-tree-id1331 . 1) (undo-tree-id1332 . 1) (undo-tree-id1333 . 1) (undo-tree-id1334 . 1) (undo-tree-id1335 . 1) (undo-tree-id1336 . 1) (undo-tree-id1337 . 1) (undo-tree-id1338 . 1) (undo-tree-id1339 . 1) (undo-tree-id1340 . 1) (undo-tree-id1341 . 1) (undo-tree-id1342 . 1) (undo-tree-id1343 . 1) (undo-tree-id1344 . 1) (undo-tree-id1345 . 1) (undo-tree-id1346 . 1) (undo-tree-id1347 . 1) (undo-tree-id1348 . 1) (undo-tree-id1349 . 1) (undo-tree-id1350 . 1) (undo-tree-id1351 . 1) (undo-tree-id1352 . 1) (undo-tree-id1353 . 1) (undo-tree-id1354 . 1) (undo-tree-id1355 . 1) (undo-tree-id1356 . 1) (undo-tree-id1357 . 1) (undo-tree-id1358 . 1) (undo-tree-id1359 . 1) (undo-tree-id1360 . 1) (undo-tree-id1361 . 1) (undo-tree-id1362 . 1) (undo-tree-id1363 . 1) (undo-tree-id1364 . 1) (undo-tree-id1365 . 1) (undo-tree-id1366 . 1) (undo-tree-id1367 . 1) (undo-tree-id1368 . 1) (undo-tree-id1369 . 1) (undo-tree-id1370 . 1) (undo-tree-id1371 . 1) (undo-tree-id1372 . 1) (undo-tree-id1373 . 1) (undo-tree-id1374 . 1) (undo-tree-id1375 . 1) (undo-tree-id1376 . 1) (undo-tree-id1377 . 1) (undo-tree-id1378 . 1) (undo-tree-id1379 . 1) (undo-tree-id1380 . 1) (undo-tree-id1381 . 1) (undo-tree-id1382 . 1) (undo-tree-id1383 . 1) (undo-tree-id1384 . 1) (undo-tree-id1385 . 1) (undo-tree-id1386 . 1) (undo-tree-id1387 . 1) (undo-tree-id1388 . 1) (undo-tree-id1389 . 1) (undo-tree-id1390 . 1) (undo-tree-id1391 . 1) (undo-tree-id1392 . 1) (undo-tree-id1393 . 1) (undo-tree-id1394 . 1) (undo-tree-id1395 . 1) (undo-tree-id1396 . 1) (undo-tree-id1397 . 1) (undo-tree-id1398 . 1) (undo-tree-id1399 . 1) (undo-tree-id1400 . 1) (undo-tree-id1401 . 1) (undo-tree-id1402 . 1) (undo-tree-id1403 . 1) (undo-tree-id1404 . 1) (undo-tree-id1405 . 1) (undo-tree-id1406 . 1) (undo-tree-id1407 . 1) (undo-tree-id1408 . 1) (undo-tree-id1409 . 1) (undo-tree-id1410 . 1) (undo-tree-id1411 . 1) (undo-tree-id1412 . 1) (undo-tree-id1413 . 1) (undo-tree-id1414 . 1) (undo-tree-id1415 . 1) (undo-tree-id1416 . 1) (undo-tree-id1417 . 1) (undo-tree-id1418 . 1) (undo-tree-id1419 . 1) (undo-tree-id1420 . 1) (undo-tree-id1421 . 1) (undo-tree-id1422 . 1) (undo-tree-id1423 . 1) (undo-tree-id1424 . 1) (undo-tree-id1425 . 1) (undo-tree-id1426 . 1) (undo-tree-id1427 . 1) (undo-tree-id1428 . 1) (undo-tree-id1429 . 1) (undo-tree-id1430 . 1) (undo-tree-id1431 . 1) (undo-tree-id1432 . 1) (undo-tree-id1433 . 1) (undo-tree-id1434 . 1) (undo-tree-id1435 . 1) (undo-tree-id1436 . 1) (undo-tree-id1437 . 1) (undo-tree-id1438 . 1) (undo-tree-id1439 . 1) (undo-tree-id1440 . 1) (undo-tree-id1441 . 1) (undo-tree-id1442 . 1) (undo-tree-id1443 . 1) (undo-tree-id1444 . 1) (#("
" 0 1 (fontified t)) . 1) (undo-tree-id1445 . 1) (undo-tree-id1446 . 1) (undo-tree-id1447 . 1) (undo-tree-id1448 . 1) (undo-tree-id1449 . 1) (undo-tree-id1450 . 1) (undo-tree-id1451 . 1) (undo-tree-id1452 . 1) (undo-tree-id1453 . 1) (undo-tree-id1454 . 1) (undo-tree-id1455 . 1) (undo-tree-id1456 . 1) (undo-tree-id1457 . 1) (undo-tree-id1458 . 1) (undo-tree-id1459 . 1) (undo-tree-id1460 . 1) (undo-tree-id1461 . 1) (undo-tree-id1462 . 1) (undo-tree-id1463 . 1) (undo-tree-id1464 . 1) (undo-tree-id1465 . 1) (undo-tree-id1466 . 1) (undo-tree-id1467 . 1) (undo-tree-id1468 . 1) (undo-tree-id1469 . 1) (undo-tree-id1470 . 1) (undo-tree-id1471 . 1) (undo-tree-id1472 . 1) (undo-tree-id1473 . 1) (undo-tree-id1474 . 1) (undo-tree-id1475 . 1) (undo-tree-id1476 . 1) (undo-tree-id1477 . 1) (undo-tree-id1478 . 1) (undo-tree-id1479 . 1) (undo-tree-id1480 . 1) (undo-tree-id1481 . 1) (undo-tree-id1482 . 1) (undo-tree-id1483 . 1) (undo-tree-id1484 . 1) (undo-tree-id1485 . 1) (undo-tree-id1486 . 1) (undo-tree-id1487 . 1) (undo-tree-id1488 . 1) (undo-tree-id1489 . 1) (undo-tree-id1490 . 1) (undo-tree-id1491 . 1) (undo-tree-id1492 . 1) (undo-tree-id1493 . 1) (undo-tree-id1494 . 1) (undo-tree-id1495 . 1) (undo-tree-id1496 . 1) (undo-tree-id1497 . 1) (undo-tree-id1498 . 1) (undo-tree-id1499 . 1) (undo-tree-id1500 . 1) (undo-tree-id1501 . 1) (undo-tree-id1502 . 1) (undo-tree-id1503 . 1) (undo-tree-id1504 . 1) (undo-tree-id1505 . 1) (undo-tree-id1506 . 1) (undo-tree-id1507 . 1) (undo-tree-id1508 . 1) (undo-tree-id1509 . 1) (undo-tree-id1510 . 1) (undo-tree-id1511 . 1) (undo-tree-id1512 . 1) (undo-tree-id1513 . 1) (undo-tree-id1514 . 1) (undo-tree-id1515 . 1) (undo-tree-id1516 . 1) (undo-tree-id1517 . 1) (undo-tree-id1518 . 1) (undo-tree-id1519 . 1) (undo-tree-id1520 . 1) (undo-tree-id1521 . 1) (undo-tree-id1522 . 1) (undo-tree-id1523 . 1) (undo-tree-id1524 . -1) (undo-tree-id1525 . -1) (undo-tree-id1526 . 1) (undo-tree-id1527 . 1) (undo-tree-id1528 . 1) (undo-tree-id1529 . 1) (undo-tree-id1530 . 1) (undo-tree-id1531 . 1) (undo-tree-id1532 . 1) (undo-tree-id1533 . 1) (undo-tree-id1534 . 1) (undo-tree-id1535 . 1) (undo-tree-id1536 . 1) (undo-tree-id1537 . 1) (undo-tree-id1538 . 1) (undo-tree-id1539 . 1) (undo-tree-id1540 . 1) (undo-tree-id1541 . 1) (undo-tree-id1542 . 1) (undo-tree-id1543 . 1) (undo-tree-id1544 . 1) (undo-tree-id1545 . 1) (undo-tree-id1546 . 1) (undo-tree-id1547 . 1) (undo-tree-id1548 . 1) (undo-tree-id1549 . 1) (undo-tree-id1550 . 1) (undo-tree-id1551 . 1) (undo-tree-id1552 . 1) (undo-tree-id1553 . 1) (undo-tree-id1554 . 1) (undo-tree-id1555 . 1) (undo-tree-id1556 . 1) (undo-tree-id1557 . 1) (undo-tree-id1558 . 1) (undo-tree-id1559 . 1) (undo-tree-id1560 . 1) (undo-tree-id1561 . 1) (#("
" 0 1 (fontified t)) . 1) (undo-tree-id1562 . -1) (undo-tree-id1563 . 1) (undo-tree-id1564 . 1) (undo-tree-id1565 . 1) (undo-tree-id1566 . 1) (undo-tree-id1567 . 1) (undo-tree-id1568 . 1) (undo-tree-id1569 . 1) (undo-tree-id1570 . 1) (undo-tree-id1571 . 1) (undo-tree-id1572 . 1) (undo-tree-id1573 . 1) (undo-tree-id1574 . 1) (undo-tree-id1575 . 1) (undo-tree-id1576 . 1) (undo-tree-id1577 . 1) (undo-tree-id1578 . 1) (undo-tree-id1579 . 1) (undo-tree-id1580 . 1) (undo-tree-id1581 . 1) (undo-tree-id1582 . 1) (undo-tree-id1583 . 1) (undo-tree-id1584 . 1) (undo-tree-id1585 . -1) (undo-tree-id1586 . -1) (undo-tree-id1587 . -1) (undo-tree-id1588 . -1) (undo-tree-id1589 . -1) (undo-tree-id1590 . -1) (undo-tree-id1591 . -1) (undo-tree-id1592 . -1) (undo-tree-id1593 . 1)) nil (23120 23587 352597 226000) 0 nil]) ((#(";; qt docs lookup
(require `info-look)
(load \"qtdoc\")
(setq qtdoc-html-root \"http://doc.qt.io/qt-5/\")

(load \"google-look\")

;Help and documentation
(global-set-key [(control h) (control q)] 'qtdoc-lookup)
(global-set-key [(control h) (control g)] 'google-lookup)
(global-set-key [(control h) (control p)] 'python-lookup)
(global-set-key [(control h) (control c)] 'cpp-lookup)" 0 3 (fontified t face font-lock-comment-delimiter-face) 3 18 (fontified t face font-lock-comment-face) 18 19 (fontified t) 19 26 (fontified t face font-lock-keyword-face) 26 45 (fontified t) 45 50 (fontified t face font-lock-string-face) 50 52 (fontified t face font-lock-string-face) 52 54 (fontified t) 54 76 (fontified t) 76 100 (fontified t face font-lock-string-face) 100 103 (fontified t) 103 109 (fontified t) 109 121 (fontified t face font-lock-string-face) 121 122 (fontified t face font-lock-string-face) 122 124 (fontified t) 124 125 (fontified t) 125 126 (fontified t face font-lock-comment-delimiter-face) 126 149 (fontified t face font-lock-comment-face) 149 340 (fontified t) 340 373 (fontified t) 373 376 (fontified t)) . 2) (undo-tree-id1594 . -376) (undo-tree-id1595 . 253) (undo-tree-id1596 . 252) (undo-tree-id1597 . 252) (undo-tree-id1598 . 251) (undo-tree-id1599 . -125) (undo-tree-id1600 . 7) (undo-tree-id1601 . 11) (undo-tree-id1602 . 7) (undo-tree-id1603 . 11) (undo-tree-id1604 . 11) (undo-tree-id1605 . 8) (undo-tree-id1606 . 8) (undo-tree-id1607 . 1) (undo-tree-id1608 . 1) (undo-tree-id1609 . -376) (undo-tree-id1610 . 7) (undo-tree-id1611 . 11) (undo-tree-id1612 . 7) (undo-tree-id1613 . 11) (undo-tree-id1614 . 11) (undo-tree-id1615 . 8) (undo-tree-id1616 . 8) (undo-tree-id1617 . 1) (undo-tree-id1618 . 1) (undo-tree-id1619 . 1) (undo-tree-id1620 . 1) (undo-tree-id1621 . 1) (undo-tree-id1622 . 1) (undo-tree-id1623 . 1) (undo-tree-id1624 . 1) (undo-tree-id1625 . 1) (undo-tree-id1626 . 1) (undo-tree-id1627 . 1) (undo-tree-id1628 . 1) (undo-tree-id1629 . 1) (undo-tree-id1630 . 1) (undo-tree-id1631 . -365) (undo-tree-id1632 . 1) (undo-tree-id1633 . 1) (undo-tree-id1634 . 7) (undo-tree-id1635 . 1) (undo-tree-id1636 . 7) (undo-tree-id1637 . 7) (undo-tree-id1638 . 7) (undo-tree-id1639 . 7) (undo-tree-id1640 . -369) (undo-tree-id1641 . -369) (undo-tree-id1642 . -376) (undo-tree-id1643 . -376) (undo-tree-id1644 . 7) (undo-tree-id1645 . 7) (undo-tree-id1646 . 7) (undo-tree-id1647 . -365) (undo-tree-id1648 . -376) (undo-tree-id1649 . 58) (undo-tree-id1650 . 116) (undo-tree-id1651 . 58) (undo-tree-id1652 . 173) (undo-tree-id1653 . 116) (undo-tree-id1654 . 228) (undo-tree-id1655 . 173) (undo-tree-id1656 . 252) (undo-tree-id1657 . 228) (undo-tree-id1658 . 253) (undo-tree-id1659 . 252) (undo-tree-id1660 . 274) (undo-tree-id1661 . 253) (undo-tree-id1662 . 275) (undo-tree-id1663 . 274) (undo-tree-id1664 . 323) (undo-tree-id1665 . 275) (undo-tree-id1666 . 338) (undo-tree-id1667 . 323) (undo-tree-id1668 . 358) (undo-tree-id1669 . 338) (undo-tree-id1670 . 376) (undo-tree-id1671 . 358)) nil (23120 23587 352913 875000) 0 nil]) ((127 . 378)) nil (23120 23587 352941 955000) 0 nil]) ((125 . 127)) nil (23120 23587 352946 46000) 0 nil]) ((#("
" 0 1 (fontified t)) . 2764) (undo-tree-id1672 . 1) (undo-tree-id1673 . 1) (#("
" 0 1 (fontified t)) . 2764) (undo-tree-id1674 . 1) (undo-tree-id1675 . 1)) nil (23120 23587 352962 527000) 0 nil]) ((#(";Help and documentation
(global-set-key [(control h) (control q)] 'qtdoc-lookup)
(global-set-key [(control h) (control g)] 'google-lookup)
(global-set-key [(control h) (control p)] 'python-lookup)
(global-set-key [(control h) (control c)] 'cpp-lookup)" 0 1 (fontified t face font-lock-comment-delimiter-face) 1 24 (fontified t face font-lock-comment-face) 24 215 (fontified t) 215 248 (fontified t) 248 251 (fontified t)) . 2764) (undo-tree-id1676 . 251) (undo-tree-id1677 . 251) (undo-tree-id1678 . -251) (undo-tree-id1679 . -251) (undo-tree-id1680 . 1) (undo-tree-id1681 . -251) (undo-tree-id1682 . 54) (undo-tree-id1683 . -198) 3015 (t 23120 23507 300494 815000)) nil (23120 23587 352994 156000) 0 nil] [nil nil ((#("
" 0 1 (fontified t)) . 1) (undo-tree-id1302 . 1) (undo-tree-id1303 . 1) (undo-tree-id1304 . 1) (undo-tree-id1305 . 1) (undo-tree-id1306 . 1) (undo-tree-id1307 . 1) (undo-tree-id1308 . 1) (undo-tree-id1309 . 1) (undo-tree-id1310 . 1) (undo-tree-id1311 . 1) (undo-tree-id1312 . 1) (undo-tree-id1313 . 1) (undo-tree-id1314 . 1) (undo-tree-id1315 . 1) (undo-tree-id1316 . 1) (undo-tree-id1317 . 1) (undo-tree-id1318 . 1) (undo-tree-id1319 . 1) (undo-tree-id1320 . 1) (undo-tree-id1321 . 1) (undo-tree-id1322 . 1) (undo-tree-id1323 . 1) (undo-tree-id1324 . 1) (t 23120 23507 300494 815000)) ((1 . 2)) (23120 23552 800402 516000) 0 nil]) ((#("
" 0 1 (fontified t)) . 2764) (undo-tree-id1325 . -1) (undo-tree-id1326 . -1) (undo-tree-id1327 . 1)) ((2764 . 2765) (t 23120 23507 300494 815000)) (23120 23553 432974 349000) 0 nil]) ((#("
" 0 1 (fontified t)) . 2765) (undo-tree-id1197 . 1) (undo-tree-id1198 . 1) (undo-tree-id1199 . 1) (undo-tree-id1200 . 1) (undo-tree-id1201 . 1) (undo-tree-id1202 . 1) (undo-tree-id1203 . 1) (undo-tree-id1204 . 1) (undo-tree-id1205 . 1) (undo-tree-id1206 . 1) (undo-tree-id1207 . 1) (undo-tree-id1208 . 1) (undo-tree-id1209 . 1) (undo-tree-id1210 . 1) (undo-tree-id1211 . 1) (undo-tree-id1212 . 1) (undo-tree-id1213 . 1) (undo-tree-id1214 . 1) (undo-tree-id1215 . 1) (undo-tree-id1216 . 1) (undo-tree-id1217 . 1) (undo-tree-id1218 . 1) (undo-tree-id1219 . 1) (undo-tree-id1220 . 1) (undo-tree-id1221 . 1) (undo-tree-id1222 . 1) (undo-tree-id1223 . 1) (undo-tree-id1224 . 1) (#("
" 0 1 (fontified t)) . 2765) (undo-tree-id1225 . -1) (undo-tree-id1226 . -1) (undo-tree-id1227 . 1) (undo-tree-id1228 . -1) (undo-tree-id1229 . 1) (undo-tree-id1230 . 1) (undo-tree-id1231 . 1) (undo-tree-id1232 . 1) (undo-tree-id1233 . 1) (undo-tree-id1234 . 1)) nil (23120 23553 24971 974000) 0 nil]) ((#(";Most Recent Buffers" 0 1 (fontified t face font-lock-comment-delimiter-face) 1 20 (fontified t face font-lock-comment-face)) . -2765) (undo-tree-id1235 . -20) (undo-tree-id1236 . -20) (undo-tree-id1237 . -20) (undo-tree-id1238 . 20) (undo-tree-id1239 . 20) (undo-tree-id1240 . 20) (undo-tree-id1241 . -20) (undo-tree-id1242 . 20) 2785) nil (23120 23507 282487 394000) 0 nil]) ((#("(global-set-key (kbd \"S-C-c\") 'find-most-recent-c-buffer)
(global-set-key (kbd \"S-C-e\") 'find-most-recent-emacs-buffer)
(global-set-key (kbd \"S-C-p\") 'find-most-recent-python-buffer)

(global-set-key (kbd \"S-C-o\") 'find-most-recent-org-buffer)
" 0 2 (fontified t) 2 3 (fontified t) 3 21 (fontified t) 21 28 (fontified t face font-lock-string-face) 28 58 (fontified t) 58 60 (fontified t) 60 79 (fontified t) 79 86 (fontified t face font-lock-string-face) 86 120 (fontified t) 120 141 (fontified t) 141 148 (fontified t face font-lock-string-face) 148 150 (fontified t) 150 157 (fontified t) 157 159 (fontified t) 159 183 (fontified t) 183 205 (fontified t) 205 212 (fontified t face font-lock-string-face) 212 244 (fontified t)) . 2786) (undo-tree-id1243 . -244) (undo-tree-id1244 . -244) (undo-tree-id1245 . -244) (undo-tree-id1246 . 206) (undo-tree-id1247 . 206) (undo-tree-id1248 . 244) (undo-tree-id1249 . 206) (undo-tree-id1250 . 244) (undo-tree-id1251 . 244) (undo-tree-id1252 . -244) (undo-tree-id1253 . 186) (undo-tree-id1254 . 244) (undo-tree-id1255 . 124) (undo-tree-id1256 . 186) (undo-tree-id1257 . 61) (undo-tree-id1258 . 124) (undo-tree-id1259 . 60) (undo-tree-id1260 . 61) (undo-tree-id1261 . 60) (undo-tree-id1262 . -244) 3030) nil (23120 23507 282550 798000) 0 nil]) ((#(";; Most Recent Buffers
(defun find-first-buffer-match (buffers pattern)
  (dolist (f buffers)
    (when (string-match pattern (buffer-name f))
      (return f))))

(defun find-most-recent-pattern-buffer (pattern)
  \"find the most recent code buffer in the history and switch to it\"
  (let ((f (find-first-buffer-match (cdr (buffer-list)) pattern)))
    (if (not (eq f nil))
        (switch-to-buffer f)
      )
    )
  )

(defun find-most-recent-python-buffer ()
  \"find the most recent python buffer in the history and switch to it\"
  (interactive)
  (find-most-recent-pattern-buffer \"\\\\.py\"))

(defun find-most-recent-c-buffer ()
  \"find the most recent c/c++ buffer in the history and switch to it\"
  (interactive)
  (find-most-recent-pattern-buffer \"\\\\.\\\\(cpp\\\\|h\\\\|cc\\\\|hh|hpp\\\\)$\"))

(defun find-most-recent-emacs-buffer ()
  \"find the most recent emacs init buffer in the history and switch to it\"
  (interactive)
  (find-most-recent-pattern-buffer \"\\\\.el\\\\$\\\\|dov.emacs|SimonInit.el\"))


(defun find-most-recent-org-buffer ()
  \"find the most recent code buffer in the history and switch to it\"
  (interactive)
  (find-most-recent-pattern-buffer \"\\\\.org\\$\"))
" 0 3 (fontified t face font-lock-comment-delimiter-face) 3 11 (fontified t face font-lock-comment-face) 11 23 (fontified t face font-lock-comment-face) 23 24 (fontified t) 24 29 (fontified t face font-lock-keyword-face) 29 30 (fontified t) 30 53 (fontified t face font-lock-function-name-face) 53 70 (fontified t) 70 72 (fontified t) 72 75 (fontified t) 75 81 (fontified t face font-lock-keyword-face) 81 99 (fontified t) 99 103 (fontified t face font-lock-keyword-face) 103 150 (fontified t) 150 156 (fontified t face font-lock-keyword-face) 156 165 (fontified t) 165 170 (fontified t face font-lock-keyword-face) 170 171 (fontified t) 171 202 (fontified t face font-lock-function-name-face) 202 210 (fontified t) 210 213 (fontified t) 213 215 (fontified t) 215 223 (fontified t face font-lock-doc-face) 223 281 (fontified t face font-lock-doc-face) 281 282 (fontified t) 282 285 (fontified t) 285 288 (fontified t face font-lock-keyword-face) 288 299 (fontified t) 299 349 (fontified t) 349 354 (fontified t) 354 356 (fontified t face font-lock-keyword-face) 356 373 (fontified t) 373 374 (fontified t) 374 423 (fontified t) 423 428 (fontified t face font-lock-keyword-face) 428 429 (fontified t) 429 459 (fontified t face font-lock-function-name-face) 459 465 (fontified t) 465 499 (fontified t face font-lock-doc-face) 499 500 (fontified t face font-lock-doc-face) 500 523 (fontified t face font-lock-doc-face) 523 533 (face font-lock-doc-face fontified t) 533 534 (fontified t) 534 572 (fontified t) 572 585 (fontified t) 585 592 (fontified t face font-lock-string-face) 592 595 (fontified t) 595 597 (fontified t) 597 602 (fontified t face font-lock-keyword-face) 602 603 (fontified t) 603 628 (fontified t face font-lock-function-name-face) 628 634 (fontified t) 634 701 (fontified t face font-lock-doc-face) 701 713 (fontified t) 713 718 (fontified t) 718 753 (fontified t) 753 782 (fontified t face font-lock-string-face) 782 786 (fontified t face font-lock-string-face) 786 789 (fontified t) 789 791 (fontified t) 791 796 (fontified t face font-lock-keyword-face) 796 797 (fontified t) 797 826 (fontified t face font-lock-function-name-face) 826 832 (fontified t) 832 849 (fontified t face font-lock-doc-face) 849 874 (fontified t face font-lock-doc-face) 874 904 (fontified t face font-lock-doc-face) 904 905 (fontified t) 905 956 (fontified t) 956 991 (fontified t face font-lock-string-face) 991 997 (fontified t) 997 1002 (fontified t face font-lock-keyword-face) 1002 1003 (fontified t) 1003 1030 (fontified t face font-lock-function-name-face) 1030 1034 (fontified t) 1034 1036 (fontified t) 1036 1102 (fontified t face font-lock-doc-face) 1102 1154 (fontified t) 1154 1164 (fontified t face font-lock-string-face) 1164 1167 (fontified t)) . 1) (undo-tree-id1263 . 133) (undo-tree-id1264 . 133) (undo-tree-id1265 . -1034) (undo-tree-id1266 . 132) (undo-tree-id1267 . 132) (undo-tree-id1268 . -1034) (undo-tree-id1269 . 132) (undo-tree-id1270 . 132) (undo-tree-id1271 . -1034) (undo-tree-id1272 . 1167) (undo-tree-id1273 . 1167) (undo-tree-id1274 . 1167) (undo-tree-id1275 . 1167) (undo-tree-id1276 . 1167) (undo-tree-id1277 . 1167) (undo-tree-id1278 . 1167) (undo-tree-id1279 . 1167) (undo-tree-id1280 . 1167) (undo-tree-id1281 . 1167) (undo-tree-id1282 . 1167) (undo-tree-id1283 . 1167) (undo-tree-id1284 . 1167) (undo-tree-id1285 . 1167) (undo-tree-id1286 . -1167) (undo-tree-id1287 . -1167) 1168) nil (23120 23507 282631 739000) 0 nil]) ((#("
" 0 1 (fontified t)) . 1) (undo-tree-id1288 . 1) (undo-tree-id1289 . 1) (undo-tree-id1290 . 1) (undo-tree-id1291 . 1) (undo-tree-id1292 . 1) (undo-tree-id1293 . 1) (undo-tree-id1294 . 1) (undo-tree-id1295 . 1) (undo-tree-id1296 . 1) (undo-tree-id1297 . 1) (undo-tree-id1298 . 1) (undo-tree-id1299 . 1) (undo-tree-id1300 . 1) (undo-tree-id1301 . 1) (t 23120 23356 291128 293000)) nil (23120 23507 282682 71000) 0 nil]) ((#("
" 0 1 (fontified t)) . 6335) (undo-tree-id813 . 1) (undo-tree-id814 . 1) (undo-tree-id815 . 1) (undo-tree-id816 . 1) (undo-tree-id817 . 1) (undo-tree-id818 . 1) (undo-tree-id819 . 1) (undo-tree-id820 . 1) (undo-tree-id821 . 1) (undo-tree-id822 . 1) (undo-tree-id823 . 1) (undo-tree-id824 . 1) (undo-tree-id825 . 1) (undo-tree-id826 . 1) (undo-tree-id827 . 1) (undo-tree-id828 . 1) (undo-tree-id829 . 1) (undo-tree-id830 . 1) (undo-tree-id831 . 1) (undo-tree-id832 . 1) (undo-tree-id833 . 1) (undo-tree-id834 . 1) (undo-tree-id835 . 1) (undo-tree-id836 . 1) (undo-tree-id837 . 1) (undo-tree-id838 . 1) (undo-tree-id839 . 1) (undo-tree-id840 . 1) (undo-tree-id841 . 1) (undo-tree-id842 . 1) (undo-tree-id843 . 1) (undo-tree-id844 . 1) (undo-tree-id845 . 1) (undo-tree-id846 . 1) (undo-tree-id847 . 1) (undo-tree-id848 . 1) (undo-tree-id849 . 1) (undo-tree-id850 . 1) (undo-tree-id851 . 1) (undo-tree-id852 . 1) (undo-tree-id853 . 1) (undo-tree-id854 . 1) (undo-tree-id855 . 1) (undo-tree-id856 . 1) (undo-tree-id857 . 1) (undo-tree-id858 . 1) (undo-tree-id859 . 1) (undo-tree-id860 . 1) (undo-tree-id861 . 1) (undo-tree-id862 . 1) (undo-tree-id863 . 1) (undo-tree-id864 . 1) (undo-tree-id865 . 1) (undo-tree-id866 . 1) (undo-tree-id867 . 1) (undo-tree-id868 . 1) (undo-tree-id869 . 1) (undo-tree-id870 . 1) (undo-tree-id871 . 1) (undo-tree-id872 . 1) (undo-tree-id873 . 1) (undo-tree-id874 . 1) (undo-tree-id875 . 1) (undo-tree-id876 . 1) (undo-tree-id877 . 1) (undo-tree-id878 . 1) (undo-tree-id879 . 1) (undo-tree-id880 . 1) (undo-tree-id881 . 1) (undo-tree-id882 . 1) (undo-tree-id883 . -1) (undo-tree-id884 . -1) (undo-tree-id885 . 1) (undo-tree-id886 . 1) (undo-tree-id887 . 1) (undo-tree-id888 . 1) (undo-tree-id889 . 1) (undo-tree-id890 . 1) (undo-tree-id891 . 1) (undo-tree-id892 . 1) (undo-tree-id893 . 1) (undo-tree-id894 . 1) (undo-tree-id895 . 1) (undo-tree-id896 . 1) (undo-tree-id897 . 1) (undo-tree-id898 . 1) (undo-tree-id899 . 1) (undo-tree-id900 . 1) (undo-tree-id901 . 1) (undo-tree-id902 . 1) (undo-tree-id903 . 1) (undo-tree-id904 . 1) (undo-tree-id905 . 1) (undo-tree-id906 . 1) (undo-tree-id907 . 1) (undo-tree-id908 . 1) (undo-tree-id909 . 1) (undo-tree-id910 . 1) (undo-tree-id911 . 1) (undo-tree-id912 . 1) (undo-tree-id913 . 1) (undo-tree-id914 . 1) (undo-tree-id915 . 1) (undo-tree-id916 . 1) (undo-tree-id917 . 1) (undo-tree-id918 . 1) (undo-tree-id919 . 1) (undo-tree-id920 . 1) (undo-tree-id921 . 1) (undo-tree-id922 . 1) (undo-tree-id923 . 1) (undo-tree-id924 . 1) (undo-tree-id925 . 1) (undo-tree-id926 . 1) (undo-tree-id927 . 1) (undo-tree-id928 . 1) (undo-tree-id929 . 1) (undo-tree-id930 . 1) (undo-tree-id931 . 1) (undo-tree-id932 . 1) (undo-tree-id933 . 1) (undo-tree-id934 . 1) (undo-tree-id935 . 1) (undo-tree-id936 . 1) (undo-tree-id937 . 1) (undo-tree-id938 . 1) (undo-tree-id939 . 1) (undo-tree-id940 . 1) (undo-tree-id941 . 1) (undo-tree-id942 . 1) (undo-tree-id943 . 1) (undo-tree-id944 . 1) (undo-tree-id945 . 1) (undo-tree-id946 . 1) (undo-tree-id947 . 1) (undo-tree-id948 . 1) (undo-tree-id949 . 1) (undo-tree-id950 . 1) (undo-tree-id951 . 1) (undo-tree-id952 . 1) (undo-tree-id953 . 1) (undo-tree-id954 . 1) (undo-tree-id955 . 1) (undo-tree-id956 . 1) (undo-tree-id957 . 1) (undo-tree-id958 . 1) (undo-tree-id959 . 1) (undo-tree-id960 . 1) (undo-tree-id961 . 1) (undo-tree-id962 . 1) (#("
" 0 1 (fontified t)) . 6335) (undo-tree-id963 . 1) (undo-tree-id964 . 1) (undo-tree-id965 . 1) (undo-tree-id966 . 1) (undo-tree-id967 . 1) (undo-tree-id968 . 1) (undo-tree-id969 . 1) (undo-tree-id970 . 1) (undo-tree-id971 . 1) (undo-tree-id972 . 1) (undo-tree-id973 . 1) (undo-tree-id974 . 1) (undo-tree-id975 . 1) (undo-tree-id976 . 1) (undo-tree-id977 . 1) (undo-tree-id978 . 1) (undo-tree-id979 . 1) (undo-tree-id980 . 1) (undo-tree-id981 . 1) (undo-tree-id982 . 1) (undo-tree-id983 . 1) (undo-tree-id984 . 1) (undo-tree-id985 . 1) (undo-tree-id986 . 1) (undo-tree-id987 . 1) (undo-tree-id988 . 1) (undo-tree-id989 . 1) (undo-tree-id990 . 1) (undo-tree-id991 . 1) (undo-tree-id992 . 1) (undo-tree-id993 . 1) (undo-tree-id994 . 1) (undo-tree-id995 . 1) (undo-tree-id996 . 1) (undo-tree-id997 . 1) (undo-tree-id998 . 1) (undo-tree-id999 . 1) (undo-tree-id1000 . 1) (undo-tree-id1001 . 1) (undo-tree-id1002 . 1) (undo-tree-id1003 . 1) (undo-tree-id1004 . 1) (undo-tree-id1005 . 1) (undo-tree-id1006 . 1) (undo-tree-id1007 . 1) (undo-tree-id1008 . 1) (undo-tree-id1009 . 1) (undo-tree-id1010 . 1) (undo-tree-id1011 . 1) (undo-tree-id1012 . 1) (undo-tree-id1013 . 1) (undo-tree-id1014 . 1) (undo-tree-id1015 . 1) (undo-tree-id1016 . 1) (undo-tree-id1017 . 1) (undo-tree-id1018 . 1) (undo-tree-id1019 . 1) (undo-tree-id1020 . 1) (undo-tree-id1021 . 1) (undo-tree-id1022 . 1) (undo-tree-id1023 . 1) (undo-tree-id1024 . 1) (undo-tree-id1025 . 1) (undo-tree-id1026 . 1) (undo-tree-id1027 . 1) (undo-tree-id1028 . 1) (undo-tree-id1029 . 1) (undo-tree-id1030 . 1) (undo-tree-id1031 . 1) (undo-tree-id1032 . -1) (undo-tree-id1033 . -1) (undo-tree-id1034 . 1) (undo-tree-id1035 . 1) (undo-tree-id1036 . 1) (undo-tree-id1037 . 1) (undo-tree-id1038 . 1) (undo-tree-id1039 . 1) (undo-tree-id1040 . 1) (undo-tree-id1041 . 1) (undo-tree-id1042 . 1) (undo-tree-id1043 . 1) (undo-tree-id1044 . 1) (undo-tree-id1045 . 1) (undo-tree-id1046 . 1) (undo-tree-id1047 . 1) (undo-tree-id1048 . 1) (undo-tree-id1049 . 1) (undo-tree-id1050 . 1) (undo-tree-id1051 . 1) (undo-tree-id1052 . 1) (undo-tree-id1053 . 1) (undo-tree-id1054 . 1) (undo-tree-id1055 . 1) (undo-tree-id1056 . 1) (undo-tree-id1057 . 1) (undo-tree-id1058 . 1) (undo-tree-id1059 . 1) (undo-tree-id1060 . 1) (undo-tree-id1061 . 1) (undo-tree-id1062 . 1) (undo-tree-id1063 . 1) (undo-tree-id1064 . 1) (undo-tree-id1065 . 1) (undo-tree-id1066 . 1) (undo-tree-id1067 . 1) (undo-tree-id1068 . 1) (undo-tree-id1069 . 1) (undo-tree-id1070 . 1) (undo-tree-id1071 . 1) (undo-tree-id1072 . 1) (undo-tree-id1073 . 1) (undo-tree-id1074 . 1) (undo-tree-id1075 . 1) (undo-tree-id1076 . 1) (undo-tree-id1077 . 1) (undo-tree-id1078 . 1) (undo-tree-id1079 . 1) (undo-tree-id1080 . 1) (undo-tree-id1081 . 1) (undo-tree-id1082 . 1) (undo-tree-id1083 . 1) (undo-tree-id1084 . 1) (undo-tree-id1085 . 1) (undo-tree-id1086 . 1) (undo-tree-id1087 . 1) (undo-tree-id1088 . 1) (undo-tree-id1089 . 1) (undo-tree-id1090 . 1) (undo-tree-id1091 . 1) (undo-tree-id1092 . 1) (undo-tree-id1093 . 1) (undo-tree-id1094 . 1) (undo-tree-id1095 . 1) (undo-tree-id1096 . 1) (undo-tree-id1097 . 1) (undo-tree-id1098 . 1) (undo-tree-id1099 . 1) (undo-tree-id1100 . 1) (undo-tree-id1101 . 1) (undo-tree-id1102 . 1) (undo-tree-id1103 . 1) (undo-tree-id1104 . 1) (undo-tree-id1105 . 1) (undo-tree-id1106 . 1) (undo-tree-id1107 . 1) (undo-tree-id1108 . 1) (undo-tree-id1109 . 1)) nil (23120 23356 280680 220000) 0 nil]) ((#("
           
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

" 0 1 (fontified t) 1 13 (fontified t) 13 45 (fontified t face font-lock-comment-delimiter-face) 45 51 (fontified t face font-lock-comment-delimiter-face) 51 52 (fontified t face font-lock-comment-face) 52 53 (fontified t)) . 6335) (undo-tree-id1110 . -53) (undo-tree-id1111 . -53) (undo-tree-id1112 . 53) (undo-tree-id1113 . 53) (undo-tree-id1114 . 53) (undo-tree-id1115 . 53) (undo-tree-id1116 . -53) (undo-tree-id1117 . -53) (undo-tree-id1118 . -53) (undo-tree-id1119 . -53) (undo-tree-id1120 . -53) (undo-tree-id1121 . 53) (undo-tree-id1122 . 53) (undo-tree-id1123 . 53) (undo-tree-id1124 . 53) (undo-tree-id1125 . 53) (undo-tree-id1126 . 53) (undo-tree-id1127 . 53) (undo-tree-id1128 . 53) (undo-tree-id1129 . 53) (undo-tree-id1130 . 53) (undo-tree-id1131 . 53) (undo-tree-id1132 . 53) (undo-tree-id1133 . 53) (undo-tree-id1134 . 53) (undo-tree-id1135 . 53) (undo-tree-id1136 . 53) (undo-tree-id1137 . 53) (undo-tree-id1138 . 53) (undo-tree-id1139 . 53) (undo-tree-id1140 . 53) (undo-tree-id1141 . 53) (undo-tree-id1142 . 53) (undo-tree-id1143 . 53) (undo-tree-id1144 . 53) (undo-tree-id1145 . 53) (undo-tree-id1146 . 53) (undo-tree-id1147 . 53) (undo-tree-id1148 . 53) (undo-tree-id1149 . 53) (undo-tree-id1150 . 53) (undo-tree-id1151 . 53) (undo-tree-id1152 . 53) (undo-tree-id1153 . 53) (undo-tree-id1154 . 53) (undo-tree-id1155 . 53) (undo-tree-id1156 . 53) (undo-tree-id1157 . 53) (undo-tree-id1158 . 53) (undo-tree-id1159 . 53) (undo-tree-id1160 . 53) (undo-tree-id1161 . 53) (undo-tree-id1162 . 53) (undo-tree-id1163 . 53) (undo-tree-id1164 . 53) (undo-tree-id1165 . 53) (undo-tree-id1166 . 53) (undo-tree-id1167 . 53) (undo-tree-id1168 . 53) (undo-tree-id1169 . 53) (undo-tree-id1170 . 53) (undo-tree-id1171 . 53) (undo-tree-id1172 . 53) (undo-tree-id1173 . 53) (undo-tree-id1174 . 53) (undo-tree-id1175 . 53) (undo-tree-id1176 . 53) (undo-tree-id1177 . 53) (undo-tree-id1178 . 53) (undo-tree-id1179 . 53) (undo-tree-id1180 . 53) (undo-tree-id1181 . 53) (undo-tree-id1182 . 53) (undo-tree-id1183 . 53) (undo-tree-id1184 . -53) (undo-tree-id1185 . -53) (undo-tree-id1186 . -53) (undo-tree-id1187 . 1) (undo-tree-id1188 . 40) (undo-tree-id1189 . 1) (undo-tree-id1190 . 52) (undo-tree-id1191 . 40) (undo-tree-id1192 . 53) (undo-tree-id1193 . 52)) nil (23120 23356 281007 586000) 0 nil]) ((#("; Save history between emacs sessions
(savehist-mode t)" 0 2 (fontified t face font-lock-comment-delimiter-face) 2 38 (fontified t face font-lock-comment-face) 38 55 (fontified t)) . 6388) (undo-tree-id810 . -55) (undo-tree-id811 . -55) (undo-tree-id812 . 55)) ((6388 . 6443)) (23120 23351 869140 515000) 0 nil]) ((#(";;;;;;;;;;;;;" 0 13 (fontified t face font-lock-comment-delimiter-face)) . 6388)) ((6388 . 6401)) (23120 23351 835281 471000) 0 nil]) ((#("                                        ;comint is the underlying mode for interpreters, e.g. shell ipython etc
;; This saves the command history and does some other stuff related to such interpreters. I'm not sure I'm using it
(defun comint-write-input-ring-all-buffers ()
  (mapc-buffers 'comint-write-input-ring))

 (add-hook 'kill-emacs-hook 'comint-write-input-ring-all-buffers)


(add-hook 'comint-mode-hook
  (lambda()
    (define-key comint-mode-map [(meta p)] 'comint-previous-matching-input-from-input)
    (define-key comint-mode-map [(kbd \"<up>\")] 'comint-previous-matching-input-from-input)
    
    (define-key comint-mode-map [(meta n)] 'comint-next-matching-input-from-input)
    (define-key comint-mode-map [(kbd \"<down>\")] 'comint-next-matching-input-from-input)
    
    (define-key comint-mode-map [(control c) (control o)] 'comint-kill-output-to-kill-ring)
    (define-key comint-mode-map [(control x) (control ?\\\\)] 'toggle-backslash-line)
    (define-key comint-mode-map [(tab)] 'comint-dynamic-complete)

    ; Save history when the shell is killed
    (make-local-variable 'comint-input-ring-file-name)
    (setq comint-input-ring-file-name (concat emacs-persistance-dir \"/comint-history\"))
    (setq comint-input-ring-size 10000)
    (setq comint-process-echoes 't)
    (comint-read-input-ring)
    (make-local-variable 'kill-buffer-hook)
    (add-hook 'kill-buffer-hook 'comint-write-input-ring)
  ))
(add-hook 'shell-mode-hook 'ansi-color-for-comint-mode-on)
;; The following is based on:
;; http://oleksandrmanzyuk.wordpress.com/2011/10/23/a-persistent-command-history-in-emacs/
(defun mapc-buffers (fn)
  (mapc (lambda (buffer)
          (with-current-buffer buffer
            (funcall fn)))
        (buffer-list)))
" 0 40 (fontified t) 40 41 (fontified t face font-lock-comment-face) 41 48 (fontified t face font-lock-comment-face) 48 66 (fontified t face font-lock-comment-face) 66 87 (fontified t face font-lock-comment-face) 87 102 (fontified t face font-lock-comment-face) 102 106 (fontified t face font-lock-comment-face) 106 111 (fontified t face font-lock-comment-face) 111 112 (fontified t face font-lock-comment-face) 112 115 (fontified t face font-lock-comment-delimiter-face) 115 120 (fontified t face font-lock-comment-face) 120 130 (fontified t face font-lock-comment-face) 130 138 (fontified t face font-lock-comment-face) 138 145 (fontified t face font-lock-comment-face) 145 166 (fontified t face font-lock-comment-face) 166 183 (fontified t face font-lock-comment-face) 183 196 (fontified t face font-lock-comment-face) 196 208 (fontified t face font-lock-comment-face) 208 221 (fontified t face font-lock-comment-face) 221 227 (fontified t face font-lock-comment-face) 227 228 (fontified t face font-lock-comment-face) 228 229 (fontified t) 229 234 (fontified t face font-lock-keyword-face) 234 235 (fontified t) 235 270 (fontified t face font-lock-function-name-face) 270 274 (fontified t) 274 317 (fontified t) 317 386 (fontified t) 386 414 (fontified t) 414 417 (fontified t) 417 423 (fontified t face font-lock-keyword-face) 423 468 (fontified t) 468 500 (fontified t) 500 513 (fontified t) 513 551 (fontified t) 551 557 (fontified t face font-lock-string-face) 557 727 (fontified t) 727 728 (fontified t) 728 730 (fontified t) 730 738 (face font-lock-string-face fontified t) 738 781 (fontified t) 781 886 (fontified t) 886 914 (fontified t) 914 962 (fontified t) 962 1013 (fontified t) 1013 1028 (fontified t) 1028 1029 (fontified t) 1029 1033 (fontified t) 1033 1062 (fontified t face font-lock-comment-face) 1062 1073 (fontified t face font-lock-comment-face) 1073 1196 (fontified t) 1196 1213 (fontified t face font-lock-string-face) 1213 1281 (fontified t) 1281 1292 (fontified t) 1292 1462 (fontified t) 1462 1487 (fontified t) 1487 1490 (fontified t face font-lock-comment-delimiter-face) 1490 1517 (fontified t face font-lock-comment-face) 1517 1520 (fontified t face font-lock-comment-delimiter-face) 1520 1528 (fontified t face font-lock-comment-face) 1528 1562 (fontified t face font-lock-comment-face) 1562 1608 (fontified t face font-lock-comment-face) 1608 1609 (fontified t) 1609 1614 (fontified t face font-lock-keyword-face) 1614 1615 (fontified t) 1615 1627 (fontified t face font-lock-function-name-face) 1627 1642 (fontified t) 1642 1648 (fontified t face font-lock-keyword-face) 1648 1747 (fontified t)) . 6335) (undo-tree-id715 . -1520) (undo-tree-id716 . 231) (undo-tree-id717 . 231) (undo-tree-id718 . -692) (undo-tree-id719 . -1607) (undo-tree-id720 . -1516) (undo-tree-id721 . -277) (undo-tree-id722 . -235) (undo-tree-id723 . -235) (undo-tree-id724 . -221) (undo-tree-id725 . 1520) (undo-tree-id726 . 1520) (undo-tree-id727 . 1520) (undo-tree-id728 . 1520) (undo-tree-id729 . 1520) (undo-tree-id730 . 1520) (undo-tree-id731 . 1520) (undo-tree-id732 . 1520) (undo-tree-id733 . 1520) (undo-tree-id734 . 1520) (undo-tree-id735 . 1520) (undo-tree-id736 . 1520) (undo-tree-id737 . 1520) (undo-tree-id738 . 1520) (undo-tree-id739 . 1520) (undo-tree-id740 . 1520) (undo-tree-id741 . -48) (undo-tree-id742 . 1699) (undo-tree-id743 . 1520) (undo-tree-id744 . 1520) (undo-tree-id745 . 1699) (undo-tree-id746 . 1681) (undo-tree-id747 . 1520) (undo-tree-id748 . 1660) (undo-tree-id749 . 1681) (undo-tree-id750 . 1520) (undo-tree-id751 . 1660) (undo-tree-id752 . 1645) (undo-tree-id753 . 1520) (undo-tree-id754 . 1641) (undo-tree-id755 . 1645) (undo-tree-id756 . 1747) (undo-tree-id757 . 1641) (undo-tree-id758 . 1635) (undo-tree-id759 . 1747) (undo-tree-id760 . 1627) (undo-tree-id761 . 1635) (undo-tree-id762 . 1617) (undo-tree-id763 . 1627) (undo-tree-id764 . 1602) (undo-tree-id765 . 1617) (undo-tree-id766 . 1581) (undo-tree-id767 . 1602) (undo-tree-id768 . 1520) (undo-tree-id769 . 1581) (undo-tree-id770 . 1564) (undo-tree-id771 . 1520) (undo-tree-id772 . 1551) (undo-tree-id773 . 1564) (undo-tree-id774 . 1520) (undo-tree-id775 . 1551) (undo-tree-id776 . 1539) (undo-tree-id777 . 1520) (undo-tree-id778 . 1520) (undo-tree-id779 . 1539) (undo-tree-id780 . 1520) (undo-tree-id781 . 1520) (undo-tree-id782 . 1520) (undo-tree-id783 . 1520) (undo-tree-id784 . 1526) (undo-tree-id785 . 1526) (undo-tree-id786 . -1364) (undo-tree-id787 . -1364) (undo-tree-id788 . -1422) (undo-tree-id789 . -1422) (undo-tree-id790 . -1427) (undo-tree-id791 . -1427) (undo-tree-id792 . -1486) (undo-tree-id793 . -1486) (undo-tree-id794 . -1516) (undo-tree-id795 . -1516) (undo-tree-id796 . -1607) (undo-tree-id797 . -1607) (undo-tree-id798 . -1632) (undo-tree-id799 . -1632) (undo-tree-id800 . -1657) (undo-tree-id801 . -1657) (undo-tree-id802 . -1695) (undo-tree-id803 . -1695) (undo-tree-id804 . -1722) (undo-tree-id805 . -1722) (undo-tree-id806 . -1746) (undo-tree-id807 . -1746) (undo-tree-id808 . -1747) (undo-tree-id809 . -1747)) ((6335 . 8082)) (23120 23351 803323 108000) 0 nil] [nil nil ((#("                                        ;comint is the underlying mode for interpreters, e.g. shell ipython etc
;; This saves the command history and does some other stuff related to such interpreters. I'm not sure I'm using it
(defun comint-write-input-ring-all-buffers ()
  (mapc-buffers 'comint-write-input-ring))

 (add-hook 'kill-emacs-hook 'comint-write-input-ring-all-buffers)


(add-hook 'comint-mode-hook
  (lambda()
    (define-key comint-mode-map [(meta p)] 'comint-previous-matching-input-from-input)
    (define-key comint-mode-map [(kbd \"<up>\")] 'comint-previous-matching-input-from-input)
    
    (define-key comint-mode-map [(meta n)] 'comint-next-matching-input-from-input)
    (define-key comint-mode-map [(kbd \"<down>\")] 'comint-next-matching-input-from-input)
    
    (define-key comint-mode-map [(control c) (control o)] 'comint-kill-output-to-kill-ring)
    (define-key comint-mode-map [(control x) (control ?\\\\)] 'toggle-backslash-line)
    (define-key comint-mode-map [(tab)] 'comint-dynamic-complete)

    ; Save history when the shell is killed
    (make-local-variable 'comint-input-ring-file-name)
    (setq comint-input-ring-file-name (concat emacs-persistance-dir \"/comint-history\"))
    (setq comint-input-ring-size 10000)
    (setq comint-process-echoes 't)
    (comint-read-input-ring)
    (make-local-variable 'kill-buffer-hook)
    (add-hook 'kill-buffer-hook 'comint-write-input-ring)
  ))
(add-hook 'shell-mode-hook 'ansi-color-for-comint-mode-on)
;; The following is based on:
;; http://oleksandrmanzyuk.wordpress.com/2011/10/23/a-persistent-command-history-in-emacs/
(defun mapc-buffers (fn)
  (mapc (lambda (buffer)
          (with-current-buffer buffer
            (funcall fn)))
        (buffer-list)))
" 0 40 (fontified t) 40 41 (fontified t face font-lock-comment-face) 41 112 (fontified t face font-lock-comment-face) 112 115 (fontified t face font-lock-comment-delimiter-face) 115 227 (fontified t face font-lock-comment-face) 227 228 (fontified t face font-lock-comment-face) 228 229 (fontified t) 229 234 (fontified t face font-lock-keyword-face) 234 235 (fontified t) 235 270 (fontified t face font-lock-function-name-face) 270 274 (fontified t) 274 317 (fontified t) 317 386 (fontified t) 386 414 (fontified t) 414 417 (fontified t) 417 423 (fontified t face font-lock-keyword-face) 423 468 (fontified t) 468 513 (fontified t) 513 551 (fontified t) 551 557 (fontified t face font-lock-string-face) 557 728 (fontified t) 728 730 (fontified t) 730 738 (face font-lock-string-face fontified t) 738 781 (fontified t) 781 886 (fontified t) 886 914 (fontified t) 914 962 (fontified t) 962 1013 (fontified t) 1013 1028 (fontified t) 1028 1029 (fontified t) 1029 1033 (fontified t) 1033 1062 (fontified t face font-lock-comment-face) 1062 1073 (fontified t face font-lock-comment-face) 1073 1196 (fontified t) 1196 1213 (fontified t face font-lock-string-face) 1213 1281 (fontified t) 1281 1292 (fontified t) 1292 1462 (fontified t) 1462 1487 (fontified t) 1487 1490 (fontified t face font-lock-comment-delimiter-face) 1490 1517 (fontified t face font-lock-comment-face) 1517 1520 (fontified t face font-lock-comment-delimiter-face) 1520 1528 (fontified t face font-lock-comment-face) 1528 1562 (fontified t face font-lock-comment-face) 1562 1608 (fontified t face font-lock-comment-face) 1608 1609 (fontified t) 1609 1614 (fontified t face font-lock-keyword-face) 1614 1615 (fontified t) 1615 1627 (fontified t face font-lock-function-name-face) 1627 1642 (fontified t) 1642 1648 (fontified t face font-lock-keyword-face) 1648 1747 (fontified t)) . 6335) (undo-tree-id375 . -1747) (undo-tree-id376 . -1520) (undo-tree-id377 . 231) (undo-tree-id378 . 231) (undo-tree-id379 . -692) (undo-tree-id380 . -1607) (undo-tree-id381 . -1516) (undo-tree-id382 . -277) (undo-tree-id383 . -235) (undo-tree-id384 . -1747) (undo-tree-id385 . -1747) (undo-tree-id386 . -235) (undo-tree-id387 . 1747) (undo-tree-id388 . 1747) (undo-tree-id389 . -1747) (undo-tree-id390 . 1635) (undo-tree-id391 . 1747) (undo-tree-id392 . 1519) (undo-tree-id393 . 1635) (undo-tree-id394 . 1473) (undo-tree-id395 . 1519) (undo-tree-id396 . 1430) (undo-tree-id397 . 1473) (undo-tree-id398 . 1429) (undo-tree-id399 . 1430) (undo-tree-id400 . 1363) (undo-tree-id401 . 1429) (undo-tree-id402 . 1362) (undo-tree-id403 . 1363) (undo-tree-id404 . 1361) (undo-tree-id405 . 1362) (undo-tree-id406 . 1333) (undo-tree-id407 . 1361) (undo-tree-id408 . 1321) (undo-tree-id409 . 1333) (undo-tree-id410 . 1234) (undo-tree-id411 . 1321) (undo-tree-id412 . 1143) (undo-tree-id413 . 1234) (undo-tree-id414 . 1138) (undo-tree-id415 . 1143) (undo-tree-id416 . 1055) (undo-tree-id417 . 1138) (undo-tree-id418 . 966) (undo-tree-id419 . 1055) (undo-tree-id420 . 961) (undo-tree-id421 . 966) (undo-tree-id422 . 869) (undo-tree-id423 . 961) (undo-tree-id424 . 785) (undo-tree-id425 . 869) (undo-tree-id426 . 719) (undo-tree-id427 . 785) (undo-tree-id428 . 718) (undo-tree-id429 . 719) (undo-tree-id430 . 674) (undo-tree-id431 . 718) (undo-tree-id432 . 619) (undo-tree-id433 . 674) (undo-tree-id434 . 531) (undo-tree-id435 . 619) (undo-tree-id436 . 491) (undo-tree-id437 . 531) (undo-tree-id438 . 455) (undo-tree-id439 . 491) (undo-tree-id440 . 426) (undo-tree-id441 . 455) (undo-tree-id442 . 382) (undo-tree-id443 . 426) (undo-tree-id444 . 324) (undo-tree-id445 . 382) (undo-tree-id446 . 319) (undo-tree-id447 . 324) (undo-tree-id448 . 260) (undo-tree-id449 . 319) (undo-tree-id450 . 230) (undo-tree-id451 . 260) (undo-tree-id452 . 139) (undo-tree-id453 . 230) (undo-tree-id454 . 114) (undo-tree-id455 . 139) (undo-tree-id456 . 89) (undo-tree-id457 . 114) (undo-tree-id458 . 51) (undo-tree-id459 . 89) (undo-tree-id460 . 24) (undo-tree-id461 . 51) (undo-tree-id462 . 24) (undo-tree-id463 . -1747) 8082) ((6335 . 8082)) (23120 21806 526116 648000) 0 nil]) ((6556 . 6562)) ((#("ing it" 0 6 (fontified t face font-lock-comment-face)) . 6556) (undo-tree-id499 . -6)) (23120 23351 768960 786000) 0 nil]) ((#("9ing " 0 1 (fontified t face font-lock-comment-face) 1 2 (fontified t face font-lock-comment-face) 2 3 (fontified t face font-lock-comment-face) 3 4 (fontified t face font-lock-comment-face) 4 5 (fontified t face font-lock-comment-face)) . 6556) (undo-tree-id712 . -5) (undo-tree-id713 . -5) (undo-tree-id714 . 5)) ((6556 . 6561)) (23120 23351 735389 630000) 0 nil]) ((6556 . 6561)) ((#("9ing " 0 1 (fontified t face font-lock-comment-face) 1 2 (fontified t face font-lock-comment-face) 2 3 (fontified t face font-lock-comment-face) 3 4 (fontified t face font-lock-comment-face) 4 5 (fontified t face font-lock-comment-face)) . 6556) (undo-tree-id500 . -5) (undo-tree-id502 . -5)) (23120 23351 701707 101000) 0 nil]) ((#("ti" 0 1 (fontified t face font-lock-comment-face) 1 2 (fontified t face font-lock-comment-face)) . 6556) (undo-tree-id710 . -2) (undo-tree-id711 . -2)) ((6556 . 6558)) (23120 23351 668128 376000) 0 nil]) ((6543 . 6558)) ((#("t sure I'm usti" 0 13 (fontified t face font-lock-comment-face) 13 14 (fontified t face font-lock-comment-face) 14 15 (fontified t face font-lock-comment-face)) . 6543) (undo-tree-id504 . -15) (undo-tree-id506 . -15)) (23120 23351 634548 109000) 0 nil]) ((#("st" 0 1 (fontified t face font-lock-comment-face) 1 2 (fontified t face font-lock-comment-face)) . 6543) (undo-tree-id708 . -2) (undo-tree-id709 . -2)) ((6543 . 6545)) (23120 23351 600596 580000) 0 nil]) ((6531 . 6545)) ((#("ters. I'm nost" 0 12 (fontified t face font-lock-comment-face) 12 13 (fontified t face font-lock-comment-face) 13 14 (fontified t face font-lock-comment-face)) . 6531) (undo-tree-id508 . -14) (undo-tree-id510 . -14)) (23120 23351 566640 713000) 0 nil]) ((6518 . 6531)) ((#("such interpre" 0 13 (fontified t face font-lock-comment-face)) . 6518) (undo-tree-id512 . -13) (undo-tree-id514 . -13)) (23120 23351 532144 649000) 0 nil]) ((#("sh" 0 1 (fontified t face font-lock-comment-face) 1 2 (fontified t face font-lock-comment-face)) . 6518) (undo-tree-id706 . -2) (undo-tree-id707 . -2)) ((6518 . 6520)) (23120 23351 498874 942000) 0 nil]) ((6501 . 6520)) ((#("stuff related to sh" 0 17 (fontified t face font-lock-comment-face) 17 18 (fontified t face font-lock-comment-face) 18 19 (fontified t face font-lock-comment-face)) . 6501) (undo-tree-id515 . -19) (undo-tree-id517 . -19)) (23120 23351 465300 884000) 0 nil]) ((6480 . 6501)) ((#(" and does some other " 0 21 (fontified t face font-lock-comment-face)) . 6480) (undo-tree-id519 . -21) (undo-tree-id521 . -21)) (23120 23351 432006 328000) 0 nil]) ((6465 . 6473)) ((#("command " 0 8 (fontified t face font-lock-comment-face)) . 6465)) (23120 23351 398497 505000) 0 nil]) ((6455 . 6472)) ((#("saves the history" 0 17 (fontified t face font-lock-comment-face)) . 6455) (undo-tree-id522 . -10) (undo-tree-id524 . -17)) (23120 23351 364211 527000) 0 nil]) ((6447 . 6455)) ((#(";; This " 0 3 (fontified t face font-lock-comment-delimiter-face) 3 8 (fontified t face font-lock-comment-face)) . 6447) (undo-tree-id526 . -8) (undo-tree-id528 . -8)) (23120 23351 331209 241000) 0 nil]) ((6335 . 6375) (6406 . 6407)) ((#("
" 0 1 (fontified nil face font-lock-comment-face)) . 6406) (undo-tree-id529 . -1) (undo-tree-id531 . -1) (#("                                        " 0 40 (fontified t)) . 6335) (undo-tree-id533 . 40)) (23120 23351 297827 527000) 0 nil]) ((6401 . 6406)) ((#("n etc" 0 5 (fontified t face font-lock-comment-face)) . 6401) (undo-tree-id534 . -5) (undo-tree-id536 . -5)) (23120 23351 264839 773000) 0 nil]) ((6397 . 6401)) ((#("ytho" 0 4 (fontified t face font-lock-comment-face)) . 6397) (undo-tree-id537 . -4) (undo-tree-id539 . -4)) (23120 23351 232073 241000) 0 nil]) ((#("tth" 0 1 (fontified t face font-lock-comment-face) 1 2 (fontified t face font-lock-comment-face) 2 3 (fontified t face font-lock-comment-face)) . 6397) (undo-tree-id703 . 3) (undo-tree-id704 . -3) (undo-tree-id705 . -3)) ((6397 . 6400)) (23120 23351 198428 994000) 0 nil]) ((6382 . 6400)) ((#(", e.g. shell iptth" 0 15 (fontified t face font-lock-comment-face) 15 16 (fontified t face font-lock-comment-face) 16 17 (fontified t face font-lock-comment-face) 17 18 (fontified t face font-lock-comment-face)) . 6382) (undo-tree-id540 . -18) (undo-tree-id541 . -18) (undo-tree-id542 . -18) (undo-tree-id543 . 3)) (23120 23351 163486 638000) 0 nil]) ((6361 . 6382)) ((#("mode for interpreters" 0 21 (fontified nil face font-lock-comment-face)) . 6361) (undo-tree-id544 . -21) (undo-tree-id545 . -21) (undo-tree-id546 . -21)) (23120 23351 129582 925000) 0 nil]) ((#(" " 0 1 (fontified t face font-lock-comment-face)) . 6361) (undo-tree-id700 . 1) (undo-tree-id701 . -1) (undo-tree-id702 . -1)) ((6361 . 6362)) (23120 23351 95524 548000) 0 nil] [nil nil ((6335 . 6375) 6362) ((#("                                        " 0 40 (fontified t)) . 6335)) (23120 21721 464417 332000) 0 nil]) ((6343 . 6362)) ((#("is the underlying  " 0 18 (fontified t face font-lock-comment-face) 18 19 (fontified t face font-lock-comment-face)) . 6343) (undo-tree-id547 . -19) (undo-tree-id548 . -19) (undo-tree-id549 . -19) (undo-tree-id550 . 1)) (23120 23351 62505 913000) 0 nil]) ((#("(?)" 0 1 (face font-lock-comment-face) 1 2 (face font-lock-comment-face) 2 3 (face font-lock-comment-face)) . 6343) (undo-tree-id699 . 3)) ((6343 . 6346)) (23120 23351 25846 897000) 0 nil]) ((#("
" 0 1 (fontified nil)) . 3614) (undo-tree-id615 . 1) (undo-tree-id616 . 1) (undo-tree-id617 . 1) (undo-tree-id618 . 1) (undo-tree-id619 . 1) (undo-tree-id620 . 1) (undo-tree-id621 . 1) (undo-tree-id622 . 1) (undo-tree-id623 . 1) (undo-tree-id624 . 1) (undo-tree-id625 . 1) (undo-tree-id626 . 1) (undo-tree-id627 . 1) (undo-tree-id628 . 1) (undo-tree-id629 . 1) (undo-tree-id630 . 1) (undo-tree-id631 . 1) (undo-tree-id632 . 1) (undo-tree-id633 . 1) (undo-tree-id634 . 1) (undo-tree-id635 . 1) (undo-tree-id636 . 1) (undo-tree-id637 . 1) (undo-tree-id638 . 1) (undo-tree-id639 . 1) (undo-tree-id640 . 1) (undo-tree-id641 . 1) (undo-tree-id642 . 1) (undo-tree-id643 . 1) (undo-tree-id644 . 1) (undo-tree-id645 . 1) (undo-tree-id646 . 1) (undo-tree-id647 . 1) (undo-tree-id648 . 1) (undo-tree-id649 . 1) (#("
" 0 1 (fontified nil)) . 3614) (undo-tree-id650 . 1) (undo-tree-id651 . 1) (undo-tree-id652 . 1) (undo-tree-id653 . 1) (undo-tree-id654 . 1) (undo-tree-id655 . 1) (undo-tree-id656 . 1) (undo-tree-id657 . 1) (undo-tree-id658 . 1) (undo-tree-id659 . 1) (undo-tree-id660 . 1) (undo-tree-id661 . 1) (undo-tree-id662 . 1) (undo-tree-id663 . 1) (undo-tree-id664 . 1) (undo-tree-id665 . 1) (undo-tree-id666 . 1) (undo-tree-id667 . 1) (undo-tree-id668 . 1) (undo-tree-id669 . 1) (undo-tree-id670 . 1) (undo-tree-id671 . 1) (undo-tree-id672 . 1) (undo-tree-id673 . 1) (undo-tree-id674 . 1) (undo-tree-id675 . 1) (undo-tree-id676 . 1) (undo-tree-id677 . 1) (undo-tree-id678 . 1) (undo-tree-id679 . 1) (undo-tree-id680 . 1) (undo-tree-id681 . 1) (undo-tree-id682 . 1) (undo-tree-id683 . -1) (undo-tree-id684 . -1) (undo-tree-id685 . 1) (undo-tree-id686 . 1) (#("
" 0 1 (fontified t)) . 3614) (undo-tree-id687 . -1) (undo-tree-id688 . 1) (undo-tree-id689 . 1) (undo-tree-id690 . 1) (undo-tree-id691 . 1) (undo-tree-id692 . 1) (undo-tree-id693 . 1) (undo-tree-id694 . 1) (undo-tree-id695 . 1) (undo-tree-id696 . -1) (undo-tree-id697 . -1) (undo-tree-id698 . 1)) ((3614 . 3615) (3614 . 3615) (3614 . 3615)) (23120 23350 993635 548000) 0 nil]) ((#(";Shell" 0 1 (fontified t face font-lock-comment-delimiter-face) 1 6 (fontified t face font-lock-comment-face)) . 3614) (undo-tree-id608 . 6) (undo-tree-id609 . 6) (undo-tree-id610 . 6) (undo-tree-id611 . 6) (undo-tree-id612 . 6) (undo-tree-id613 . -6) (undo-tree-id614 . -6)) ((3614 . 3620)) (23120 23350 959668 450000) 0 nil]) ((#("(global-set-key (kbd \"C-S-s\") '(lambda () (interactive) 
                                 (switch-to-buffer (find-most-recent-pattern-buffer \"\\\\*shell\"))))" 0 21 (fontified t) 21 28 (fontified t face font-lock-string-face) 28 32 (fontified t) 32 38 (fontified t face font-lock-keyword-face) 38 57 (fontified t) 57 127 (fontified t) 127 141 (fontified t) 141 147 (fontified t face font-lock-string-face) 147 151 (fontified t face font-lock-string-face) 151 155 (fontified t)) . 3621) (undo-tree-id586 . 155) (undo-tree-id587 . 155) (undo-tree-id588 . 155) (undo-tree-id589 . 155) (undo-tree-id590 . 155) (undo-tree-id591 . 155) (undo-tree-id592 . 155) (undo-tree-id593 . 155) (undo-tree-id594 . 155) (undo-tree-id595 . 155) (undo-tree-id596 . 155) (undo-tree-id597 . 155) (undo-tree-id598 . 155) (undo-tree-id599 . 155) (undo-tree-id600 . 155) (undo-tree-id601 . 155) (undo-tree-id602 . 155) (undo-tree-id603 . 155) (undo-tree-id604 . 155) (undo-tree-id605 . 155) (undo-tree-id606 . 155) (undo-tree-id607 . 155)) ((3621 . 3776)) (23120 23350 926494 573000) 0 nil]) ((#("

;; Init File
(setq default-init-file (concat emacs-git \"/SimonInit.el\"))

;;Open Init File
(defun open-init-file ()
  \"Load my personal init file\"
  (interactive)
  (find-file default-init-file)
  )
" 0 1 (fontified t) 1 2 (fontified t) 2 5 (fontified t face font-lock-comment-delimiter-face) 5 15 (fontified t face font-lock-comment-face) 15 36 (fontified t) 36 56 (fontified t) 56 57 (fontified t) 57 72 (fontified t face font-lock-string-face) 72 75 (fontified t) 75 76 (fontified t) 76 78 (fontified t face font-lock-comment-delimiter-face) 78 93 (fontified t face font-lock-comment-face) 93 94 (fontified t) 94 99 (fontified t face font-lock-keyword-face) 99 100 (fontified t) 100 114 (fontified t face font-lock-function-name-face) 114 120 (fontified t) 120 148 (fontified t face font-lock-doc-face) 148 201 (fontified t)) . 1) (undo-tree-id581 . 201) (undo-tree-id582 . 201) (undo-tree-id583 . 201) (undo-tree-id584 . -201) (undo-tree-id585 . -201)) ((1 . 202)) (23120 23350 893565 996000) 0 nil]) ((#(";;Open shell
(defun open-shell ()
  \"Load the emacs shell\"
  (interactive)
  (shell)
  )" 0 2 (fontified t face font-lock-comment-delimiter-face) 2 13 (fontified t face font-lock-comment-face) 13 14 (fontified t) 14 19 (fontified t face font-lock-keyword-face) 19 20 (fontified t) 20 30 (fontified t face font-lock-function-name-face) 30 36 (fontified t) 36 58 (fontified t face font-lock-doc-face) 58 88 (fontified t)) . 1)) ((1 . 89)) (23120 23350 860903 959000) 0 nil]) ((#("
" 0 1 (fontified t)) . 3910) (undo-tree-id567 . 1) (undo-tree-id568 . 1) (undo-tree-id569 . 1) (undo-tree-id570 . 1) (undo-tree-id571 . 1) (undo-tree-id572 . 1) (undo-tree-id573 . 1) (undo-tree-id574 . 1) (undo-tree-id575 . 1) (undo-tree-id576 . 1) (undo-tree-id577 . 1) (undo-tree-id578 . 1) (undo-tree-id579 . 1) (undo-tree-id580 . 1)) ((3910 . 3911)) (23120 23350 827855 535000) 0 (:visualizer [0 1 0 #<marker in no buffer>])]) ((#(";Personal Notebook
(global-set-key [f4] 'open-personal-notes-file)

(global-set-key (kbd \"C-S-n\") '(lambda () (interactive)
                                 (switch-to-buffer \"NoteBook.org\")))

;Work Notebook
(global-set-key [f5] 'open-work-notes-file)

(global-set-key (kbd \"C-S-w\") '(lambda () (interactive)
                                 (switch-to-buffer \"WorkNoteBook.org\")))

" 0 1 (fontified t face font-lock-comment-delimiter-face) 1 19 (fontified t face font-lock-comment-face) 19 89 (fontified t) 89 96 (fontified t face font-lock-string-face) 96 100 (fontified t) 100 106 (fontified t face font-lock-keyword-face) 106 112 (fontified t) 112 124 (fontified t) 124 175 (fontified t) 175 189 (fontified t face font-lock-string-face) 189 194 (fontified t) 194 195 (fontified t face font-lock-comment-delimiter-face) 195 209 (fontified t face font-lock-comment-face) 209 275 (fontified t) 275 282 (fontified t face font-lock-string-face) 282 286 (fontified t) 286 292 (fontified t face font-lock-keyword-face) 292 361 (fontified t) 361 379 (fontified t face font-lock-string-face) 379 384 (fontified t)) . 3903) (undo-tree-id565 . 384) (undo-tree-id566 . 384)) ((3903 . 4287)) (23120 23350 794513 155000) 0 (:visualizer [0 1 0 #<marker in no buffer>])] [nil nil ((4294 . 4295)) ((#("k" 0 1 (fontified t)) . 4294) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (undo-tree-id226 . 1)) (23120 21230 815363 690000) 0 (:visualizer [0 1 0 #<marker in no buffer>])]) ((#("(global-set-key [f6] 'open-shell)
" 0 34 (fontified t)) . 4294) (undo-tree-id551 . -33) (undo-tree-id552 . -34) (undo-tree-id553 . -34) (undo-tree-id554 . 34) (undo-tree-id555 . 2) (undo-tree-id556 . -33) (undo-tree-id557 . 34) (undo-tree-id558 . -1) (undo-tree-id559 . 34) (undo-tree-id560 . 34) (undo-tree-id561 . 1) (undo-tree-id562 . 34) (undo-tree-id563 . 1) (undo-tree-id564 . 1)) ((4294 . 4328)) (23120 23350 294395 436000) 0 (:visualizer [1 0 1 #<marker in no buffer>])]) ((#("
" 0 1 (fontified t)) . 1) (undo-tree-id253 . 1) (undo-tree-id254 . 1) (undo-tree-id255 . 1) (undo-tree-id256 . 1) (undo-tree-id257 . 1) (undo-tree-id258 . 1) (undo-tree-id259 . 1) (undo-tree-id260 . 1) (undo-tree-id261 . 1) (undo-tree-id262 . 1) (undo-tree-id263 . 1) (undo-tree-id264 . 1) (undo-tree-id265 . 1) (undo-tree-id266 . 1) (undo-tree-id267 . 1)) ((1 . 2)) (23120 23347 358939 436000) 1 (:visualizer [1 0 2 #<marker in no buffer>])]) ((#("
;;Open notebook
(defun open-work-notes-file ()
  \"Load my work notebook\"
  (interactive)
  (find-file default-work-notes-file)
  (font-lock-fontify-buffer)
  (end-of-buffer)
  )


(defun open-personal-notes-file ()
  \"Load my personal notebook\"
  (interactive)
  (find-file default-personal-notes-file)
  (font-lock-fontify-buffer)
  (end-of-buffer)
  )
" 0 1 (fontified t) 1 3 (fontified t face font-lock-comment-delimiter-face) 3 17 (fontified t face font-lock-comment-face) 17 18 (fontified t) 18 23 (fontified t face font-lock-keyword-face) 23 24 (fontified t) 24 44 (fontified t face font-lock-function-name-face) 44 50 (fontified t) 50 73 (fontified t face font-lock-doc-face) 73 136 (fontified t) 136 154 (fontified t) 154 157 (fontified t) 157 182 (fontified t) 182 187 (fontified t face font-lock-keyword-face) 187 188 (fontified t) 188 212 (fontified t face font-lock-function-name-face) 212 216 (fontified t) 216 218 (fontified t) 218 245 (fontified t face font-lock-doc-face) 245 355 (fontified t)) . -1) (undo-tree-id101 . 355) (undo-tree-id102 . 355) (undo-tree-id103 . 355) (undo-tree-id104 . 355) (undo-tree-id105 . 355) (undo-tree-id106 . 355) (undo-tree-id107 . 355) (undo-tree-id108 . 355) (undo-tree-id109 . 355) (undo-tree-id110 . 355) (undo-tree-id111 . 355) (undo-tree-id112 . 355) (undo-tree-id113 . -355) (undo-tree-id114 . -355) (undo-tree-id115 . -355) (undo-tree-id116 . 355) (undo-tree-id117 . 355) (undo-tree-id118 . 355) (undo-tree-id119 . 355) (undo-tree-id120 . -355) (undo-tree-id121 . 354) (undo-tree-id122 . 355) (undo-tree-id123 . 338) (undo-tree-id124 . 354) (undo-tree-id125 . 307) (undo-tree-id126 . 338) (undo-tree-id127 . 281) (undo-tree-id128 . 307) (undo-tree-id129 . 265) (undo-tree-id130 . 281) (undo-tree-id131 . 227) (undo-tree-id132 . 265) (undo-tree-id133 . 198) (undo-tree-id134 . 227) (undo-tree-id135 . 180) (undo-tree-id136 . 198) (undo-tree-id137 . 176) (undo-tree-id138 . 180) (undo-tree-id139 . 175) (undo-tree-id140 . 176) (undo-tree-id141 . 174) (undo-tree-id142 . 175) (undo-tree-id143 . 139) (undo-tree-id144 . 174) (undo-tree-id145 . 109) (undo-tree-id146 . 139) (undo-tree-id147 . 93) (undo-tree-id148 . 109) (undo-tree-id149 . 51) (undo-tree-id150 . 93) (undo-tree-id151 . 22) (undo-tree-id152 . 51) (undo-tree-id153 . 4) (undo-tree-id154 . 22) (undo-tree-id155 . 4) (undo-tree-id156 . 4) (undo-tree-id157 . 4) 356) nil (23120 21344 380720 37000) 0 (:visualizer [1 0 2 #<marker in no buffer>])]) ((#(";; Lexical completion with M-RET
(define-key yas-minor-mode-map (kbd \"M-<return>\")     'dabbrev-expand)
(define-key yas-minor-mode-map (kbd \"M-<kp-enter>\")     'dabbrev-expand)

;;;;;;;;;;auto-complete
(require 'auto-complete-config)
(add-to-list 'ac-dictionary-directories (concat emacs-git \"Plugins/autocomplete/ac-dict\"))
(ac-config-default)
" 0 3 (fontified t face font-lock-comment-delimiter-face) 3 33 (fontified t face font-lock-comment-face) 33 69 (fontified t) 69 81 (fontified t face font-lock-string-face) 81 140 (fontified t) 140 154 (fontified t face font-lock-string-face) 154 178 (fontified t) 178 188 (fontified t face font-lock-comment-delimiter-face) 188 202 (fontified t face font-lock-comment-face) 202 203 (fontified t) 203 210 (fontified t face font-lock-keyword-face) 210 212 (fontified t) 212 232 (fontified t face font-lock-constant-face) 232 292 (fontified t) 292 310 (fontified t face font-lock-string-face) 310 322 (fontified t face font-lock-string-face) 322 325 (fontified t) 325 335 (fontified t) 335 345 (fontified t)) . 1) (undo-tree-id158 . 345) (undo-tree-id159 . 345) (undo-tree-id160 . 345) (undo-tree-id161 . 345) (undo-tree-id162 . 345) (undo-tree-id163 . 345) (undo-tree-id164 . 345) (undo-tree-id165 . 345) (undo-tree-id166 . 345) (undo-tree-id167 . 345) (undo-tree-id168 . -345) (undo-tree-id169 . -345) 346) nil (23120 21230 815938 45000) 0 (:visualizer [1 0 2 #<marker in no buffer>])]) ((#("
" 0 1 (fontified t)) . 1) (undo-tree-id170 . 1) (undo-tree-id171 . 1) (undo-tree-id172 . 1) (undo-tree-id173 . 1) (undo-tree-id174 . 1) (undo-tree-id175 . 1)) nil (23120 21230 815961 351000) 0 (:visualizer [1 0 2 #<marker in no buffer>])]) ((#(";;;;;;;;;; yas for programming templates

" 0 11 (fontified t face font-lock-comment-delimiter-face) 11 41 (fontified t face font-lock-comment-face) 41 42 (fontified t)) . -1) (undo-tree-id176 . -40) (undo-tree-id177 . 42) (undo-tree-id178 . 42) (undo-tree-id179 . 42) (undo-tree-id180 . 42) (undo-tree-id181 . -41) (undo-tree-id182 . 2) (undo-tree-id183 . 2) (undo-tree-id184 . -40) (undo-tree-id185 . -42) (undo-tree-id186 . -11) (undo-tree-id187 . -41) (undo-tree-id188 . -41) (undo-tree-id189 . -42) 43) nil (23120 21230 816010 969000) 0 (:visualizer [1 0 2 #<marker in no buffer>])]) ((#("(require 'yasnippet)
(setq yas-snippet-dirs (list (concat emacs-git \"Plugins/yasnippet/snippets\")))
(yas-global-mode 1)

;; Completing point by some yasnippet key
(defun yas-ido-expand ()
  \"Lets you select (and expand) a yasnippet key\"
  (interactive)
    (let ((original-point (point)))
      (while (and
              (not (= (point) (point-min) ))
              (not
               (string-match \"[[:space:]\\n]\" (char-to-string (char-before)))))
        (backward-word 1))
    (let* ((init-word (point))
           (word (buffer-substring init-word original-point))
           (list (yas-active-keys)))
      (goto-char original-point)
      (let ((key (remove-if-not
                  (lambda (s) (string-match (concat \"^\" word) s)) list)))
        (if (= (length key) 1)
            (setq key (pop key))
          (setq key (ido-completing-read \"key: \" list nil nil word)))
        (delete-char (- init-word original-point))
        (insert key)
        (yas-expand)))))


(define-key yas-minor-mode-map (kbd \"C-<return>\")     'yas-ido-expand)
(define-key yas-minor-mode-map (kbd \"C-<kp-enter>\")     'yas-ido-expand)

(yas-reload-all)" 0 1 (fontified t) 1 8 (fontified t face font-lock-keyword-face) 8 10 (fontified t) 10 19 (fontified t face font-lock-constant-face) 19 21 (fontified t) 21 68 (fontified t) 68 96 (fontified t face font-lock-string-face) 96 121 (fontified t) 121 124 (fontified t face font-lock-comment-delimiter-face) 124 163 (fontified t face font-lock-comment-face) 163 164 (fontified t) 164 169 (fontified t face font-lock-keyword-face) 169 170 (fontified t) 170 184 (fontified t face font-lock-function-name-face) 184 190 (fontified t) 190 236 (fontified t face font-lock-doc-face) 236 258 (fontified t) 258 261 (fontified t face font-lock-keyword-face) 261 296 (fontified t) 296 301 (fontified t face font-lock-keyword-face) 301 382 (fontified t) 382 400 (fontified t) 400 415 (fontified t face font-lock-string-face) 415 432 (fontified t) 432 450 (fontified t) 450 474 (fontified t) 474 477 (fontified t) 477 482 (fontified t) 482 486 (fontified t face font-lock-keyword-face) 486 521 (fontified t) 521 570 (fontified t) 570 647 (fontified t) 647 650 (fontified t face font-lock-keyword-face) 650 691 (fontified t) 691 697 (fontified t face font-lock-keyword-face) 697 724 (fontified t) 724 727 (fontified t face font-lock-string-face) 727 755 (fontified t) 755 757 (fontified t face font-lock-keyword-face) 757 851 (fontified t) 851 858 (fontified t face font-lock-string-face) 858 950 (fontified t) 950 952 (fontified t) 952 977 (fontified t) 977 1015 (fontified t) 1015 1027 (fontified t face font-lock-string-face) 1027 1070 (fontified t) 1070 1086 (fontified t) 1086 1100 (face font-lock-string-face fontified t) 1100 1123 (fontified t) 1123 1140 (fontified t)) . 42) (undo-tree-id190 . -1140) (undo-tree-id191 . -1140) (undo-tree-id192 . 1) (undo-tree-id193 . -1140) (undo-tree-id194 . 16) (undo-tree-id195 . -1125) 1182) nil (23120 21230 816035 399000) 0 (:visualizer [1 0 2 #<marker in no buffer>])]) ((#("
" 0 1 (fontified t)) . 42)) nil (23120 21230 816041 83000) 0 (:visualizer [1 0 2 #<marker in no buffer>])]) ((#(";; TODO: is this working?" 0 3 (fontified t face font-lock-comment-delimiter-face) 3 25 (fontified t face font-lock-comment-face)) . -42) (undo-tree-id196 . -25) (undo-tree-id197 . -25) 67) nil (23120 21230 816050 794000) 0 (:visualizer [1 0 2 #<marker in no buffer>])]) ((#("
;;;;;;;;;; js2 mode for json


" 0 1 (fontified t) 1 12 (fontified t face font-lock-comment-delimiter-face) 12 30 (fontified t face font-lock-comment-face) 30 31 (fontified t) 31 32 (fontified t)) . -1) (undo-tree-id198 . -29) (undo-tree-id199 . 2) (undo-tree-id200 . 2) (undo-tree-id201 . -30) (undo-tree-id202 . -12) (undo-tree-id203 . 3) (undo-tree-id204 . 3) (undo-tree-id205 . -29) (undo-tree-id206 . -32) (undo-tree-id207 . -12) (undo-tree-id208 . -32) 33) nil (23120 21230 816088 959000) 0 (:visualizer [1 0 2 #<marker in no buffer>])]) ((#("(require 'js2-mode)" 0 1 (fontified t) 1 8 (fontified t face font-lock-keyword-face) 8 10 (fontified t) 10 18 (fontified t face font-lock-constant-face) 18 19 (fontified t)) . 31) (undo-tree-id209 . -19) (undo-tree-id210 . 1) (undo-tree-id211 . -19) (undo-tree-id212 . 19) (undo-tree-id213 . -1) (undo-tree-id214 . -19) 50) nil (23120 21230 816112 304000) 0 (:visualizer [1 0 2 #<marker in no buffer>])]) ((#("
;;;;;;;;;;;;;;;;;;;;

" 0 1 (fontified t) 1 21 (fontified t face font-lock-comment-delimiter-face) 21 22 (fontified t face font-lock-comment-face) 22 23 (fontified t)) . 21984) (undo-tree-id215 . -23) (undo-tree-id216 . -23) (undo-tree-id217 . -23) (undo-tree-id218 . -23) (undo-tree-id219 . -23)) nil (23120 21230 816146 12000) 0 (:visualizer [1 0 2 #<marker in no buffer>])]) ((#("; magit-diff-file was written by dov, and requsted to be merged into magit.
; See: https://github.com/magit/magit/issues/2553
(defun magit-diff-file (rev-or-range &optional file args)
  \"Show changes between a file from another branch\"
  (interactive (list (magit-diff-read-range-or-commit \"File diff for range\" nil current-prefix-arg)
                     (if current-prefix-arg
                       (read-file-name \"File: \")
                       buffer-file-name))) 
  (magit-diff-setup rev-or-range nil args
                    (list (replace-regexp-in-string (magit-toplevel) \"\" (expand-file-name file)))))

(global-set-key (kbd \"C-c d\") 'magit-diff-file)

; magit settings
(setq magit-push-always-verify nil) ; by default push to updtream branch
(setq git-commit-summary-max-length 256) ; length of commit-msg above which a warning is shown
(load \"magit-blame\")
(load \"markdown-mode\")
(setq magit-diff-options '(\"-w\"))
(load \"mo-git-blame\")" 0 2 (fontified t face font-lock-comment-delimiter-face) 2 7 (fontified t face font-lock-comment-face) 7 76 (fontified t face font-lock-comment-face) 76 78 (fontified t face font-lock-comment-delimiter-face) 78 126 (fontified t face font-lock-comment-face) 126 127 (fontified t) 127 132 (fontified t face font-lock-keyword-face) 132 133 (fontified t) 133 148 (fontified t face font-lock-function-name-face) 148 163 (fontified t) 163 172 (fontified t face font-lock-type-face) 172 186 (fontified t) 186 235 (fontified t face font-lock-doc-face) 235 290 (fontified t) 290 311 (fontified t face font-lock-string-face) 311 358 (fontified t) 358 360 (fontified t face font-lock-keyword-face) 360 419 (fontified t) 419 427 (fontified t face font-lock-string-face) 427 500 (fontified t) 500 507 (fontified t) 507 515 (fontified t) 515 584 (fontified t) 584 586 (fontified t face font-lock-string-face) 586 637 (fontified t) 637 644 (fontified t face font-lock-string-face) 644 665 (fontified t) 665 667 (fontified t face font-lock-comment-delimiter-face) 667 682 (fontified t face font-lock-comment-face) 682 718 (fontified t) 718 755 (fontified t face font-lock-comment-face) 755 796 (fontified t) 796 850 (fontified t face font-lock-comment-face) 850 856 (fontified t) 856 869 (fontified t face font-lock-string-face) 869 877 (fontified t) 877 892 (fontified t face font-lock-string-face) 892 921 (fontified t) 921 925 (fontified t face font-lock-string-face) 925 934 (fontified t) 934 948 (fontified t face font-lock-string-face) 948 949 (fontified t)) . 22007) (undo-tree-id220 . -949) (undo-tree-id221 . -949) (undo-tree-id222 . -949) (t 23120 20181 722208 951000)) nil (23120 21230 816161 986000) 0 (:visualizer [1 0 2 #<marker in no buffer>])] [nil ([nil ([nil nil ((21984 . 21985)) ((#("z" 0 1 (fontified t)) . 21984) (undo-tree-id16 . -1) (undo-tree-id17 . 1)) (23120 20888 49823 980000) 0 (:visualizer [0 1 0 #<marker in no buffer>])]) ((#("
;;;;;;;;;;;;;;;;;;;;


" 0 1 (fontified t) 1 21 (fontified t face font-lock-comment-delimiter-face) 21 22 (fontified t face font-lock-comment-face) 22 23 (fontified t) 23 24 (fontified t)) . 21984) (undo-tree-id11 . -24) (undo-tree-id12 . -23) (undo-tree-id13 . -23) (undo-tree-id14 . -24) (undo-tree-id15 . 24)) ((21984 . 22008)) (23120 20888 50009 0) 0 (:visualizer [0 1 0 #<marker in no buffer>])]) ((#("; magit-diff-file was written by dov, and requsted to be merged into magit.
; See: https://github.com/magit/magit/issues/2553
(defun magit-diff-file (rev-or-range &optional file args)
  \"Show changes between a file from another branch\"
  (interactive (list (magit-diff-read-range-or-commit \"File diff for range\" nil current-prefix-arg)
                     (if current-prefix-arg
                       (read-file-name \"File: \")
                       buffer-file-name))) 
  (magit-diff-setup rev-or-range nil args
                    (list (replace-regexp-in-string (magit-toplevel) \"\" (expand-file-name file)))))

(global-set-key (kbd \"C-c d\") 'magit-diff-file)

; magit settings
(setq magit-push-always-verify nil) ; by default push to updtream branch
(setq git-commit-summary-max-length 256) ; length of commit-msg above which a warning is shown
(load \"magit-blame\")
(load \"markdown-mode\")
(setq magit-diff-options '(\"-w\"))
(load \"mo-git-blame\")" 0 2 (fontified t face font-lock-comment-delimiter-face) 2 7 (fontified t face font-lock-comment-face) 7 76 (fontified t face font-lock-comment-face) 76 78 (fontified t face font-lock-comment-delimiter-face) 78 126 (fontified t face font-lock-comment-face) 126 127 (fontified t) 127 132 (fontified t face font-lock-keyword-face) 132 133 (fontified t) 133 148 (fontified t face font-lock-function-name-face) 148 163 (fontified t) 163 172 (fontified t face font-lock-type-face) 172 186 (fontified t) 186 235 (fontified t face font-lock-doc-face) 235 290 (fontified t) 290 311 (fontified t face font-lock-string-face) 311 358 (fontified t) 358 360 (fontified t face font-lock-keyword-face) 360 419 (fontified t) 419 427 (fontified t face font-lock-string-face) 427 507 (fontified t) 507 515 (fontified t) 515 584 (fontified t) 584 586 (fontified t face font-lock-string-face) 586 637 (fontified t) 637 644 (fontified t face font-lock-string-face) 644 665 (fontified t) 665 667 (fontified t face font-lock-comment-delimiter-face) 667 682 (fontified t face font-lock-comment-face) 682 718 (fontified t) 718 755 (fontified t face font-lock-comment-face) 755 796 (fontified t) 796 850 (fontified t face font-lock-comment-face) 850 856 (fontified t) 856 869 (fontified t face font-lock-string-face) 869 877 (fontified t) 877 892 (fontified t face font-lock-string-face) 892 921 (fontified t) 921 925 (fontified t face font-lock-string-face) 925 934 (fontified t) 934 948 (fontified t face font-lock-string-face) 948 949 (fontified t)) . 22007) (undo-tree-id5 . -949) (undo-tree-id6 . -949) (undo-tree-id7 . 1) (undo-tree-id8 . -949) (undo-tree-id9 . 21) (undo-tree-id10 . -929) 22956 (t 23120 20181 722208 951000)) ((22007 . 22956)) (23120 20888 282058 161000) 0 (:visualizer [0 1 0 #<marker in no buffer>])]) nil nil (23120 20888 578884 290000) 0 (:visualizer [3 0 1 #<marker in no buffer>])] #1# 28471 76 nil]