"a99abb06be2532241361d8ea6d2668095d4442d6"
[cl-struct-undo-tree [nil ([nil ([nil ([nil ([nil (#8=[nil nil ((nil rear-nonsticky nil 5393 . 5394) (nil keymap #1=(keymap (118 . magit-reverse) (117 . magit-unstage) (115 . magit-stage) (67 . magit-commit-add-log) (97 . magit-apply) (remap keymap (magit-delete-thing . magit-discard) (magit-visit-thing . magit-diff-visit-file)) (10 . magit-diff-visit-file-worktree) (C-return . magit-diff-visit-file-worktree)) 5331 . 5394) (nil fontified nil 5331 . 5394) (5331 . 5394)) nil (22572 20716 100068 386000) 0 nil]) ((#("\"LD_LIBRARY_PATH\" \"$METALJET/BinLinux/:/mnt/HDD/linux/home/simon/Qt5.6/5.6/gcc_64/lib:/usr/local/lib\" t" 0 17 (fontified t face font-lock-string-face) 17 18 (fontified t) 18 40 (fontified t face font-lock-string-face) 40 87 (fontified t face font-lock-string-face) 87 101 (fontified t face font-lock-string-face) 101 103 (fontified t)) . -5331) (undo-tree-id6 . -103) 5435 (t 22572 20690 531752 828000)) nil (22572 20716 100099 194000) 0 nil] [nil ([nil nil ((nil rear-nonsticky nil 4524 . 4525) (nil keymap #1# 4462 . 4525) (nil fontified nil 4462 . 4525) (4462 . 4525)) ((#("setenv \"LD_LIBRARY_PATH\" \"$METALJET/BinLinux/:/usr/local/lib\" t" 0 7 (magit-section #7=[cl-struct-magit-section hunk (nil "-130,7" "+130,7") #<marker (moves after insertion) at 201 in *magit: SimonEnv> #<marker at 1 in *magit: SimonEnv> #<marker at 1 in *magit: SimonEnv> nil nil nil nil nil nil #6=[cl-struct-magit-section file "Emacs/SimonInit.el" #<marker (moves after insertion) at 201 in *magit: SimonEnv> #<marker at 1 in *magit: SimonEnv> #<marker at 1 in *magit: SimonEnv> nil nil nil nil "diff --git Emacs/SimonInit.el Emacs/SimonInit.el
index f55648c..be729ff 100644
--- Emacs/SimonInit.el
+++ Emacs/SimonInit.el
" nil #4=[cl-struct-magit-section staged nil #<marker (moves after insertion) at 201 in *magit: SimonEnv> #<marker at 1 in *magit: SimonEnv> #<marker at 1 in *magit: SimonEnv> nil nil nil nil nil nil #2=[cl-struct-magit-section status nil #<marker (moves after insertion) at 201 in *magit: SimonEnv> nil #<marker at 1 in *magit: SimonEnv> nil nil nil nil nil nil nil (#3=[cl-struct-magit-section branch "master" #<marker (moves after insertion) at 201 in *magit: SimonEnv> #<marker at 1 in *magit: SimonEnv> #<marker at 1 in *magit: SimonEnv> nil nil nil nil nil nil #2# ([cl-struct-magit-section branch "origin/master" #<marker (moves after insertion) at 201 in *magit: SimonEnv> nil #<marker at 1 in *magit: SimonEnv> nil nil nil nil nil nil #3# nil])] #4# #5=[cl-struct-magit-section stashes "refs/stash" #<marker (moves after insertion) at 201 in *magit: SimonEnv> #<marker at 1 in *magit: SimonEnv> #<marker at 1 in *magit: SimonEnv> nil nil nil nil nil nil #2# ([cl-struct-magit-section stash "stash@{0}" #<marker (moves after insertion) at 201 in *magit: SimonEnv> nil #<marker at 1 in *magit: SimonEnv> nil nil nil nil nil nil #5# nil])])] (#6#)] (#7#)] nil] fontified nil keymap #1#) 7 24 (magit-section #7# fontified nil face font-lock-string-face keymap #1#) 24 25 (magit-section #7# fontified nil keymap #1#) 25 61 (magit-section #7# fontified nil face font-lock-string-face keymap #1#) 61 62 (magit-section #7# fontified nil keymap #1#) 62 63 (magit-section #7# fontified nil rear-nonsticky nil keymap #1#)) . 4462) (undo-tree-id0 . -63) (undo-tree-id1 . -63) (nil keymap nil 4524 . 4525) (nil keymap nil 4523 . 4524) (nil keymap nil 4487 . 4523) (nil keymap nil 4486 . 4487) (nil keymap nil 4469 . 4486) (nil keymap nil 4462 . 4469) (nil rear-nonsticky t 4524 . 4525)) (22572 20704 731492 450000) 0 nil]) ((4397 . 4437) (4421 . 4422) (t 22572 20690 531752 828000)) ((#("
" 0 1 (fontified nil face font-lock-comment-face)) . 4421) (undo-tree-id2 . -1) (undo-tree-id3 . 1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (#("                                        " 0 40 (fontified t)) . 4397)) (22572 20704 731834 744000) 0 nil]) ((5371 . 5418) (t 22572 20658 463200 368000)) nil (22572 20704 995975 312000) 0 nil]) (("mnt/HDD/linux/home/simon/Qt5.6/5.6/gcc_64/lib:/" . 5371) (t 22572 20642 453924 569000)) nil (22572 20704 731516 90000) 0 nil] [nil nil ((1 . 2) (t 22572 20642 453924 569000)) ((#("z" 0 1 (fontified t)) . 1)) (22572 20651 394796 77000) 0 nil]) ((5371 . 5418) (t 22572 20521 52833 133000) ("mnt/HDD/linux/home/simon/Qt5.6/5.6/gcc_64/lib:/" . 5371) (t 22572 20518 593790 770000) (8122 . 12669) ("
;;;;;;;;;;Toolbars
(menu-bar-mode 't)
(tool-bar-mode 'nil)

;;;;;;;;;;Misc
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(blink-cursor-mode nil)
 '(column-number-mode t)
 '(inhibit-startup-screen t)
 '(safe-local-variable-values (quote ((Encoding . utf-8))))
 '(show-paren-mode t))

; Overwrite Selection
 (delete-selection-mode t)

 ; reload changed files
(global-auto-revert-mode t)

; Don't add newline at end of file
(setq mode-require-final-newline nil)

;; Show line-number in the mode line
(line-number-mode 1)

;; Show column-number in the mode line
(column-number-mode 1)

;;Open notebook
(defun open-work-notes-file ()
  \"Load my work notebook\"
  (interactive)
  (find-file default-work-notes-file)
  (font-lock-fontify-buffer)
  (end-of-buffer)
  )


(defun open-personal-notes-file ()
  \"Load my personal notebook\"
  (interactive)
  (find-file default-personal-notes-file)
  (font-lock-fontify-buffer)
  (end-of-buffer)
  )

;;Open shell
(defun open-shell ()
  \"Load the emacs shell\"
  (interactive)
  (shell)
  )

;; Init File
(setq default-init-file (concat emacs-git \"/SimonInit.el\"))

;;Open Init File
(defun open-init-file ()
  \"Load my personal todo list\"
  (interactive)
  (find-file default-init-file)
  )

;; Most Recent Buffers
(defun find-first-buffer-match (buffers pattern)
  (dolist (f buffers)
    (when (string-match pattern (buffer-name f))
      (return f))))

(defun find-most-recent-pattern-buffer (pattern)
  \"find the most recent code buffer in the history and switch to it\"
  (let ((f (find-first-buffer-match (cdr (buffer-list)) pattern)))
    (if (not (eq f nil))
        (switch-to-buffer f)
      )
    )
  )

(defun find-most-recent-python-buffer ()
  \"find the most recent code buffer in the history and switch to it\"
  (interactive)
  (find-most-recent-pattern-buffer \"\\\\.py\"))

(defun find-most-recent-c-buffer ()
  \"find the most recent code buffer in the history and switch to it\"
  (interactive)
  (find-most-recent-pattern-buffer \"\\\\.\\\\(cpp\\\\|h\\\\|cc\\\\|hh|hpp\\\\)$\"))

(defun find-most-recent-emacs-buffer ()
  \"find the most recent code buffer in the history and switch to it\"
  (interactive)
  (find-most-recent-pattern-buffer \"\\\\.el\\\\$\\\\|dov.emacs|SimonInit.el\"))

(defun find-most-recent-magit-buffer ()
  \"find the most recent code buffer in the history and switch to it\"
  (interactive)
  (find-most-recent-pattern-buffer \"magit\"))

(defun find-most-recent-org-buffer ()
  \"find the most recent code buffer in the history and switch to it\"
  (interactive)
  (find-most-recent-pattern-buffer \"\\\\.org\\$\"))

;; qt docs lookup
(require `info-look)
(load \"qtdoc\")
(setq qtdoc-html-root \"http://doc.qt.io/qt-4.8/\")
(load \"google-look\")

;;;;;;;;;;KEYBOARD SHORTCUTS
; Undo-Redo
(defalias 'redo 'undo-tree-redo)
(global-set-key (kbd \"C-z\") 'undo) ; 【Ctrl+z】
(global-set-key (kbd \"C-S-z\") 'redo) ; 【Ctrl+Shift+z】;  Mac style

(global-set-key \"\\C-o\" 'find-file)  ; Open file (Microsoft style)
(global-set-key (kbd \"C-<f4>\") 'kill-this-buffer) ; Close Buffer (Microsoft style)

(define-key global-map (kbd \"RET\") 'newline-and-indent) ; For programming language modes

(global-set-key (kbd \"M-g\") 'goto-line) ; Goto-line

(global-set-key (kbd \"C-<f9>\") 'compile) ; Compile

(global-set-key \"\\M-`\" 'next-error) ; Next Error (and also next file in dov-git-grep)
(global-set-key \"\\M-~\" 'previous-error) ; Previous Error (and also previous file in dov-git-grep)

(global-set-key (kbd \"C-<tab>\") 'next-buffer) ; C-Tab: Next Buffer
(global-set-key (kbd \"C-S-<iso-lefttab>\") 'previous-buffer) ; C-S-Tab: Previous Buffer

; Move between Windows
(global-set-key (kbd \"C-x <up>\") 'windmove-up)
(global-set-key (kbd \"C-x <down>\") 'windmove-down)
(global-set-key (kbd \"C-x <right>\") 'windmove-right)
(global-set-key (kbd \"C-x <left>\") 'windmove-left)

; Scroll with Ctrl+Up/Down
(setq scroll-step 1)
(setq scroll-conservatively 10000)
(setq auto-window-vscroll nil)

; NB: scrolling down = moving the window up...
(global-set-key (kbd \"<C-up>\")   (lambda () (interactive) (scroll-down 1)))
(global-set-key (kbd \"<C-kp-up>\")   (lambda () (interactive) (scroll-down 1)))
(global-set-key (kbd \"<C-down>\") (lambda () (interactive) (scroll-up 1)))
(global-set-key (kbd \"<C-kp-down>\") (lambda () (interactive) (scroll-up 1))" . 8122) (t 22572 20514 252715 984000) (5371 . 5418) (t 22485 20394 16420 505000)) nil (22572 20651 395191 448000) 0 nil]) nil nil (22572 20651 394814 408000) 0 nil] #8# 5134 8 nil]